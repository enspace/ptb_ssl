&НаКлиенте
//Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)

//КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)

	Если Модифицированность Тогда

//		Ответ = Неопределено;

		ПоказатьВопрос(Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект), "Данные были изменены. Сохранить изменения?", РежимДиалогаВопрос.ДаНетОтмена);
		Отказ = Истина;
//        ВызватьИсключение "Вызов преобразован не полностью";//Присвоение cсылочного параметра: Отказ

	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Ответ = РезультатВопроса;
	
	Если Ответ = КодВозвратаДиалога.Отмена Тогда
		Возврат;
		
	ИначеЕсли Ответ = КодВозвратаДиалога.Да Тогда
		
		Если НЕ ЗаписатьДанные() Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Модифицированность = Ложь;
	ЭтотОбъект.Закрыть();

КонецПроцедуры

// Функция записывает измененные данные в базу
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//  Булево, записана корректно или нет
//
Функция ЗаписатьДанные()

	СтруктураДанных = Новый Структура;

	ЗаполнитьСтруктуруДанныхНастройкиОбращенияВОтделТехподдержкиПоУмолчанию(СтруктураДанных, ЭтаФорма);

	Попытка
		Константы.ПараметрыОбращенияВОтделТехническойПоддержки.Установить(Новый ХранилищеЗначения(СтруктураДанных, Новый СжатиеДанных));
		// 16.08.2011, Анисков А.А., 2Д-РЗ-474, НАЧАЛО
		Константы.МодераторСообщенийТехПоддержке.Установить(МодераторСообщений);
		// 16.08.2011, Анисков А.А., 2Д-РЗ-474, КОНЕЦ
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;

	Модифицированность = Ложь;
	
	Возврат Истина;

КонецФункции

&НаСервере
// Процедура формирует таблицу значений со структурой для заполнения данными
// с информацией обращения в отдел технической поддержки
//
// Параметры:
//  ТаблицаДанных - таблица значений для заполнения
//  ФормаНастройкиПараметров - общая форма настройки параметров для отправки в отдел технической поддержки
//
Процедура ЗаполнитьСтруктуруДанныхНастройкиОбращенияВОтделТехподдержкиПоУмолчанию(ТаблицаДанных, ФормаНастройкиПараметров = Неопределено) Экспорт

	// Структура данных - таблица значений:
	//  Колонки:
	//   ИмяРаздела
	//   ПредставлениеРаздела
	//   ДанныеРаздела
	
	// Структура данных раздела
	//  Ключ - Имя значения настройки, как оно задано в форме настройки параметров обращения
	//  Значение - Значение

	Если ТипЗнч(ТаблицаДанных) <> Тип("ТаблицаЗначений") Тогда
		ТаблицаДанных = Новый ТаблицаЗначений;
	КонецЕсли;

	Если ТаблицаДанных.Колонки.Количество() = 0 Тогда

		ТаблицаДанных.Колонки.Добавить("ИндексСортировки"    , Новый ОписаниеТипов("Число"));
		ТаблицаДанных.Колонки.Добавить("ИмяРаздела"          , Новый ОписаниеТипов("Строка"));
		ТаблицаДанных.Колонки.Добавить("ПредставлениеРаздела", Новый ОписаниеТипов("Строка"));
		ТаблицаДанных.Колонки.Добавить("ДанныеРаздела"       , Новый ОписаниеТипов("Структура"));

		СтрокаРаздела = ТаблицаДанных.Добавить();
		СтрокаРаздела.ИмяРаздела = "ОсновныеДанные";
		СтрокаРаздела.ПредставлениеРаздела = "Основные данные по использованию 1С:Предприятие 8.0 и конфигурации";
		
		СтрокаРаздела = ТаблицаДанных.Добавить();
		СтрокаРаздела.ИмяРаздела = "Владелец";
		СтрокаРаздела.ПредставлениеРаздела = "Организация-пользователь";
		
		СтрокаРаздела = ТаблицаДанных.Добавить();
		СтрокаРаздела.ИмяРаздела = "ПараметрыПодключенияКСервисуАСУСО";
		СтрокаРаздела.ПредставлениеРаздела = "Параметры подключения к сервису АСУСО";

	КонецЕсли;

	Если ФормаНастройкиПараметров = Неопределено Тогда
		ФормаНастройкиПараметров = ПолучитьОбщуюФорму("НастройкаПараметровОбращенияВОтделТехническойПоддержки");
	КонецЕсли;

	ТаблицаДанных.Индексы.Добавить("ИмяРаздела");
	
	Для каждого ЭлементФормы Из ФормаНастройкиПараметров.Элементы Цикл

		Если ТипЗнч(ЭлементФормы) <> Тип("Полеформы") Тогда
			Продолжить;
		КонецЕсли;

		ПозицияРазделителяРаздела = Найти(ЭлементФормы.Имя, "_");
		Если ПозицияРазделителяРаздела = 0 Тогда
			Продолжить;
		КонецЕсли;

		ИмяРаздела    = Сред(ЭлементФормы.Имя, 1, (ПозицияРазделителяРаздела - 1));
		СтрокаРаздела = ТаблицаДанных.Найти(ИмяРаздела, "ИмяРаздела");

		Если СтрокаРаздела = Неопределено Тогда

			СтрокаРаздела = ТаблицаДанных.Добавить();
			СтрокаРаздела.ИмяРаздела = ИмяРаздела;

			Попытка
				СтрокаРаздела.ПредставлениеРаздела = ФормаНастройкиПараметров.Элементы.ОсновнаяПанель.Страницы[ИмяРаздела].Заголовок;
				СтрокаРаздела.ИндексСортировки     = ФормаНастройкиПараметров.Элементы.ОсновнаяПанель.Страницы.Индекс(ФормаНастройкиПараметров.ЭлементыФормы.ОсновнаяПанель.Страницы[ИмяРаздела]);
			Исключение
				СтрокаРаздела.ПредставлениеРаздела = ИмяРаздела;
			КонецПопытки;

		КонецЕсли;

		СтрокаРаздела.ДанныеРаздела.Вставить(ЭлементФормы.Имя, ФормаНастройкиПараметров[ЭлементФормы.Имя]);

	КонецЦикла;

	ТаблицаДанных.Сортировать("ИндексСортировки ВОЗР");

КонецПроцедуры

&НаСервере
// Процедура  производит заполнение данными из константы
// 
Процедура ЗаполнитьЗначенияРеквизитовФормы()

	СтруктураДанных = Константы.ПараметрыОбращенияВОтделТехническойПоддержки.Получить().Получить();

	Если ТипЗнч(СтруктураДанных) <> Тип("ТаблицаЗначений") Тогда
		Возврат;
	КонецЕсли;

	Для каждого СтрокаРаздела Из СтруктураДанных Цикл
		Для Каждого ЭлементЗначения Из СтрокаРаздела.ДанныеРаздела Цикл
			Попытка
				ЭтаФорма[ЭлементЗначения.Ключ] = ЭлементЗначения.Значение;
			Исключение
			КонецПопытки;
		КонецЦикла;
	КонецЦикла;
	
	МодераторСообщений = Константы.МодераторСообщенийТехПоддержке.Получить();
	Если ОсновныеДанные_ВариантИБПредприятия = "" Тогда
		Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
			ОсновныеДанные_ВариантИБПредприятия = "Файл-сервер";
		Иначе	
			ОсновныеДанные_ВариантИБПредприятия = "Клиент-сервер";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Элементы.ОсновныеДанные_ВариантИспользованияКонфигурации.СписокВыбора.Добавить("Типовая конфигурация используется без изменения");
	Элементы.ОсновныеДанные_ВариантИспользованияКонфигурации.СписокВыбора.Добавить("Типовая конфигурация находится на поддержке с возможностью внесения изменений");
	Элементы.ОсновныеДанные_ВариантИспользованияКонфигурации.СписокВыбора.Добавить("Типовая конфигурация снята с поддержки");
	Элементы.ОсновныеДанные_ВариантИспользованияКонфигурации.СписокВыбора.Добавить("Типовая конфигурация с мелкими доработками");
	Элементы.ОсновныеДанные_ВариантИспользованияКонфигурации.СписокВыбора.Добавить("Типовая конфигурация с существенными доработками");
	Элементы.ОсновныеДанные_ВариантИспользованияКонфигурации.СписокВыбора.Добавить("Уникальная конфигурация");

	Элементы.ОсновныеДанные_ВариантИБПредприятия.СписокВыбора.Добавить("Файл-сервер");
	Элементы.ОсновныеДанные_ВариантИБПредприятия.СписокВыбора.Добавить("Клиент-сервер");
	
	ЗаполнитьЗначенияРеквизитовФормы();
	
КонецПроцедуры

&НаСервере
Функция ПроверкаПодключенияКВебСервисуНаСервере(Адрес, Логин, Пароль)
	
	Определение = Новый WSОпределения(Адрес, Логин, Пароль);
	
	Сервис = Новый WSПрокси(Определение,"http://www.progtb.ru/ws/asusodata","AsusoExchange","AsusoExchangeSoap");
	Сервис.Пользователь = Логин;
	Сервис.Пароль = Пароль;
	
	Возврат ТипЗнч(Сервис) = Тип("WSПрокси");
	
КонецФункции

&НаКлиенте
Процедура ПроверкаПодключенияКВебСервису(Команда)
	
	ПроверкаУспешна = Ложь;
	Попытка
		ПроверкаУспешна = ПроверкаПодключенияКВебСервисуНаСервере(ПараметрыПодключенияКСервисуАСУСО_Адрес, ПараметрыПодключенияКСервисуАСУСО_Логин, ПараметрыПодключенияКСервисуАСУСО_Пароль);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
	КонецПопытки; 
	
	Если ПроверкаУспешна Тогда
		ПоказатьПредупреждение(, "Проверка выполнена успешно");
	КонецЕсли;
	
КонецПроцедуры


