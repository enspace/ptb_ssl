// ООО "ПрогТехБизнес"
// 08.10.2015, Белопухов А.Н., п.3388

#Область ОтправкаДанныхЧерезВебСервис
  
Функция ОтправитьСообщенияАСУСО(ПараметрыВыполнения, АдресХранилища = "") Экспорт
	
	ЗаписьЖурналаРегистрации(НСтр("ru = 'АСУСО. Обмен данными с веб-сервисом AsusoExchange'"),
	УровеньЖурналаРегистрации.Информация, , ,
	НСтр("ru = 'Подключение к веб-сервису AsusoExchange для отправки данных'"));

	СоответствиеСообщений = ПараметрыВыполнения.СоответствиеСообщений;
	
	Попытка
    	Сервис = ПолучитьСервисAsusoExchange();
	Исключение
	КонецПопытки;
	
	СервисДоступен = ТипЗнч(Сервис) = Тип("WSПрокси");
	
	ЕстьОшибки = Ложь;

	Для Каждого КлючИЗначение Из СоответствиеСообщений Цикл
				
		ЗаписьСообщения = РегистрыСведений.СообщенияВТехническуюПоддержку.СоздатьМенеджерЗаписи();
		ЗаписьСообщения.Идентификатор	= КлючИЗначение.Ключ;
		ЗаписьСообщения.Отправитель		= КлючИЗначение.Значение;

		ЗаписьСообщения.Прочитать();

		Если Не ЗаписьСообщения.Выбран() Тогда
			ЗаписьЖурналаРегистрации(НСтр("ru = 'АСУСО. Обмен данными с веб-сервисом AsusoExchange'"),
			УровеньЖурналаРегистрации.Ошибка, , ,
			НСтр("ru = 'Сообщение не отправлено. Неверные данные для отправки'"));
			Продолжить;
		КонецЕсли; 
		
		Если НЕ СервисДоступен Тогда
			ЗаписьСообщения.Статус = Перечисления.СтатусыСообщенийВТехническуюПоддержку.ОшибкаОтправки;
			ЗаписьСообщения.Записать();
	       	ЕстьОшибки = Истина;
			ЗаписьЖурналаРегистрации(НСтр("ru = 'АСУСО. Обмен данными с веб-сервисом AsusoExchange'"),
			УровеньЖурналаРегистрации.Ошибка, , ,
			НСтр("ru = 'Сообщение не отправлено. Возможно проблемы с интернет-соединением, или нет доступа к серверу разработчика'"));

			Продолжить;
		КонецЕсли; 
		
		ДанныеСообщения = РегистрыСведений.СообщенияВТехническуюПоддержку.ПодготовитьДанныеДляОтправкиВФорматеXML(ЗаписьСообщения);	
		
		Если ТипЗнч(ДанныеСообщения) <> Тип("Структура") Тогда
			ЗаписьЖурналаРегистрации(НСтр("ru = 'АСУСО. Обмен данными с веб-сервисом AsusoExchange'"),
			УровеньЖурналаРегистрации.Ошибка, , ,
			НСтр("ru = 'Сообщение не отправлено. Неверные данные для отправки'"));
			
			ЗаписьСообщения.Статус = Перечисления.СтатусыСообщенийВТехническуюПоддержку.ОшибкаОтправки;
			ЗаписьСообщения.Записать();
			ЕстьОшибки = Истина;

		КонецЕсли; 
		
		СообщениеОтправлено = Неопределено;
		Попытка
			СообщениеОтправлено = Сервис.ДобавитьСообщение(ДанныеСообщения.Сообщение, ДанныеСообщения.Вложения);
		Исключение			
		КонецПопытки;
		
		Если СообщениеОтправлено = "true" Тогда
			ЗаписьЖурналаРегистрации(НСтр("ru = 'АСУСО. Обмен данными с веб-сервисом AsusoExchange'"),
			УровеньЖурналаРегистрации.Информация, , ,
			НСтр("ru = 'Сообщение отправлено.'"));

			ЗаписьСообщения.Статус 			= Перечисления.СтатусыСообщенийВТехническуюПоддержку.Отправлено;
			ЗаписьСообщения.ДатаОтправки 	= ТекущаяДатаСеанса();
			ЗаписьСообщения.Записать();
		Иначе
			ЗаписьЖурналаРегистрации(НСтр("ru = 'АСУСО. Обмен данными с веб-сервисом AsusoExchange'"),
			УровеньЖурналаРегистрации.Ошибка, , ,
			НСтр("ru = 'Сообщение не отправлено. Возможно проблемы с интернет-соединением, или нет доступа к серверу разработчика'"));
			
			ЗаписьСообщения.Статус = Перечисления.СтатусыСообщенийВТехническуюПоддержку.ОшибкаОтправки;
			ЗаписьСообщения.Записать();

			ЕстьОшибки = Истина;
		КонецЕсли;

	КонецЦикла;
	
	Возврат НЕ ЕстьОшибки;
	
КонецФункции

Процедура ОтправитьНедоставленныеСообщения() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("", );
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СообщенияВТехническуюПоддержку.Идентификатор,
	|	СообщенияВТехническуюПоддержку.Отправитель
	|ИЗ
	|	РегистрСведений.СообщенияВТехническуюПоддержку КАК СообщенияВТехническуюПоддержку
	|ГДЕ
	|	СообщенияВТехническуюПоддержку.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСообщенийВТехническуюПоддержку.ОшибкаОтправки)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Соответствие = Новый Соответствие;
	 
	Пока Выборка.Следующий() Цикл
		Соответствие.Вставить(Выборка.Идентификатор, Выборка.Отправитель);
	КонецЦикла;
	
	Если Соответствие.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СоответствиеСообщений", Соответствие);
	
	РегистрыСведений.СообщенияВТехническуюПоддержку.ОтправитьСообщенияАСУСО(СтруктураПараметров);
	
КонецПроцедуры

Процедура ОтправитьОтветНаВебСервер(РегистрационныйНомер) Экспорт
	
	ЗаписьЖурналаРегистрации(НСтр("ru = 'АСУСО. Обмен данными с веб-сервисом AsusoExchange'"),
	УровеньЖурналаРегистрации.Информация,,,НСтр("ru = 'Отправляем подтверждение о получении данных'"));

    Сервис = ПолучитьСервисAsusoExchange();
	
	Попытка
		НомерСообщения = Сервис.ОтчетОЗагрузке(РегистрационныйНомер, СтрокаСоединенияИнформационнойБазы());
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'АСУСО. Обмен данными с веб-сервисом AsusoExchange'"),УровеньЖурналаРегистрации.Ошибка,,,ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

Функция ОтправитьСведенияОбУстановкеРелиза(ПараметрыВыполнения, АдресХранилища = "") Экспорт
	
	РегистрационныйНомер 	= ПолучениеРегНомераКлиента();
	СтрокаСоединенияИБ 		= СтрокаСоединенияИнформационнойБазы();
	ВерсияКонфигурации 		= Метаданные.Версия;
	
	Попытка
	    Сервис = ПолучитьСервисAsusoExchange();
		ДанныеЗаполнены = Сервис.ЗаполнитьДатуУстановкиРелиза(РегистрационныйНомер, ВерсияКонфигурации, СтрокаСоединенияИБ);
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'АСУСО. Обмен данными с веб-сервисом AsusoExchange'"),
		УровеньЖурналаРегистрации.Ошибка, , ,
		НСтр("ru = 'Веб-сервис недоступен. Возможно проблемы с интернет-соединением, или нет доступа к серверу разработчика'"));

		Возврат Ложь;
	КонецПопытки;

	Если ДанныеЗаполнены = "true" Тогда
		ЗаписьЖурналаРегистрации(НСтр("ru = 'АСУСО. Обмен данными с веб-сервисом AsusoExchange'"),
		УровеньЖурналаРегистрации.Информация, , ,
		НСтр("ru = 'Отправлена информация об установке релиза.'"));

		Возврат Истина;
	Иначе
		ЗаписьЖурналаРегистрации(НСтр("ru = 'АСУСО. Обмен данными с веб-сервисом AsusoExchange'"),
		УровеньЖурналаРегистрации.Ошибка, , ,
		НСтр("ru = 'Информация об установке релиза не отправлена. Возможно проблемы с интернет-соединением, или нет доступа к серверу разработчика'"));
		
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Процедура ОтправитьКомментарийАСУСО(XMLКомментарий) Экспорт
	
    Сервис = ПолучитьСервисAsusoExchange();

	ДанныеАСУСО = Сервис.ДобавитьКомментарий(XMLКомментарий);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьСервисAsusoExchange() Экспорт
	
	СтруктураПараметровПодключения = РегистрыСведений.СообщенияВТехническуюПоддержку.ПолучитьПараметрыПодключенияКВебСервису();
	Адрес	= СтруктураПараметровПодключения.Адрес;
	Логин	= СтруктураПараметровПодключения.Логин;
	Пароль	= СтруктураПараметровПодключения.Пароль;
		
	Определение = Новый WSОпределения(Адрес,Логин,Пароль);
	
	Сервис = Новый WSПрокси(Определение,"http://www.progtb.ru/ws/asusodata","AsusoExchange","AsusoExchangeSoap");
	Сервис.Пользователь = Логин;
	Сервис.Пароль = Пароль;
	
	Возврат Сервис;
	
КонецФункции

Процедура ПриСменеРелиза() Экспорт
	
	Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		РегистрыСведений.СообщенияВТехническуюПоддержку.ОтправитьСведенияОбУстановкеРелиза();
	Иначе
		ДлительныеОперации.ЗапуститьВыполнениеВФоне(
			Новый УникальныйИдентификатор, 
			"РегистрыСведений.СообщенияВТехническуюПоддержку.ОтправитьСведенияОбУстановкеРелиза", 
			Неопределено, 
			"Отправка в техподдержку сведений об установке релиза");  
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьАдресХранилищаCaptureScreen() Экспорт
	ДвоичныеДанные = ПолучитьОбщийМакет("CaptureScreen");
	Возврат ПоместитьВоВременноеХранилище(ДвоичныеДанные);
КонецФункции

Функция ПолучитьПараметрыПодключенияКВебСервису() Экспорт
	ТаблицаДанных = Константы.ПараметрыОбращенияВОтделТехническойПоддержки.Получить().Получить();
	
	СтрокаПараметры	= ТаблицаДанных.Найти("ПараметрыПодключенияКСервисуАСУСО", "ИмяРаздела");
	Если СтрокаПараметры = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Параметры отправки электронного сообщения не определены. Отправка невозможна.'"));
		Возврат Новый Структура("ИмяПолучателя, ИмяОтправителя", "", "");
	КонецЕсли;
	
	СтруктураПараметры 	= СтрокаПараметры.ДанныеРаздела;
	
	Адрес	= СтруктураПараметры["ПараметрыПодключенияКСервисуАСУСО_Адрес"];
	Логин	= СтруктураПараметры["ПараметрыПодключенияКСервисуАСУСО_Логин"];
	Пароль	= СтруктураПараметры["ПараметрыПодключенияКСервисуАСУСО_Пароль"];
	
	Возврат Новый Структура("Адрес, Логин, Пароль", Адрес, Логин, Пароль);
	
КонецФункции

Функция ПолучитьШаблонТаблицыКомментариев() Экспорт
	ТаблицаКомментариев = Новый ТаблицаЗначений;
	ТаблицаКомментариев.Колонки.Добавить("АвторТип"				, ОбщегоНазначения.ОписаниеТипаСтрока(50));
	ТаблицаКомментариев.Колонки.Добавить("АвторИдентификатор"	, ОбщегоНазначения.ОписаниеТипаСтрока(40));
	ТаблицаКомментариев.Колонки.Добавить("АвторИмя"				, ОбщегоНазначения.ОписаниеТипаСтрока(100));
	ТаблицаКомментариев.Колонки.Добавить("АвторПолноеИмя"		, ОбщегоНазначения.ОписаниеТипаСтрока(150));
	ТаблицаКомментариев.Колонки.Добавить("Код"					, ОбщегоНазначения.ОписаниеТипаЧисло(12,0));
	ТаблицаКомментариев.Колонки.Добавить("Идентификатор"		, ОбщегоНазначения.ОписаниеТипаСтрока(40));
	ТаблицаКомментариев.Колонки.Добавить("Период"				, ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ТаблицаКомментариев.Колонки.Добавить("Текст"				, ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаКомментариев.Колонки.Добавить("РодительИдентификатор", ОбщегоНазначения.ОписаниеТипаСтрока(40));
	ТаблицаКомментариев.Колонки.Добавить("РодительКод"			, ОбщегоНазначения.ОписаниеТипаЧисло(12,0));
	ТаблицаКомментариев.Колонки.Добавить("Рейтинг"				, ОбщегоНазначения.ОписаниеТипаЧисло(2,0));
	
	Возврат ТаблицаКомментариев;
КонецФункции

Функция ПодготовитьДанныеДляОтправкиВФорматеXML(ЗаписьРегистра) Экспорт
	// 08.10.2015, Белопухов А.Н., п.3388, НАЧАЛО
	// реализована полностью
	
	ПространствоИмен = Метаданные.ПакетыXDTO.wsПакетСообщениеАСУСО_1_1.ПространствоИмен;
	
	Отправитель = ЗаписьРегистра.Отправитель;
	
	ФабрикаСообщение	= ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "Сообщение"));
	ФабрикаИнформация	= ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "Информация"));
	ФабрикаПользователь	= ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "Пользователь"));
	ФабрикаФайлы		= ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "Файлы"));
	ФабрикаВложения		= ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "Вложения"));
	ФабрикаКонтакты 	= ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "Контакты"));	

	ФабрикаОбъекты		= ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "Объекты"));
	// 07.11.2011, Анисков А.А., п.1672, НАЧАЛО
	ФабрикаКомментарии	= ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "Комментарии"));
	// 07.11.2011, Анисков А.А., п.1672, КОНЕЦ
	
	// Общая информация
	ЗаполнитьПакетИнформации(ФабрикаИнформация);
	
	// Пользователь
	ФабрикаПользователь.Идентификатор				= Строка(Отправитель.УникальныйИдентификатор());
	ФабрикаПользователь.ИдентификаторПользователяИБ = Строка(Отправитель.ИдентификаторПользователяИБ);
	ФабрикаПользователь.Имя							= Отправитель.Код;
	ФабрикаПользователь.ПолноеИмя					= Отправитель.Наименование;
	ФабрикаПользователь.email						= "";
	ФабрикаПользователь.Телефон						= "";
	ФабрикаПользователь.Тип 						= "КонтактноеЛицо";

	//Получаем контактные данные пользователя
	
	ЗаполнитьКонтактныеДанныеПользователя(ФабрикаКонтакты, ПространствоИмен, Отправитель);
	
	ФабрикаПользователь.Контакты = ФабрикаКонтакты;
	
	// Файлы
	МассивФайлов	= ЗаписьРегистра.Файлы.Получить();
	Если МассивФайлов <> Неопределено Тогда
		Для Каждого СтруктураФайла Из МассивФайлов Цикл
			Если СтруктураФайла.Свойство("ИдентификаторФайла") Тогда
				ИдентификаторФайла = ?(ЗначениеЗаполнено(СтруктураФайла.ИдентификаторФайла),СтруктураФайла.ИдентификаторФайла,Строка(Новый УникальныйИдентификатор));
			КонецЕсли;
			// Файл
			ФабрикаФайл = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "Файл"));
			ФабрикаФайл.Идентификатор	= ИдентификаторФайла;
			ФабрикаФайл.ИмяФайла		= СтруктураФайла.Имя;
			ФабрикаФайл.Расширение		= СтруктураФайла.Расширение;
			ФабрикаФайл.Размер			= СтруктураФайла.Размер;

			// Вложение - тоже что и Файлы, только с данными
			ФабрикаВложение = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "Вложение"));
			ФабрикаВложение.Идентификатор	= ИдентификаторФайла;
			ФабрикаВложение.ИмяФайла		= СтруктураФайла.ПолноеИмя;
			ФабрикаВложение.Расширение		= СтруктураФайла.Расширение;
			ФабрикаВложение.Размер 			= СтруктураФайла.Размер;
	        ФабрикаВложение.ДвоичныеДанные  = СтруктураФайла.ДвоичныеДанные;
			
			ФабрикаВложения.Вложение.Добавить(ФабрикаВложение);
			
			ФабрикаФайлы.Файл.Добавить(ФабрикаФайл);
		КонецЦикла;
	КонецЕсли;
	
	// Сообщение
	ФабрикаСообщение.РодительИдентификатор	= ЗаписьРегистра.СвязанноеСообщение;
	ФабрикаСообщение.Идентификатор			= ЗаписьРегистра.Идентификатор;
	ФабрикаСообщение.Пользователь			= ФабрикаПользователь;
	ФабрикаСообщение.Важность				= ЗаписьРегистра.Важность;
	ФабрикаСообщение.Вид					= ПолучитьВидПочтовогоСообщения(ЗаписьРегистра.Вид);
	ФабрикаСообщение.ДатаОтправки			= ТекущаяДатаСеанса();
	ФабрикаСообщение.ДатаСогласования		= ЗаписьРегистра.ДатаСогласования;
	ФабрикаСообщение.ДатаСоздания			= ЗаписьРегистра.ДатаСоздания;
	ФабрикаСообщение.Согласовано			= ЗаписьРегистра.Согласовано;
	ФабрикаСообщение.Текст					= ЗаписьРегистра.Текст;
	ФабрикаСообщение.Тема					= ЗаписьРегистра.Тема;
	ФабрикаСообщение.Файлы					= ФабрикаФайлы;
	ФабрикаСообщение.Информация				= ФабрикаИнформация;
	ФабрикаСообщение.Объекты				= ФабрикаОбъекты;
	ФабрикаСообщение.Комментарии			= ФабрикаКомментарии;

	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	
	ЗаписьXML = Новый ЗаписьXML;	
	ЗаписьXML.ОткрытьФайл(ИмяВременногоФайла);
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ФабрикаСообщение, "Сообщение", ПространствоИмен);
	
    ЗаписьXML = Неопределено;

	MessageDataXML = Новый ДвоичныеДанные(ИмяВременногоФайла);
    РазмерMessageDataXML = Строка(MessageDataXML.Размер()) + " Кб";
	ЗаписьXML = Новый ЗаписьXML;	
	ЗаписьXML.УстановитьСтроку();
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ФабрикаСообщение, "Сообщение", ПространствоИмен);
	XMLСообщение = ЗаписьXML.Закрыть();
	
    ЗаписьXML = Неопределено;

	// Вложение - добавим MessageData.xml
	ИдентификаторФайла = Строка(Новый УникальныйИдентификатор);
	
	ФабрикаВложение = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "Вложение"));
	ФабрикаВложение.Идентификатор	= ИдентификаторФайла;
	ФабрикаВложение.ИмяФайла		= "MessageData.xml";
	ФабрикаВложение.Расширение		= "xml";
	ФабрикаВложение.Размер			= РазмерMessageDataXML;
	ФабрикаВложение.ДвоичныеДанные  = MessageDataXML;
	
	ФабрикаВложения.Вложение.Добавить(ФабрикаВложение);

	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	
	ЗаписьXML = Новый ЗаписьXML;	
	ЗаписьXML.УстановитьСтроку();
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML,ФабрикаВложения,"Вложение",ПространствоИмен);
	XMLВложения = ЗаписьXML.Закрыть();
	
	ЗаписьXML = Неопределено;
	
	Возврат Новый Структура("Сообщение, Вложения", XMLСообщение, XMLВложения);
	
КонецФункции

Функция ПолучениеРегНомераКлиента() Экспорт
	
	СистемИнфо	= Новый СистемнаяИнформация;
	
	ТаблицаДанных = Константы.ПараметрыОбращенияВОтделТехническойПоддержки.Получить().Получить();
	
	СтрокаДанные	= ТаблицаДанных.Найти("ОсновныеДанные", "ИмяРаздела");
	Если СтрокаДанные = Неопределено Тогда
		МассивРегНомер = Новый Массив;
		МассивРегНомер.Добавить("Регистрационный номер:");
		МассивРегНомер.Добавить(Строка(СистемИнфо.ИдентификаторКлиента));
		
		СтруктураДанных = Новый Структура("ОсновныеДанные_РегистрационныйНомерПрограммы", МассивРегНомер);
	Иначе
		СтруктураДанных = СтрокаДанные.ДанныеРаздела;
	КонецЕсли;
	
	РегистрационныйНомер = СтруктураДанных.ОсновныеДанные_РегистрационныйНомерПрограммы;
	
	Возврат РегистрационныйНомер;
	
КонецФункции

Функция ЗаполнитьПакетИнформации(ФабрикаИнформация)
	СистемИнфо	= Новый СистемнаяИнформация;
	
	ТаблицаДанных = Константы.ПараметрыОбращенияВОтделТехническойПоддержки.Получить().Получить();
	
	СтрокаДанные	= ТаблицаДанных.Найти("ОсновныеДанные", "ИмяРаздела");
	Если СтрокаДанные = Неопределено Тогда
		МассивРегНомер = Новый Массив;
		МассивРегНомер.Добавить("Регистрационный номер:");
		МассивРегНомер.Добавить(Строка(СистемИнфо.ИдентификаторКлиента));
		
		СтруктураДанных = Новый Структура("ОсновныеДанные_РегистрационныйНомерПрограммы", МассивРегНомер);
	Иначе
		СтруктураДанных = СтрокаДанные.ДанныеРаздела;
	КонецЕсли;
	
	ФабрикаИнформация.Платформа				= СистемИнфо.ВерсияПриложения;
	ФабрикаИнформация.Конфигурация			= Метаданные.Имя;
	ФабрикаИнформация.Версия				= Метаданные.Версия;
	ФабрикаИнформация.РегНомер				= СтруктураДанных.ОсновныеДанные_РегистрационныйНомерПрограммы;
	ФабрикаИнформация.ОперационнаяСистема	= СистемИнфо.ВерсияОС;
КонецФункции

Функция ПолучитьВидПочтовогоСообщения(Вид)
	Если Вид = Перечисления.ВидыСообщенийВТехническуюПоддержку.Ошибка Тогда
		Возврат "Ошибка";
	ИначеЕсли Вид = Перечисления.ВидыСообщенийВТехническуюПоддержку.Доработка Тогда
		Возврат "Доработка"; 
	ИначеЕсли Вид = Перечисления.ВидыСообщенийВТехническуюПоддержку.Консультация Тогда
		Возврат "Консультация"; 
	Иначе
		Возврат Строка(Вид);
	КонецЕсли;
КонецФункции

Функция ПолучитьСписокПунктовОбъектаНаСервере(ПолноеИмяОбъекта) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СообщенияВТехническуюПоддержку.Идентификатор,
	|	СообщенияВТехническуюПоддержку.ОписаниеИзменений,
	|	СообщенияВТехническуюПоддержку.Тема,
	|	СообщенияВТехническуюПоддержку.КодРазработчика,
	|	СообщенияВТехническуюПоддержку.Объекты,
	|	СообщенияВТехническуюПоддержку.НомерРелиза,
	|	СообщенияВТехническуюПоддержку.ДатаВыполнения,
	|	СообщенияВТехническуюПоддержку.ЗаданиеНаРазработку,
	|	СообщенияВТехническуюПоддержку.Отправитель
	|ИЗ
	|	РегистрСведений.СообщенияВТехническуюПоддержку КАК СообщенияВТехническуюПоддержку
	|ГДЕ
	|	СообщенияВТехническуюПоддержку.Идентификатор В
	|			(ВЫБРАТЬ
	|				ИсторияИзмененияОбъектов.ИдентификаторСообщения
	|			ИЗ
	|				РегистрСведений.ИсторияИзмененияОбъектов КАК ИсторияИзмененияОбъектов
	|			ГДЕ
	|				ИсторияИзмененияОбъектов.ПолноеИмяОбъекта = &ПолноеИмяОбъекта)";
	Запрос.УстановитьПараметр("ПолноеИмяОбъекта",ПолноеИмяОбъекта);
	
	Возврат Запрос.Выполнить().выгрузить().ВыгрузитьКолонку("Идентификатор");
	
КонецФункции

// Функция проверяет заполнения обязательных параметров для отправки сообщения
//  в отдел технической поддержки.
//
// Параметры
//  ТаблицаДанных - Таблица значений
//
// Возвращаемое значение:
//   Булево - результат корректности проверки
//
Функция ПроверитьСтруктуруЗаполненияПараметровДляОтправкиСообщенияВОтделТехническойПоддержки(ПубликоватьСообщения = Истина) Экспорт
	
	ТаблицаДанных = Константы.ПараметрыОбращенияВОтделТехническойПоддержки.Получить().Получить();

	Если ТипЗнч(ТаблицаДанных) <> Тип("ТаблицаЗначений") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗначениеПроверки = Истина;
	
	СписокИменОбязательныхРеквизитов = Новый СписокЗначений;
	СписокИменОбязательныхРеквизитов.Добавить("Владелец_Организация");
	СписокИменОбязательныхРеквизитов.Добавить("ОсновныеДанные_РегистрационныйНомерПрограммы");
	СписокИменОбязательныхРеквизитов.Добавить("ПараметрыПодключенияКСервисуАСУСО_Адрес");
	СписокИменОбязательныхРеквизитов.Добавить("ПараметрыПодключенияКСервисуАСУСО_Логин");
	СписокИменОбязательныхРеквизитов.Добавить("ПараметрыПодключенияКСервисуАСУСО_Пароль");
	
	Для каждого СтрокаРаздела Из ТаблицаДанных Цикл
		Для каждого ЭлементЗначения Из СтрокаРаздела.ДанныеРаздела Цикл
			Если СписокИменОбязательныхРеквизитов.НайтиПоЗначению(ЭлементЗначения.Ключ) <> Неопределено И НЕ ЗначениеЗаполнено(ЭлементЗначения.Значение) Тогда
				Если ПубликоватьСообщения Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Параметры отправки электронного сообщения не определены. Обратитесь к администратору.'"));
				КонецЕсли; 
				ЗначениеПроверки = Ложь;
				Возврат ЗначениеПроверки;
			КонецЕсли; 
		КонецЦикла; 
	КонецЦикла;
	
	Возврат ЗначениеПроверки;

КонецФункции // ПроверитьСтруктуруЗаполненияПараметровДляОтправкиСообщенияВОтделТехническойПоддержки()

Процедура ЗаполнитьКонтактныеДанныеПользователя(ФабрикаКонтакты, ПространствоИмен, Отправитель)
	ПользователиИмеютКИ = (Метаданные.Справочники["Пользователи"].ТабличныеЧасти.Найти("КонтактнаяИнформация") <> Неопределено);
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") И ПользователиИмеютКИ Тогда
		Массив = Новый Массив();
		Массив.Добавить(Отправитель);
		
		ОМ_УправлениеКонтактнойИнформацией = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформацией");
		ТаблицаКонтактов = ОМ_УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(Массив);
		Если ТаблицаКонтактов.Количество() > 0 Тогда
			Для Каждого Строка Из ТаблицаКонтактов Цикл
				ФабрикаКонтакт = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "Контакт"));
				ФабрикаКонтакт.ВладелецКонтактнойИнформации = "СправочникПользователи";
				ФабрикаКонтакт.ЗаписьКонтактнойИнформации	= Строка.ЗначенияПолей;
				ФабрикаКонтакты.Контакт.Добавить(ФабрикаКонтакт);
			КонецЦикла; 
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти
