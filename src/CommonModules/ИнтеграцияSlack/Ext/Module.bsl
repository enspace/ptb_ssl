
#Область ПрограммныйИнтерфейс

// Добавляет запись в журнал регистрации действий пользователя с общим именем события
// Параметры аналогичны параметрам команды ЗаписьЖурналаРегистрации
// 
Процедура ДобавитьЗаписьВЖурналРегистрации(знач Уровень, знач Метаданные = Неопределено, знач Данные = Неопределено, знач Текст) Экспорт	
	
	Если НЕ ТипЗнч(Уровень) = Тип("УровеньЖурналаРегистрации") Тогда
		Уровень = УровеньЖурналаРегистрации.Информация;
	КонецЕсли;
		
	ЗаписьЖурналаРегистрации(НСтр("ru='Интеграция Slack'"), Уровень, Метаданные, Данные, Текст);
		
КонецПроцедуры

// Выполняет разбор тела запроса команды и возвращает Структуру с данными команды
//
// Параметры:
//	ТелоКоманды - Строка
//		Подробнее см. https://api.slack.com/interactivity/slash-commands#app_command_handling
//
// Возвращаемое значение:
//   СтруктураЗапроса
//		token			- Строка - проверочный токен. Устаревшая функция
//		team_id			- Строка - идентификатор команды
//		team_domain		- Строка - имя команды
//		enterprise_id	- Строка - идентификатор компании
//		enterprise_name	- Строка - имя компании
//		channel_id		- Строка - идентификатор канала
//		channel_name	- Строка - имя канала
//		user_id			- Строка - идентификатор пользователя набравшего команду
//		user_name		- Строка - имя пользователя набравшего команду
//		command			- Строка - имя команды
//		text			- Строка - часть команды после указания имени
//		response_url	- Строка - временный адрес для создания ответа на сообщение
//		trigger_id		- Строка - идентификатор
// 
Функция РазобратьТелоКоманды(знач ТелоКоманды) Экспорт
	СтруктураЗапроса = Новый Структура;
	
	МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТелоКоманды, "&", Истина, Истина);
	Для Каждого Подстрока Из МассивПодстрок Цикл
		ВложенныеСтроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Подстрока, "=");
		
		Если ВложенныеСтроки.Количество() > 1 Тогда
			ЗначениеПараметра = РаскодироватьСтроку(ВложенныеСтроки[1], СпособКодированияСтроки.КодировкаURL);
			СтруктураЗапроса.Вставить(ВложенныеСтроки[0], ЗначениеПараметра);
		ИначеЕсли ВложенныеСтроки.Количество() = 1 Тогда
			СтруктураЗапроса.Вставить(ВложенныеСтроки[0], "");
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураЗапроса; 
КонецФункции

// Возвращает объект HTTPСервисОтвет с кодом 200 и текстом ошибки
//
// Параметры:
//	ТекстОшибки		- Строка
//	ТекстПодсказки	- Строка
//
// Возвращаемое значение:
//   HTTPСервисОтвет
// 
Функция ОтветОшибка(знач ТекстОшибки, знач ТекстПодсказки = "") Экспорт
	ПолныйТекст = ИнтеграцияSlackКлиентСервер.ПолучитьТекстОшибки(ТекстОшибки, ТекстПодсказки);
	
	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("response_type", "ephemeral");
	СтруктураОтвета.Вставить("text", ПолныйТекст);
	
	ТелоОтвета = ИнтернетСервисы.ПолучитьСтрокуJSON(СтруктураОтвета);
	
	Возврат ИнтернетСервисы.ПолучитьОтвет200(, ТелоОтвета);
КонецФункции

// Выполняет POST запрос по указанному адресу с переданными данными
// Используется для отправки запросов в Slack
//
// Параметры:
//	АдресСервера	- Строка
//	СтруктураТело	- Структура
//
// Возвращаемое значение:
//   Булево
// 
Функция ОтправитьСообщение(знач АдресСервера, знач СтруктураТело) Экспорт
	СтруктураАдреса = ОбщегоНазначенияКлиентСервер.СтруктураURI(АдресСервера);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, СтруктураТело);
	ТелоЗапроса = ЗаписьJSON.Закрыть();
	
	// Подготовка параметров выполнения запроса к Google
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	
	HTTPЗапрос = Новый HTTPЗапрос;
	HTTPЗапрос.Заголовки	= Заголовки;
	HTTPЗапрос.АдресРесурса	= СтруктураАдреса.ПутьНаСервере;
	HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса);
	
	СоединениеHTTP = Новый HTTPСоединение(СтруктураАдреса.ИмяСервера,,,,,, Новый ЗащищенноеСоединениеOpenSSL);
	ОтветHTTP = СоединениеHTTP.ОтправитьДляОбработки(HTTPЗапрос);
	Если ОтветHTTP.КодСостояния <> 200 Тогда
		ТелоОтвета = ОтветHTTP.ПолучитьТелоКакСтроку();
		ИнтеграцияSlack.ДобавитьЗаписьВЖурналРегистрации(УровеньЖурналаРегистрации.Информация,,,
			СтрШаблон(НСтр("ru='Отправка сообщения по адресу ""%1"" завершилось ошибкой: %2 (%3)'"),
				АдресСервера,
				ТелоОтвета,
				ТелоЗапроса));
		Возврат Ложь;
	Иначе 
		Возврат Истина;
	КонецЕсли;
КонецФункции

// Возвращает соответствие из данных тела сообщения ответа
//
// Параметры:
//	Параметр1 - ТипВид - описание параметра
//		* описание колонок, ключей
//	Параметр2 - ТипВид - Описание параметра
//
// Возвращаемое значение:
//   ТипВид - описание возвращаемого значения
// 
Функция СоответствиеИзОтвета(знач ОтветHTTP) Экспорт
	ТелоЗапроса = ОтветHTTP.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ТелоЗапроса);
	
	Возврат ПрочитатьJSON(ЧтениеJSON, Истина);
КонецФункции

#КонецОбласти

#Область ПрограммныйИнтерфейс_SlackConnector

Функция ОбработатьSlashКоманду(знач Запрос) Экспорт
	ТелоЗапроса		= Запрос.ПолучитьТелоКакСтроку();
	ДанныеКоманды	= РазобратьТелоКоманды(ТелоЗапроса);
	
	ИмяКоманды		= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеКоманды, "command", "");
	ТекстКоманды	= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеКоманды, "text", "");
	
	Если ПустаяСтрока(ИмяКоманды) Тогда
		ТекстОшибки		= НСтр("ru='команда не определена'");
		ТекстПодсказки	= СтрШаблон(НСтр("ru='Возможно есть подсказка `/%1 help`.'"), ИмяКоманды);
		
		Ответ = ОтветОшибка(ТекстОшибки, ТекстПодсказки);
	ИначеЕсли ИнтеграцияSlackСлужебный.ЭтоКоманда_User(ИмяКоманды) Тогда
		Ответ = ИнтеграцияSlackСлужебный.ВыполнитьКоманду_User(ИмяКоманды, ДанныеКоманды);
	Иначе
		Ответ = ВыполнитьОбработкуКомандыВПопытке(ИмяКоманды, ДанныеКоманды);
	КонецЕсли;
	
	Если ТипЗнч(Ответ) = Тип("HTTPСервисОтвет") Тогда
		Возврат Ответ;
	Иначе 
		Возврат ОтветОшибка(НСтр("ru='команда не определена'"), НСтр("ru='Проверьте синтаксис команды.'"));
	КонецЕсли;
КонецФункции

Функция ОбработатьComponentsКоманду(знач Запрос) Экспорт
	ТелоЗапроса		= Запрос.ПолучитьТелоКакСтроку();
	ДанныеКоманды	= РазобратьТелоКоманды(ТелоЗапроса);
	ТелоКомпонента	= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеКоманды, "payload", "");

	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ТелоКомпонента);
	
	ДанныеКомпонента = ПрочитатьJSON(ЧтениеJSON, Ложь);
	ЧтениеJSON = Неопределено;
	
	Если НЕ ТипЗнч(ДанныеКомпонента) = Тип("Структура") Тогда
		Возврат ОтветОшибка(НСтр("ru='при обработке команды произошла ошибка'"), НСтр("ru='Пожалуйста, обратитесь к разработчику.'"));  
	КонецЕсли;
	
	РезультатОбработки = ВыполнитьОбработкуКомпонентаВПопытке(ДанныеКомпонента);
	Если РезультатОбработки = Истина Тогда
		Возврат ИнтернетСервисы.ПолучитьОтвет200();
	ИначеЕсли РезультатОбработки = Ложь Тогда
		Возврат ИнтернетСервисы.ПолучитьОтвет500(НСтр("ru='Ошибка обработки команды'"));
	Иначе
		Возврат ИнтернетСервисы.ПолучитьОтвет500(НСтр("ru='Компонент не определен'"));
	КонецЕсли;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ВыполнитьОбработкуКомандыВПопытке(знач ИмяКоманды, знач ДанныеКоманды)
	Попытка
		Ответ = ИнтеграцияSlackПереопределяемый.ВыполнитьОбработкуКоманды(ИмяКоманды, ДанныеКоманды);
	Исключение
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Ответ = ОтветОшибка(НСтр("ru='внутренняя ошибка'"), ТекстОшибки);
	КонецПопытки;
	
	Возврат Ответ;
КонецФункции

Функция ВыполнитьОбработкуКомпонентаВПопытке(знач ДанныеКомпонента)
	Попытка
		Ответ = ИнтеграцияSlackПереопределяемый.ВыполнитьОбработкуКомпонента(ДанныеКомпонента);
	Исключение
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Ответ = ОтветОшибка(НСтр("ru='внутренняя ошибка'"), ТекстОшибки);
	КонецПопытки;
	
	Возврат Ответ;
КонецФункции

#КонецОбласти
 
