
#Область ПрограммныйИнтерфейс

Функция ИспользоватьИнтернетСервисы() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьИнтернетСервисы");
	
КонецФункции

#КонецОбласти

#Область ПрограммныйИнтерфейс_JSON

Функция ПолучитьСтрокуJSON(ОбъектДанных) Экспорт
	Результат = "";
	
	Если ИнтернетСервисыПовтИсп.ИспользоватьЗаписьJSON() Тогда
		Попытка
			ЗаписьJSON = Новый ЗаписьJSON;
			ЗаписьJSON.УстановитьСтроку();
			ЗаписатьJSON(ЗаписьJSON, ОбъектДанных,, "СериализоватьЗначениеJSON", ИнтернетСервисы);
			Результат = ЗаписьJSON.Закрыть();
		Исключение
			СтрОшибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрОшибка);
			Результат = JSON.Записать(ОбъектДанных); 
		КонецПопытки;
	Иначе 
		Результат = JSON.Записать(ОбъектДанных); 
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция СериализоватьЗначениеJSON(Имя, Значение, ДопПараметры, Отказ) Экспорт
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	СериализаторXDTO.ЗаписатьJSON(ЗаписьJSON, Значение);
	Возврат ЗаписьJSON.Закрыть();
КонецФункции

#КонецОбласти 

#Область HTTPОтветы

Процедура ДополнитьОтветПараметрамиCORS(Ответ)
	Ответ.Заголовки.Вставить("Access-Control-Allow-Origin"		, "http://localhost:63342"); //http://192.168.1.6
	Ответ.Заголовки.Вставить("Access-Control-Allow-Methods"		, "GET, PUT, PATCH, POST, DELETE, OPTIONS");
	Ответ.Заголовки.Вставить("Access-Control-Allow-Credentials"	, "true");
	Ответ.Заголовки.Вставить("Access-Control-Allow-Headers"		, "X-Requested-With, origin, content-type, authorization, accept, set-cookie");
КонецПроцедуры

// 200 Success - запрос выполнен успешно
Функция ПолучитьОтвет200(знач Заголовки = Неопределено, знач Тело = "", знач ТипТела = 0, знач Параметры = Неопределено) Экспорт
	Если ТипЗнч(Заголовки) <> Тип("Соответствие") Тогда
		Заголовки = Новый Соответствие;
		Если НЕ ПустаяСтрока(Тело) Тогда
			Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(Параметры) <> Тип("Структура") Тогда
		Параметры = Новый Структура;
	КонецЕсли;
	
	Если ТипТела = 0 И НЕ Параметры.Свойство("Кодировка") Тогда
		Параметры.Вставить("Кодировка", КодировкаТекста.UTF8);
	КонецЕсли;
	
	Ответ = Новый HTTPСервисОтвет(200,, Заголовки);
	
	Если ТипТела = 0 Тогда
		Ответ.УстановитьТелоИзСтроки(Тело, Параметры.Кодировка);
	ИначеЕсли ТипТела = 1 Тогда
		Ответ.УстановитьТелоИзДвоичныхДанных(Тело);
	ИначеЕсли ТипТела = 2 Тогда
		Ответ.УстановитьИмяФайлаТела(Тело);
	КонецЕсли;
	
	ДополнитьОтветПараметрамиCORS(Ответ);
	Возврат Ответ;
КонецФункции

// 400 Bad Request — сервер обнаружил в запросе клиента синтаксическую ошибку.
Функция ПолучитьОтвет400(ТекстОшибки, Отказ = Ложь) Экспорт
	Отказ = Истина;
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
	
	СтруктураОшибки = ИнтернетСервисыКлиентСервер.СтруктураError(ТекстОшибки);
	СтруктураОшибки.Вставить("code", 400);
	
	Ответ = Новый HTTPСервисОтвет(400,, Заголовки);
	Ответ.УстановитьТелоИзСтроки(ИнтернетСервисы.ПолучитьСтрокуJSON(СтруктураОшибки));
	
	ДополнитьОтветПараметрамиCORS(Ответ);
	Возврат Ответ;
КонецФункции

// 401 Unauthorized — для доступа к запрашиваемому ресурсу требуется аутентификация.
Функция ПолучитьОтвет401(ТекстОшибки, Отказ = Ложь) Экспорт
	Отказ = Истина;
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
	
	СтруктураОшибки = ИнтернетСервисыКлиентСервер.СтруктураError(ТекстОшибки);
	СтруктураОшибки.Вставить("code", 401);
	
	Ответ = Новый HTTPСервисОтвет(401,, Заголовки);
	Ответ.УстановитьТелоИзСтроки(ИнтернетСервисы.ПолучитьСтрокуJSON(СтруктураОшибки));
	
	ДополнитьОтветПараметрамиCORS(Ответ);
	Возврат Ответ;
КонецФункции

// 403 Forbidden — сервер понял запрос, но он отказывается его выполнять из-за
// ограничений в доступе для клиента к указанному ресурсу. Если для доступа к ресурсу
// требуется аутентификация средствами HTTP, то следует возвращать ответ 401 или 407
// при использовании прокси. В любом случае клиенту следует сообщить причины отказа в
// обработке запроса.
Функция ПолучитьОтвет403(ТекстОшибки, Отказ = Ложь) Экспорт
	Отказ = Истина;
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
	
	СтруктураОшибки = ИнтернетСервисыКлиентСервер.СтруктураError(ТекстОшибки);
	СтруктураОшибки.Вставить("code", 403);
	
	Ответ = Новый HTTPСервисОтвет(403,, Заголовки);
	Ответ.УстановитьТелоИзСтроки(ИнтернетСервисы.ПолучитьСтрокуJSON(СтруктураОшибки));
	
	ДополнитьОтветПараметрамиCORS(Ответ);
	Возврат Ответ;
КонецФункции

// 404 Not Found — самая распространенная ошибка при пользовании Интернетом, основная
// причина — ошибка в написании адреса Web-страницы. Сервер понял запрос, но не нашёл
// соответствующего ресурса по указанному URI. Если серверу известно, что по этому адресу
// был документ, то ему желательно использовать код 410. Ответ 404 может использоваться
// вместо 403, если требуется тщательно скрыть от посторонних глаз определённые ресурсы.
Функция ПолучитьОтвет404(Отказ = Ложь) Экспорт
	Отказ = Истина;
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
	
	СтруктураОшибки = ИнтернетСервисыКлиентСервер.СтруктураError("");
	СтруктураОшибки.Вставить("code", 404);
	
	Ответ = Новый HTTPСервисОтвет(404,, Заголовки);
	Ответ.УстановитьТелоИзСтроки(ИнтернетСервисы.ПолучитьСтрокуJSON(СтруктураОшибки));
	
	ДополнитьОтветПараметрамиCORS(Ответ);
	Возврат Ответ;
КонецФункции

// 405 Method Not Allowed — указанный клиентом метод нельзя применить к текущему ресурсу.
// В ответе сервер должен указать доступные методы в заголовке Allow, разделив их запятой.
// Эту ошибку сервер должен возвращать, если метод ему известен, но он не применим именно
// к указанному в запросе ресурсу, если же указанный метод не применим на всём сервере,
// то клиенту нужно вернуть код 501 (Not Implemented).
Функция ПолучитьОтвет405(ДопустимыеМетоды, Отказ = Ложь) Экспорт
	Отказ = Истина;
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
	
	СтруктураОшибки = ИнтернетСервисыКлиентСервер.СтруктураError("");
	СтруктураОшибки.Вставить("code", 405);
	СтруктураОшибки.Вставить("allow", ДопустимыеМетоды);
	
	Ответ = Новый HTTPСервисОтвет(405,, Заголовки);
	Ответ.УстановитьТелоИзСтроки(ИнтернетСервисы.ПолучитьСтрокуJSON(СтруктураОшибки));
	
	ДополнитьОтветПараметрамиCORS(Ответ);
	Возврат Ответ;
КонецФункции

// 500 Internal Server Error — любая внутренняя ошибка сервера, которая не входит в
// рамки остальных ошибок класса.
Функция ПолучитьОтвет500(ТекстОшибки, Отказ = Ложь) Экспорт
	Отказ = Истина;
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
	
	СтруктураОшибки = ИнтернетСервисыКлиентСервер.СтруктураError(ТекстОшибки);
	СтруктураОшибки.Вставить("code", 500);
	
	Ответ = Новый HTTPСервисОтвет(500,, Заголовки);
	Ответ.УстановитьТелоИзСтроки(ИнтернетСервисы.ПолучитьСтрокуJSON(СтруктураОшибки));
	
	ДополнитьОтветПараметрамиCORS(Ответ);
	Возврат Ответ;
КонецФункции

// 501 Not Implemented — сервер не поддерживает возможностей, необходимых для обработки
// запроса. Типичный ответ для случаев, когда сервер не понимает указанный в запросе
// метод. Если же метод серверу известен, но он не применим к данному ресурсу, то
// нужно вернуть ответ 405.
Функция ПолучитьОтвет501(ТекстОшибки, Отказ = Ложь) Экспорт
	Отказ = Истина;
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
	
	СтруктураОшибки = ИнтернетСервисыКлиентСервер.СтруктураError(ТекстОшибки);
	СтруктураОшибки.Вставить("code", 501);
	
	Ответ = Новый HTTPСервисОтвет(501,, Заголовки);
	Ответ.УстановитьТелоИзСтроки(ИнтернетСервисы.ПолучитьСтрокуJSON(СтруктураОшибки));
	
	ДополнитьОтветПараметрамиCORS(Ответ);
	Возврат Ответ;
КонецФункции

#КонецОбласти 
