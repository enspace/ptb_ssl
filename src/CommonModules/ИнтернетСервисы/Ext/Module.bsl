
#Область ПрограммныйИнтерфейс

Функция ИспользоватьИнтернетСервисы() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьИнтернетСервисы");
	
КонецФункции

Функция ОтветИнтернетСервисыОтключены() Экспорт
	Возврат ПолучитьОтвет500(НСтр("ru='Интернет-сервисы отключены.'"));
КонецФункции

// Формирует объект HTTPСоединение согласно настройкам
//
// Параметры:
//	НастройкиОбмена - Структура - см. ПолучитьНастройкиОбменаКонфигурации
//	ПарольПользователя - Строка - значение пароля пользователя
//
// Возвращаемое значение:
//	HTTPСоединение
//
Функция ПолучитьHTTPСоединение(знач НастройкиОбмена, знач ПарольПользователя = Неопределено) Экспорт
	Если ПарольПользователя = Неопределено Тогда
		ПарольПользователя = НастройкиОбмена.Пароль;
	КонецЕсли;
	
	АдресURL = НастройкиОбмена.СтруктураАдреса;
	Если АдресURL.схема = "https" Тогда
		БезопасноеСоединение = Новый ЗащищенноеСоединениеOpenSSL;
	Иначе 
		БезопасноеСоединение = Неопределено;
	КонецЕсли;
	
	СоединениеHTTP = Новый HTTPСоединение(АдресURL.ИмяСервера,,
		НастройкиОбмена.Пользователь,
		ПарольПользователя,,,
		БезопасноеСоединение);
		
	Возврат СоединениеHTTP;
КонецФункции

#КонецОбласти

#Область JSON

Функция ПолучитьСтрокуJSON(знач ОбъектДанных) Экспорт
	Результат = "";
	
	Если ИнтернетСервисыПовтИсп.ИспользоватьЗаписьJSON() Тогда
		Попытка
			ЗаписьJSON = Новый ЗаписьJSON;
			ЗаписьJSON.УстановитьСтроку();
			ЗаписатьJSON(ЗаписьJSON, ОбъектДанных,, "СериализоватьЗначениеJSON", ИнтернетСервисы);
			Результат = ЗаписьJSON.Закрыть();
		Исключение
			СтрОшибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрОшибка);
			Результат = JSON.Записать(ОбъектДанных); 
		КонецПопытки;
	Иначе 
		Результат = JSON.Записать(ОбъектДанных); 
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция ЗначениеИзСтрокиJSON(знач СтрокаJSON) Экспорт
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(СтрокаJSON);
	Значение = ПрочитатьJSON(ЧтениеJSON);
	
	ЧтениеJSON = Неопределено;
	
	Возврат Значение;
КонецФункции

#КонецОбласти 

#Область ЛогированиеЗапросов

// Формирует структуру для записи в лог
//
// Параметры:
//	Запрос - HTTPСервисЗапрос
//
// Возвращаемое значение:
//   Структура
//		Начало		- Число
//		Метод		- Строка
//		Ресурс		- Строка
//		Параметры	- Строка
// 
Функция НачатьВыполнениеЗапроса(знач Запрос) Экспорт
	Структура = Новый Структура;
	Структура.Вставить("Начало"		, ТекущаяУниверсальнаяДатаВМиллисекундах());
	Структура.Вставить("Метод"		, Запрос.HTTPМетод);
	Структура.Вставить("Ресурс"		, Запрос.БазовыйURL + Запрос.ОтносительныйURL);
	Структура.Вставить("Параметры"	, Запрос.ПараметрыЗапроса);
	Возврат Структура;
КонецФункции

// Записывает данные в лог в фоновом режиме
//
// Параметры:
//	Начало		- Число
//	Метод		- Строка
//	Ресурс		- Строка
//	Параметры	- Строка
// 
Процедура ЗавершитьВыполнениеЗапроса(знач Структура) Экспорт
	Структура.Вставить("Конец", ТекущаяУниверсальнаяДатаВМиллисекундах());
	РегистрыСведений.ИсторияВыполненияHTTPЗапросов.ЗарегистрироватьСобытие(Структура);
КонецПроцедуры

// Выполняет запись в регистр сведений ИсторияВыполненияHTTPЗапросов
//
// Параметры:
//	Начало		- Число
//	Конец		- Число
//	Метод		- Строка
//	Ресурс		- Строка
//	Параметры	- Строка
// 
Процедура ДобавитьЗаписьИсторииИнтернетСервиса(СтруктураДанных) Экспорт
	ИмяРесурса = СтруктураДанных.Ресурс;
	Разделитель	= Найти(ИмяРесурса, "/hs/");
	Если Разделитель > 0 Тогда
		ИмяРесурса = Сред(ИмяРесурса, Разделитель + 4);
	КонецЕсли;
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("КлючСтроки"			, Строка(Новый УникальныйИдентификатор));
	ЗначенияЗаполнения.Вставить("Метод"					, СтруктураДанных.Метод);
	ЗначенияЗаполнения.Вставить("Ресурс"				, ИмяРесурса);
	ЗначенияЗаполнения.Вставить("Параметры"				, "");
	ЗначенияЗаполнения.Вставить("ВремяВыполнения"		, Формат(СтруктураДанных.Конец - СтруктураДанных.Начало, "ЧГ="));
	ЗначенияЗаполнения.Вставить("Пользователь"			, Пользователи.ТекущийПользователь());
	ЗначенияЗаполнения.Вставить("ИдентификаторСессии"	, "");
	ЗначенияЗаполнения.Вставить("ДатаОбращения"			, ТекущаяДатаСеанса());
	
	ДанныеПараметры = Неопределено;
	Если СтруктураДанных.Свойство("Параметры", ДанныеПараметры) Тогда
		Если ТипЗнч(ДанныеПараметры) = Тип("ФиксированноеСоответствие") Тогда
			Для Каждого КлючИЗначение Из ДанныеПараметры Цикл
				ЗначенияЗаполнения.Параметры = ЗначенияЗаполнения.Параметры + 
					?(ПустаяСтрока(ЗначенияЗаполнения.Параметры), "", "&") + 
					КлючИЗначение.Ключ + "=" + КлючИЗначение.Значение;
			КонецЦикла;
		ИначеЕсли ТипЗнч(ДанныеПараметры) = Тип("Строка") Тогда
			ЗначенияЗаполнения.Параметры = ДанныеПараметры;
		КонецЕсли;
	КонецЕсли;	
	
	ЗаписьРегистра = РегистрыСведений.ИсторияВыполненияHTTPЗапросов.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(ЗаписьРегистра, ЗначенияЗаполнения);
	ЗаписьРегистра.Записать(Истина);
КонецПроцедуры

#КонецОбласти 

#Область ЖурналРегистрации

// Добавляет запись в журнал регистрации в группу "Интернет сервисы"
//
// Параметры:
//	ИмяЧасти			- Строка - доп. имя для события 
//	Комментарий			- Строка - комментарий
//	ОбъектМетаданных	- ЛюбаяСсылка - ссылка на объект
//	Данные				- ОбъектМетаданных
// 
Процедура ЗаписатьОшибкуВЖурналРегистрации(знач ИмяЧасти, знач Комментарий, знач ОбъектМетаданных = Неопределено, знач Данные = Неопределено) Экспорт
	ЗаписьЖурналаРегистрации(НСтр("ru='Интернет сервисы.'") + ИмяЧасти,
		УровеньЖурналаРегистрации.Ошибка,
		ОбъектМетаданных,
		Данные,
		Комментарий); 
КонецПроцедуры

#КонецОбласти 

#Область HTTPОтветы

// 200 Success - запрос выполнен успешно
Функция ПолучитьОтвет200(знач Заголовки = Неопределено, знач Тело = "", знач ТипТела = 0, знач Параметры = Неопределено) Экспорт
	Если ТипЗнч(Заголовки) <> Тип("Соответствие") Тогда
		Заголовки = Новый Соответствие;
		Если НЕ ПустаяСтрока(Тело) Тогда
			Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(Параметры) <> Тип("Структура") Тогда
		Параметры = Новый Структура;
	КонецЕсли;
	
	Если ТипТела = 0 И НЕ Параметры.Свойство("Кодировка") Тогда
		Параметры.Вставить("Кодировка", КодировкаТекста.UTF8);
	КонецЕсли;
	
	Ответ = Новый HTTPСервисОтвет(200,, Заголовки);
	
	Если ТипТела = 0 Тогда
		Ответ.УстановитьТелоИзСтроки(Тело, Параметры.Кодировка);
	ИначеЕсли ТипТела = 1 Тогда
		Ответ.УстановитьТелоИзДвоичныхДанных(Тело);
	ИначеЕсли ТипТела = 2 Тогда
		Ответ.УстановитьИмяФайлаТела(Тело);
	КонецЕсли;
	
	ДополнитьОтветПараметрамиCORS(Ответ);
	Возврат Ответ;
КонецФункции

// 400 Bad Request — сервер обнаружил в запросе клиента синтаксическую ошибку.
Функция ПолучитьОтвет400(ТекстОшибки, Отказ = Ложь) Экспорт
	Отказ = Истина;
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
	
	СтруктураОшибки = ИнтернетСервисыКлиентСервер.СтруктураError(ТекстОшибки);
	СтруктураОшибки.Вставить("code", 400);
	
	Ответ = Новый HTTPСервисОтвет(400,, Заголовки);
	Ответ.УстановитьТелоИзСтроки(ИнтернетСервисы.ПолучитьСтрокуJSON(СтруктураОшибки));
	
	ДополнитьОтветПараметрамиCORS(Ответ);
	Возврат Ответ;
КонецФункции

// 401 Unauthorized — для доступа к запрашиваемому ресурсу требуется аутентификация.
Функция ПолучитьОтвет401(ТекстОшибки, Отказ = Ложь) Экспорт
	Отказ = Истина;
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
	
	СтруктураОшибки = ИнтернетСервисыКлиентСервер.СтруктураError(ТекстОшибки);
	СтруктураОшибки.Вставить("code", 401);
	
	Ответ = Новый HTTPСервисОтвет(401,, Заголовки);
	Ответ.УстановитьТелоИзСтроки(ИнтернетСервисы.ПолучитьСтрокуJSON(СтруктураОшибки));
	
	ДополнитьОтветПараметрамиCORS(Ответ);
	Возврат Ответ;
КонецФункции

// 403 Forbidden — сервер понял запрос, но он отказывается его выполнять из-за
// ограничений в доступе для клиента к указанному ресурсу. Если для доступа к ресурсу
// требуется аутентификация средствами HTTP, то следует возвращать ответ 401 или 407
// при использовании прокси. В любом случае клиенту следует сообщить причины отказа в
// обработке запроса.
Функция ПолучитьОтвет403(ТекстОшибки, Отказ = Ложь) Экспорт
	Отказ = Истина;
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
	
	СтруктураОшибки = ИнтернетСервисыКлиентСервер.СтруктураError(ТекстОшибки);
	СтруктураОшибки.Вставить("code", 403);
	
	Ответ = Новый HTTPСервисОтвет(403,, Заголовки);
	Ответ.УстановитьТелоИзСтроки(ИнтернетСервисы.ПолучитьСтрокуJSON(СтруктураОшибки));
	
	ДополнитьОтветПараметрамиCORS(Ответ);
	Возврат Ответ;
КонецФункции

// 404 Not Found — самая распространенная ошибка при пользовании Интернетом, основная
// причина — ошибка в написании адреса Web-страницы. Сервер понял запрос, но не нашёл
// соответствующего ресурса по указанному URI. Если серверу известно, что по этому адресу
// был документ, то ему желательно использовать код 410. Ответ 404 может использоваться
// вместо 403, если требуется тщательно скрыть от посторонних глаз определённые ресурсы.
Функция ПолучитьОтвет404(Отказ = Ложь) Экспорт
	Отказ = Истина;
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
	
	СтруктураОшибки = ИнтернетСервисыКлиентСервер.СтруктураError("");
	СтруктураОшибки.Вставить("code", 404);
	
	Ответ = Новый HTTPСервисОтвет(404,, Заголовки);
	Ответ.УстановитьТелоИзСтроки(ИнтернетСервисы.ПолучитьСтрокуJSON(СтруктураОшибки));
	
	ДополнитьОтветПараметрамиCORS(Ответ);
	Возврат Ответ;
КонецФункции

// 405 Method Not Allowed — указанный клиентом метод нельзя применить к текущему ресурсу.
// В ответе сервер должен указать доступные методы в заголовке Allow, разделив их запятой.
// Эту ошибку сервер должен возвращать, если метод ему известен, но он не применим именно
// к указанному в запросе ресурсу, если же указанный метод не применим на всём сервере,
// то клиенту нужно вернуть код 501 (Not Implemented).
Функция ПолучитьОтвет405(ДопустимыеМетоды, Отказ = Ложь) Экспорт
	Отказ = Истина;
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
	
	СтруктураОшибки = ИнтернетСервисыКлиентСервер.СтруктураError("");
	СтруктураОшибки.Вставить("code", 405);
	СтруктураОшибки.Вставить("allow", ДопустимыеМетоды);
	
	Ответ = Новый HTTPСервисОтвет(405,, Заголовки);
	Ответ.УстановитьТелоИзСтроки(ИнтернетСервисы.ПолучитьСтрокуJSON(СтруктураОшибки));
	
	ДополнитьОтветПараметрамиCORS(Ответ);
	Возврат Ответ;
КонецФункции

// 500 Internal Server Error — любая внутренняя ошибка сервера, которая не входит в
// рамки остальных ошибок класса.
Функция ПолучитьОтвет500(ТекстОшибки, Отказ = Ложь) Экспорт
	Отказ = Истина;
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
	
	СтруктураОшибки = ИнтернетСервисыКлиентСервер.СтруктураError(ТекстОшибки);
	СтруктураОшибки.Вставить("code", 500);
	
	Ответ = Новый HTTPСервисОтвет(500,, Заголовки);
	Ответ.УстановитьТелоИзСтроки(ИнтернетСервисы.ПолучитьСтрокуJSON(СтруктураОшибки));
	
	ДополнитьОтветПараметрамиCORS(Ответ);
	Возврат Ответ;
КонецФункции

// 501 Not Implemented — сервер не поддерживает возможностей, необходимых для обработки
// запроса. Типичный ответ для случаев, когда сервер не понимает указанный в запросе
// метод. Если же метод серверу известен, но он не применим к данному ресурсу, то
// нужно вернуть ответ 405.
Функция ПолучитьОтвет501(ТекстОшибки, Отказ = Ложь) Экспорт
	Отказ = Истина;
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
	
	СтруктураОшибки = ИнтернетСервисыКлиентСервер.СтруктураError(ТекстОшибки);
	СтруктураОшибки.Вставить("code", 501);
	
	Ответ = Новый HTTPСервисОтвет(501,, Заголовки);
	Ответ.УстановитьТелоИзСтроки(ИнтернетСервисы.ПолучитьСтрокуJSON(СтруктураОшибки));
	
	ДополнитьОтветПараметрамиCORS(Ответ);
	Возврат Ответ;
КонецФункции

Процедура ДополнитьОтветПараметрамиCORS(Ответ)
	
	ИнтернетСервисыПереопределяемый.ДополнитьОтветПараметрамиCORS(Ответ);
	
КонецПроцедуры

#КонецОбласти 
