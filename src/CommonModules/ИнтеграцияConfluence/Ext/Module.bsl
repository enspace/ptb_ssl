// Copyright (c) 2023, ООО ПрогТехБизнес
// Лицензия Attribution 4.0 International (CC BY 4.0)

#Область ПрограммныйИнтерфейс

Процедура ДобавитьЗаписьВЖурналРегистрации(знач Уровень, знач Метаданные = Неопределено, знач Данные = Неопределено, знач Текст) Экспорт	
	ЗаписьЖурналаРегистрации(НСтр("ru='Обмен с Confluence'"), Уровень, Метаданные, Данные, Текст);
КонецПроцедуры
 
// Возвращает HTTPСоединение по переданным настройкам
//
// Параметры:
//	БазаЗнанийСсылка	- СправочникСсылка.БазыЗнанийConfluence
//	ПользовательСсылка	- СправочникСсылка.Пользователи
//
// Возвращаемое значение:
//   Структура - см. НастройкиПодключенияПоЛогинуТокену
// 
Функция НастройкиПодключения(знач БазаЗнанийСсылка, знач ПользовательСсылка = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ПользовательСсылка) Тогда
		ПользовательСсылка = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	ПользовательАвторизации = ПолучитьПользователяАвторизации(БазаЗнанийСсылка, ПользовательСсылка);
	НастройкиПользователя	= РегистрыСведений.НастройкиИнтеграцииConfluence.НастройкиПользователя(ПользовательАвторизации, БазаЗнанийСсылка);
	
	Возврат НастройкиПодключенияПоЛогину(БазаЗнанийСсылка,
		НастройкиПользователя.Логин,
		НастройкиПользователя.ТокенID);
	
КонецФункции
 
// Возвращает HTTPСоединение по переданным настройкам
//
// Параметры:
//	БазаЗнанийСсылка	- СправочникСсылка.БазыЗнанийConfluence
//	Логин				- Строка
//	ТокенID				- Строка
//
// Возвращаемое значение:
//   Структура
//		Сервер					- Строка - путь к серверу для соединения HTTP
//		ЗащищенноеСоединение	- ЗащищенноеСоединениеOpenSSL, Неопределено
//		СтрокаАвторизации		- Строка - значение авторизации пользователя
// 
Функция НастройкиПодключенияПоЛогину(знач БазаЗнанийСсылка, знач Логин, знач ТокенID) Экспорт
	
	НастройкиБазыЗнаний = Справочники.БазыЗнанийConfluence.НастройкиБазыЗнаний(БазаЗнанийСсылка);
	
	СтрокаАвторизации = СтрШаблон("%1:%2",
		Логин,
		ТокенID);
	
	Настройки = Новый Структура;
	Настройки.Вставить("Сервер"					, НастройкиБазыЗнаний.СерверHTTP);
	Настройки.Вставить("ЗащищенноеСоединение"	, НастройкиБазыЗнаний.ЗащищенноеСоединение);
	Настройки.Вставить("СтрокаАвторизации"		, СтроковыеФункцииПТБКлиентСервер.СтрокаВBase64(СтрокаАвторизации));
	Настройки.Вставить("АдресСервераWiki"		, НастройкиБазыЗнаний.АдресСервераWiki);
	
	Возврат Настройки;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиПодпискиНаСобытия

Процедура ОбъектИнтеграцииConfluenceПриЗаписиОбработчик(Источник) Экспорт
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	Если Источник.ДополнительныеСвойства.Свойство("НеРегистрироватьИзменения")
		И Источник.ДополнительныеСвойства.НеРегистрироватьИзменения Тогда
		Возврат;
	КонецЕсли;
	Если НЕ ВыполнятьОбменПоОбъекту(Источник.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("РегистрацияПланОбмена")
		И НЕ Источник.ДополнительныеСвойства.РегистрацияПланОбмена Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивБазыЗнаний = ПолучитьБазыЗнанийПоОбъекту(Источник.Ссылка);
	Для Каждого БазаЗнанийСсылка Из МассивБазыЗнаний Цикл
		УзелОбмена = ПолучитьУзелОбменаБазыЗнаний(БазаЗнанийСсылка);
		ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Источник);
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область СинхронизацияДанных

Процедура СинхронизацияПолнаяПоБазеЗнаний(знач БазаЗнанийСсылка, знач ЗаписьВЖурналРегистрации) Экспорт
	Если ЗаписьВЖурналРегистрации Тогда
		ДобавитьЗаписьВЖурналРегистрации(УровеньЖурналаРегистрации.Информация,,
			БазаЗнанийСсылка, НСтр("ru='Началась выгрузка объектов по базе знаний'")); 
	КонецЕсли;
		
	УзелОбменаСсылка = ПолучитьУзелОбменаБазыЗнаний(БазаЗнанийСсылка);
	
	ТекстЗапроса = "";
	Для Каждого ЭлементСостава Из Метаданные.ПланыОбмена.ОбменConfluence.Состав Цикл
		ОбъектаМетаданных = ЭлементСостава.Метаданные;
		
		ТекстЗапроса = ТекстЗапроса + ?(ПустаяСтрока(ТекстЗапроса), "", "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|") + 
		"ВЫБРАТЬ
		|	Т.Ссылка КАК Ссылка
		|ИЗ
		|	" + ОбъектаМетаданных.ПолноеИмя() + ".Изменения КАК Т
		|ГДЕ
		|	Т.Узел = &УзелОбмена";
	КонецЦикла; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("УзелОбмена", УзелОбменаСсылка);
    Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ ВложенныйЗапрос.Ссылка ИЗ (" + ТекстЗапроса + ") КАК ВложенныйЗапрос";
	РезультатЗапроса = Запрос.Выполнить();

	Если РезультатЗапроса.Пустой() Тогда
		Если ЗаписьВЖурналРегистрации Тогда
			ДобавитьЗаписьВЖурналРегистрации(УровеньЖурналаРегистрации.Информация,,
				БазаЗнанийСсылка,
				НСтр("ru='Завершена выгрузка объектов по базе знаний. Данных выгрузки по пользователю не найдено.'"));
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ВыполнитьОтправкуДанныхПоОбъекту(БазаЗнанийСсылка, Выборка.Ссылка, ЗаписьВЖурналРегистрации);
	КонецЦикла;  
	
	Если ЗаписьВЖурналРегистрации Тогда
		ДобавитьЗаписьВЖурналРегистрации(УровеньЖурналаРегистрации.Информация,,
			БазаЗнанийСсылка, НСтр("ru='Завершена выгрузка объектов по базе знаний'")); 
	КонецЕсли;
КонецПроцедуры

Процедура ВыполнитьОтправкуДанныхПоОбъекту(знач БазаЗнанийСсылка, знач ОбъектСсылка, знач ЗаписьВЖурналРегистрации) Экспорт
	Если ЗаписьВЖурналРегистрации Тогда
		ИнтеграцияConfluence.ДобавитьЗаписьВЖурналРегистрации(УровеньЖурналаРегистрации.Информация,,
			ОбъектСсылка, НСтр("ru='Начало выгрузки статьи в базу знаний'"));
	КонецЕсли;
	
	Результат = ИнтеграцияConfluenceПереопределяемый.ВыполнитьОтправкуДанныхПоОбъекту(БазаЗнанийСсылка, ОбъектСсылка);
	
	Если Результат = Истина Тогда
		УзелОбмена = ПолучитьУзелОбменаБазыЗнаний(БазаЗнанийСсылка);
		ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена, ОбъектСсылка);
	КонецЕсли;
	
	Если ЗаписьВЖурналРегистрации И Результат Тогда
		ДобавитьЗаписьВЖурналРегистрации(УровеньЖурналаРегистрации.Информация,,
			БазаЗнанийСсылка, НСтр("ru='Завершена выгрузка статьи в базу знаний'"));
	КонецЕсли;
КонецПроцедуры

Процедура ОбменДаннымиConfluence() Экспорт
	
	ДобавитьЗаписьВЖурналРегистрации(УровеньЖурналаРегистрации.Информация,,,
		НСтр("ru='Началось выполнение регламентного задания ""Обмен с Confluence"".'"));
	
	// Найдем у кого установлен признак синхронизации с Confluence
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	БазыЗнанийConfluence.Ссылка КАК БазаЗнаний
	|ИЗ
	|	Справочник.БазыЗнанийConfluence КАК БазыЗнанийConfluence
	|ГДЕ
	|	БазыЗнанийConfluence.ЕдинаяАвторизация";
	
	МассивБазыЗнаний = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("БазаЗнаний");
	
	ДопМассив = ИнтеграцияConfluenceПереопределяемый.ПолучитьБазыЗнанийДляОбмена();
	Если ТипЗнч(ДопМассив) = Тип("Массив") Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивБазыЗнаний, ДопМассив, Истина);
	КонецЕсли;
	
	Если МассивБазыЗнаний.Количество() = 0 Тогда
		ДобавитьЗаписьВЖурналРегистрации(УровеньЖурналаРегистрации.Информация,,,
			НСтр("ru='Завершено выполнение регламентного задания ""Обмен с Confluence"". Базы знаний с настроенным доступом не найдены.'"));
		
		Возврат;
	КонецЕсли;
	
	Для Каждого БазаЗнанийСсылка Из МассивБазыЗнаний Цикл
		СинхронизацияПолнаяПоБазеЗнаний(БазаЗнанийСсылка, Истина);
	КонецЦикла;  
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьПользователяАвторизации(знач БазаЗнанийСсылка, знач ПользовательСсылка)
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(БазаЗнанийСсылка, "ЕдинаяАвторизация, ПользовательАвторизации");
	Возврат ?(Реквизиты.ЕдинаяАвторизация = Истина, Реквизиты.ПользовательАвторизации, ПользовательСсылка);
КонецФункции

Функция ПолучитьБазыЗнанийПоОбъекту(знач ОбъектСсылка)
	МассивБазыЗнаний = Новый Массив;
	
	ДопМассив = ИнтеграцияConfluenceПереопределяемый.ПолучитьБазыЗнанийПоОбъекту(ОбъектСсылка);
	Если ТипЗнч(ДопМассив) = Тип("Массив") Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивБазыЗнаний, ДопМассив, Истина);
	КонецЕсли;
	
	Возврат МассивБазыЗнаний;
КонецФункции

Функция ВыполнятьОбменПоОбъекту(знач ОбъектСсылка)
	Результат = ИнтеграцияConfluenceПереопределяемый.ВыполнятьОбменПоОбъекту(ОбъектСсылка);
	
	Если НЕ Результат Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

// ПланОбмена ОбменConfluence

Функция НайтиУзелОбменаБазыЗнаний(знач БазаЗнанийСсылка)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("БазаЗнаний", БазаЗнанийСсылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОбменConfluence.Ссылка КАК Ссылка
	|ИЗ
	|	ПланОбмена.ОбменConfluence КАК ОбменConfluence
	|ГДЕ
	|	ОбменConfluence.БазаЗнаний = &БазаЗнаний
	|	И НЕ ОбменConfluence.ПометкаУдаления";
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		Возврат Выборка.Ссылка;
	КонецЕсли;
КонецФункции

Функция СоздатьУзелОбменаБазыЗнаний(знач БазаЗнанийСсылка)
	УзелОбменаОбъект = ПланыОбмена.ОбменConfluence.СоздатьУзел();
	УзелОбменаОбъект.УстановитьНовыйКод();
	УзелОбменаОбъект.Наименование	= НСтр("ru='Обмен по базе знаний '") + Строка(БазаЗнанийСсылка);
	УзелОбменаОбъект.Описание		= НСтр("ru='Узел обмена по базе знаний. Создан автоматически.'");
	УзелОбменаОбъект.БазаЗнаний		= БазаЗнанийСсылка;
	УзелОбменаОбъект.Записать();
	
	Возврат УзелОбменаОбъект.Ссылка;
КонецФункции

Функция ПолучитьУзелОбменаБазыЗнаний(знач БазаЗнанийСсылка)
	УзелОбмена = НайтиУзелОбменаБазыЗнаний(БазаЗнанийСсылка);
	Если НЕ ЗначениеЗаполнено(УзелОбмена) Тогда
		УзелОбмена = СоздатьУзелОбменаБазыЗнаний(БазаЗнанийСсылка);
	КонецЕсли;
	
	Возврат УзелОбмена;
КонецФункции

#КонецОбласти
 
