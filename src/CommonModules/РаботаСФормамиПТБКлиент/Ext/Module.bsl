
#Область ПрограммныйИнтерфейс

// Показывает вопрос подтверждения удаления строк табличной части
// Стандартный текст: "Вы уверены что хотите удалить N строк(у/и)? (текст)"
// Рекомендуется использовать в методе <ТабличнаяЧасть>ПередУдалением
//
// Параметры:
//	Форма			- ФормаКлиентскогоПриложения - форма, в которой вызывается удаление из ТЧ
//	ТабличнаяЧасть	- ДанныеФормыКоллекция - реквизит табличной части
//	Элемент			- ЭлементФормы - элемент формы табличной части
//	Отказ			- Булево - признак отказа от стандартного действия
//	Параметры		- Структура, Неопределено - см. ПараметрыПодтвержденияУдаленияСтрок
// 
Процедура ПодтвердитьУдалениеСтрок(знач Форма, знач ТабЧасть, знач Элемент, Отказ, знач Параметры = Неопределено) Экспорт
	Если НЕ ТипЗнч(Параметры) = Тип("Структура") Тогда
		Параметры = Новый Структура;
	КонецЕсли;
	
	Отказ = Истина;
	
	ПодтверждениеУдаленияСтрокАсинх(Форма, ТабЧасть, Элемент, Параметры);
КонецПроцедуры

// Выполняет отключение сохранения пользовательских настроек
//
// Параметры:
//	Список				- ДинамическийСписок
//	ОтключитьСохранение	- Булево - отключить автоматическое сохранение настроек
//
Процедура ОтключитьПользовательскиеНастройки(знач Список, знач ОтключитьСохранение = Истина) Экспорт
	Если НЕ ТипЗнч(Список) = Тип("ДинамическийСписок") Тогда
		Возврат;
	КонецЕсли;
	
	Если ОтключитьСохранение Тогда
		Список.АвтоматическоеСохранениеПользовательскихНастроек = Ложь;
	КонецЕсли;
	
	Для Каждого Настройка Из Список.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
		Если ТипЗнч(Настройка) = Тип("ЭлементОтбораКомпоновкиДанных") ИЛИ ТипЗнч(Настройка) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			Настройка.Использование = Ложь;
		ИначеЕсли ТипЗнч(Настройка) = Тип("ОтборКомпоновкиДанных") Тогда
			Для Каждого ЭлементОтбора Из Настройка.Элементы Цикл
				ЭлементОтбора.Использование = Ложь;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Возвращает структуру с набором параметров для метода ПодтвердитьУдалениеСтрок
//
// Возвращаемое значение:
//	Структура
//		Текст			- Строка - дополнительная строка подставляемая к окончанию вопроса (в скобках)
//		ОповещениеОтказ	- ОписаниеОповещения - оповещение в случае отказа от удаления
//		ОповещениеДо	- ОписаниеОповещения - оповещение до удаления, после подтверждения
//		ОповещениеПосле	- ОписаниеОповещения - оповещение после удаления
//		НеУдалятьСтроки	- Булево - если установить Истина, строки удалены не будут даже при положительном ответе
//			Можно использовать для собственной обработки удаления, при этом оставить механизм подтверждения
//
Функция ПараметрыПодтвержденияУдаленияСтрок() Экспорт
	Структура = Новый Структура;
	Структура.Вставить("Текст"				, "");
	Структура.Вставить("ОповещениеОтказ"	, Неопределено);
	Структура.Вставить("ОповещениеДо"		, Неопределено);
	Структура.Вставить("ОповещениеПосле"	, Неопределено);
	Структура.Вставить("НеУдалятьСтроки"	, Ложь);
	Структура.Вставить("КнопкаПоУмолчанию"	, КодВозвратаДиалога.Отмена);
	
	Возврат Структура;
КонецФункции

#КонецОбласти

#Область СобытияФормы

Процедура ПриОткрытииФормыСписка(знач Форма, Отказ) Экспорт
	
	РежимВыбораФормы	= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Форма.Параметры, "РежимВыбора", Ложь);
	ЕстьРеквизитСписок	= ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Список");
	Если РежимВыбораФормы И ЕстьРеквизитСписок Тогда
		РаботаСФормамиПТБКлиент.ОтключитьПользовательскиеНастройки(Форма.Список, Истина);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Асинх Процедура ПодтверждениеУдаленияСтрокАсинх(знач Форма, знач ТабличнаяЧасть, знач Элемент, знач Параметры = Неопределено) 
	ДопТекст			= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "Текст", "");
	ОповещениеОтказ		= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "ОповещениеОтказ", Неопределено);
	ОповещениеДо		= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "ОповещениеДо", Неопределено);
	ОповещениеПосле		= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "ОповещениеПосле", Неопределено);
	НеУдалятьСтроки		= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "НеУдалятьСтроки", Ложь);
	КнопкаПоУмолчанию	= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "КнопкаПоУмолчанию", КодВозвратаДиалога.Отмена);
	
	Если НЕ ПустаяСтрока(ДопТекст) Тогда
		ДопТекст = " (" + СокрЛП(ДопТекст) + ")";
	КонецЕсли;
	
	Идентификаторы	= Элемент.ВыделенныеСтроки;
	КоличествоСтрок	= Идентификаторы.Количество();
	
	ТекстСтроки = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
		";%1 строку;;%1 строки;%1 строк;",
		КоличествоСтрок,
		ВидЧисловогоЗначения.Количественное,
		"L=ru");
		
	ТекстВопроса = СтрШаблон(НСтр("ru='Вы уверены что хотите удалить %1?%2'"), ТекстСтроки, ДопТекст);
	
	Ответ = Ждать ВопросАсинх(ТекстВопроса,
		РежимДиалогаВопрос.ОКОтмена,
		60,
		КнопкаПоУмолчанию,,
		КодВозвратаДиалога.Отмена);
	
	Если НЕ Ответ = КодВозвратаДиалога.ОК Тогда
		Если ТипЗнч(ОповещениеОтказ) = Тип("ОписаниеОповещения") Тогда
			ВыполнитьОбработкуОповещения(ОповещениеОтказ, Идентификаторы);
		КонецЕсли;
		
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ОповещениеДо) = Тип("ОписаниеОповещения") Тогда
		ВыполнитьОбработкуОповещения(ОповещениеДо, Идентификаторы);
	КонецЕсли;
	
	Если НеУдалятьСтроки = Истина Тогда
		Возврат;
	КонецЕсли;
		
	СтрокиУдалить = ОбщегоНазначенияПТБКлиентСервер.СтрокиТаблицыПоИдентификатору(ТабличнаяЧасть, Идентификаторы);
		
	ЭтоДерево = (ТипЗнч(ТабличнаяЧасть) = Тип("ДанныеФормыДерево"));
	Для Каждого СтрокаТаблицы Из СтрокиУдалить Цикл
		Если ЭтоДерево Тогда
			ЭлементРодитель = СтрокаТаблицы.ПолучитьРодителя();
			ЭлементРодитель = ?(ЭлементРодитель = Неопределено, ТабличнаяЧасть, ЭлементРодитель);
			
			ИсточникУдаления = ЭлементРодитель.ПолучитьЭлементы();
		Иначе 
			ИсточникУдаления = ТабличнаяЧасть;
		КонецЕсли;
		
		ИндексСтроки = ИсточникУдаления.Индекс(СтрокаТаблицы);
		Если ИндексСтроки <> Неопределено Тогда
			ИсточникУдаления.Удалить(ИндексСтроки);
		КонецЕсли;
	КонецЦикла;
	
	Форма.Модифицированность = Истина;

	Если ТипЗнч(ОповещениеПосле) = Тип("ОписаниеОповещения") Тогда
		ВыполнитьОбработкуОповещения(ОповещениеПосле, Неопределено);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти
