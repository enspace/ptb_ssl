// Copyright (c) 2023, ООО ПрогТехБизнес
// Лицензия Attribution 4.0 International (CC BY 4.0)

#Область ПрограммныйИнтерфейс

// Выполняет открытие формы редактирования формулы
//
// Параметры:
//	Параметры - Структура - см. ПараметрыРедактирования
//
Процедура РедактироватьФормулу(знач Параметры) Экспорт
	
	ФормаВладелец	= Параметры.Форма;
	ФормулыРасчета	= Параметры.ФормулыРасчета;
	СтрокаФормулы	= Параметры.СтрокаФормулы;
	Оповещение		= Параметры.Оповещение;
	
	МассивФормулы = Новый Массив;
	Для Каждого СтрокаТаблицы Из ФормулыРасчета Цикл
		СтруктураСтроки = РаботаСФормуламиКлиентСервер.СтруктураФормулы();
		ЗаполнитьЗначенияСвойств(СтруктураСтроки, СтрокаТаблицы);
		МассивФормулы.Добавить(СтруктураСтроки);
	КонецЦикла;
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ФормулыРасчета"	, ФормулыРасчета);
	ДопПараметры.Вставить("Оповещение"		, Оповещение);
	ДопПараметры.Вставить("Идентификатор"	, СтрокаФормулы.Идентификатор);
	ДопПараметры.Вставить("Колонка"			, СтрокаФормулы.Колонка);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("РедактироватьФормулуЗавершение", ЭтотОбъект, ДопПараметры);
	
	ТекущаяФормула = РаботаСФормуламиКлиентСервер.СтруктураФормулы();
	ЗаполнитьЗначенияСвойств(ТекущаяФормула, СтрокаФормулы);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Идентификатор"	, СтрокаФормулы.Идентификатор);
	ПараметрыФормы.Вставить("Колонка"		, СтрокаФормулы.Колонка);
	ПараметрыФормы.Вставить("ТекущаяФормула", ТекущаяФормула);
	ПараметрыФормы.Вставить("Формулы"		, МассивФормулы);
	
	ПараметрыФормы.Вставить("Показатели"	, Параметры.Показатели);
	ПараметрыФормы.Вставить("ТолькоПросмотр", Параметры.ТолькоПросмотр);
	ПараметрыФормы.Вставить("КлючФормы"		, Параметры.КлючФормы);
	ПараметрыФормы.Вставить("Дополнительно"	, Параметры.Дополнительно);
	
	ПараметрыФормы.Вставить("ЗапретитьПоказатель"		, Параметры.ЗапретитьПоказатель);
	ПараметрыФормы.Вставить("РазрешитьПустоеЗначение"	, Параметры.РазрешитьПустоеЗначение);
	
	ОткрытьФорму("Обработка.РаботаСФормулами.Форма",
		ПараметрыФормы,
		ФормаВладелец,
		Параметры.Уникальность,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Возвращает структуру для передачи в качестве параметра
// в метод РедактироватьФормулу
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма владелец, для
//		открываемой формы редактирования формулы
//
// Возвращаемое значение:
//   Структура
//		Форма					- ФормаКлиентскогоПриложения 
//		ФормулыРасчета			- ДанныеФормыКоллекция - табличная часть ФормулыРасчета
//		СтрокаФормулы			- ДанныеФормыЭлементКоллекции - тек. строка ФормулыРасчета
//		Показатели				- Структура - коллекция групп показателей
//			см. РаботаСФормуламиКлиентСервер.ДобавитьГруппуПоказателей
//		Оповещение				- ОписаниеОповещения - оповещение для вызова по окончанию редактирования
//			формулы. В качестве результата передается Булево, признак необходимости пересчета
//			значения по текущей строке формулы (при изменении значимых реквизитов
//		ТолькоПросмотр			- Булево - признак открытия формы в режиме просмотра
//		Уникальность			- Произвольный - признак Уникальность в методе ОткрытьФорму
//		КлючФормы				- Строка - значение для передачи в Форма.Параметры.КлючФормы
//		Дополнительно			- Произвольный - любые данные для передачи в Форма.Параметры.Дополнительно
//		ЗапретитьПоказатель		- Булево - признак запрета создания показателя в строке (скрыт блок показателя)
//		РазрешитьПустоеЗначение	- Булево - признак разрешения пустого значения в результате
//
Функция ПараметрыРедактирования(знач Форма) Экспорт
	Параметры = Новый Структура;
	Параметры.Вставить("Форма"			, Форма);
	Параметры.Вставить("ФормулыРасчета"	, Неопределено);
	Параметры.Вставить("СтрокаФормулы"	, Неопределено);
	Параметры.Вставить("Показатели"		, Неопределено);
	Параметры.Вставить("Оповещение"		, Неопределено);
	Параметры.Вставить("ТолькоПросмотр"	, Ложь);
	Параметры.Вставить("Уникальность"	, "");
	Параметры.Вставить("КлючФормы"		, "");
	Параметры.Вставить("Дополнительно"	, Неопределено);
	
	Параметры.Вставить("РазрешитьПустоеЗначение"	, Ложь);
	Параметры.Вставить("ЗапретитьПоказатель"		, Ложь);
	
	Возврат Параметры;
КонецФункции

#КонецОбласти

#Область ПрограммныйИнтерфейс_ТабличнаяЧасть

// Проверяет колонку редактирования, если это Формула и колонка Сумма тогда
// устанавливает СтандартнаяОбработка = Ложь
//
// Параметры соответствуют событию Выбор, остальные описаны в блоке Параметры
//
// Параметры:
//	Форма	- ФормаКлиентскогоПриложения - форма, в которой вызывается удаление из ТЧ
//
Процедура ТаблицаФормулВыбор(Форма, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка) Экспорт
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СпособРучнойВвод = ПредопределенноеЗначение("Перечисление.СпособыРасчетаПоказателяФормулы.РучнойВвод");
	
	Если СтрЗаканчиваетсяНа(Поле.Имя, "Сумма") И НЕ ТекущиеДанные.СпособРасчета = СпособРучнойВвод Тогда
		СтандартнаяОбработка = Ложь;
	ИначеЕсли СтрЗаканчиваетсяНа(Поле.Имя, "РасчетПредставление") ИЛИ СтрЗаканчиваетсяНа(Поле.Имя, "Формула") Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;	
КонецПроцедуры

// Выполняет проверку строки формулы при начале редактирования
//	Если происходит копирование строки
//		- очищает идентификатор
//		- сбрасывает признак "Предопределенный"
//		- если имя реквизита заполнено, добавляет _0
//
// Параметры соответствуют событию ПриНачалеРедактирования, остальные описаны в блоке Параметры
//
// Параметры:
//	Форма	- ФормаКлиентскогоПриложения - форма, в которой вызывается удаление из ТЧ
//
Процедура ТаблицаФормулПриНачалеРедактирования(Форма, Элемент, НоваяСтрока, Копирование) Экспорт
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НоваяСтрока И Копирование Тогда
		ТекущиеДанные.Предопределенный	= Ложь;
		ТекущиеДанные.Идентификатор		= "";
		
		Если ЗначениеЗаполнено(ТекущиеДанные.ИмяПоказателя) Тогда
			ТекущиеДанные.ИмяПоказателя = ТекущиеДанные.ИмяПоказателя + "_0";
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.СпособРасчета) Тогда
		ТекущиеДанные.СпособРасчета = ПредопределенноеЗначение("Перечисление.СпособыРасчетаПоказателяФормулы.Формула");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.Идентификатор) Тогда
		ТекущиеДанные.Идентификатор = Формат(ТекущаяУниверсальнаяДатаВМиллисекундах(), "ЧГ=");
	КонецЕсли;
КонецПроцедуры

// Проверяет возможность удаления строки, задает вопрос перед удалением
// После успешного удаления выполняет обработку оповещения со значением Истина
//
// Параметры соответствуют событию ПередУдалением, остальные описаны в блоке Параметры
//
// Параметры:
//	Форма			- ФормаКлиентскогоПриложения - форма, в которой вызывается удаление из ТЧ
//	ИмяРеквизита	- Строка - полный путь к реквизиту табличной части
//	Оповещение		- ОписаниеОповещения - оповещение для вызова после удаления
//
Процедура ТаблицаФормулПередУдалением(Форма, Элемент, Отказ, знач ИмяРеквизита, знач Оповещение) Экспорт
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	
	Если ТекущиеДанные.Предопределенный Тогда
		ПоказатьПредупреждение(, НСтр("ru='Данную строку удалить нельзя'"));
		Возврат;
	КонецЕсли;

	ПараметрыОповещения	= Новый Структура;
	ПараметрыОповещения.Вставить("Форма"		, Форма);
	ПараметрыОповещения.Вставить("ИмяРеквизита"	, ИмяРеквизита);
	ПараметрыОповещения.Вставить("Оповещение"	, Оповещение);
	ПараметрыОповещения.Вставить("Идентификатор", ТекущиеДанные.ПолучитьИдентификатор());
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ТаблицаФормулПередУдалениемВопросЗавершение", ЭтотОбъект, ПараметрыОповещения);
	
	Если ТекущиеДанные.ЭтоПоказатель Тогда
		ПоказатьВопрос(ОписаниеОповещения,
			НСтр("ru='Данная строка является показателем, который может быть использован в формулах. Продолжить удаление строки?'"),
			РежимДиалогаВопрос.ОКОтмена,
			60,
			КодВозвратаДиалога.ОК,,
			КодВозвратаДиалога.Отмена);
	Иначе 
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.ОК);
	КонецЕсли;
КонецПроцедуры

// Устанавливает значение "РучноеЗначение", для ручного ввода из колонки "Сумма"
//
// Параметры соответствуют событию ПриИзменении для реквизита ТЧ, остальные описаны в блоке Параметры
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма, в которой вызывается удаление из ТЧ
//
Процедура ТаблицаФормулСуммаПриИзменении(Форма, Элемент) Экспорт
	Если НЕ ТипЗнч(Элемент) = Тип("ПолеФормы") Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаФормы = Элемент.Родитель;
	Пока ТипЗнч(ТаблицаФормы) <> Тип("ТаблицаФормы") Цикл
		Если ТипЗнч(ТаблицаФормы) = Тип("ФормаКлиентскогоПриложения") Тогда
			Возврат;
		КонецЕсли;
		
		ТаблицаФормы = ТаблицаФормы.Родитель;
	КонецЦикла;		
	
	ТекущиеДанные = ТаблицаФормы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РучнойВвод = ПредопределенноеЗначение("Перечисление.СпособыРасчетаПоказателяФормулы.РучнойВвод");
	Если НЕ ТекущиеДанные.СпособРасчета = РучнойВвод Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.РучноеЗначение = ТекущиеДанные.Сумма;
	
	СтруктураФормулы = РаботаСФормуламиКлиентСервер.СтруктураФормулы();
	ЗаполнитьЗначенияСвойств(СтруктураФормулы, ТекущиеДанные);
	ТекущиеДанные.РасчетПредставление = РаботаСФормуламиКлиентСервер.ПолучитьРасчетПредставление(СтруктураФормулы);
КонецПроцедуры

#КонецОбласти

#Область ЗавершениеНемодальныхВызовов

Процедура РедактироватьФормулуЗавершение(Результат, ДопПараметры) Экспорт	
	Если НЕ ТипЗнч(Результат) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ФормулыРасчета	= ДопПараметры.ФормулыРасчета;
	Оповещение		= ДопПараметры.Оповещение;
	Идентификатор	= ДопПараметры.Идентификатор;
	Колонка			= ДопПараметры.Колонка;
	
	ОтборФормулы = Новый Структура("Идентификатор, Колонка", Идентификатор, Колонка);
	
	МассивСтрокФормулы = ФормулыРасчета.НайтиСтроки(ОтборФормулы);
	Если МассивСтрокФормулы.Количество() > 0 Тогда
		СтрокаТаблицы = МассивСтрокФормулы[0];
	Иначе 
		СтрокаТаблицы = ФормулыРасчета.Добавить();
		СтрокаТаблицы.Идентификатор	= Результат.Идентификатор;
	КонецЕсли;
	
	ФормулаИзменилась		= (СтрокаТаблицы.Формула <> Результат.Формула);
	ИзменилосьЗначение		= (СтрокаТаблицы.РучноеЗначение <> Результат.РучноеЗначение);
	ИзменилосьОкругление	= (СтрокаТаблицы.НеОкруглять <> Результат.НеОкруглять ИЛИ СтрокаТаблицы.ТочностьОкругления <> Результат.ТочностьОкругления);
	ИзменилосьМодальность	= (СтрокаТаблицы.НеОтрицательное <> Результат.НеОтрицательное);
	
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Результат,, "Идентификатор");
		
	СтрокаТаблицы.РасчетПредставление = РаботаСФормуламиКлиентСервер.ПолучитьРасчетПредставление(Результат);
	
	ТребуетсяПересчет = (ФормулаИзменилась ИЛИ ИзменилосьЗначение ИЛИ ИзменилосьОкругление ИЛИ ИзменилосьМодальность);
	
	Если ТипЗнч(Оповещение) = Тип("ОписаниеОповещения") Тогда
		ВыполнитьОбработкуОповещения(Оповещение, ТребуетсяПересчет);
	КонецЕсли;
КонецПроцедуры

Процедура ТаблицаФормулПередУдалениемВопросЗавершение(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	Форма			= ДопПараметры.Форма;
	ИмяРеквизита	= ДопПараметры.ИмяРеквизита;
	Идентификатор	= ДопПараметры.Идентификатор;
	
	ТабЧасть = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ИмяРеквизита);
	
	СтрокаТаблицы = ТабЧасть.НайтиПоИдентификатору(Идентификатор);
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ИндексСтроки = ТабЧасть.Индекс(СтрокаТаблицы);
	ТабЧасть.Удалить(ИндексСтроки);
	
	Если ТипЗнч(ДопПараметры.Оповещение) = Тип("ОписаниеОповещения") Тогда
		ВыполнитьОбработкуОповещения(ДопПараметры.Оповещение, Истина);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти