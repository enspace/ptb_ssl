// Copyright (c) 2023, ООО ПрогТехБизнес
// Лицензия Attribution 4.0 International (CC BY 4.0)

Процедура ДополнитьОтветПараметрамиCORS(Ответ) Экспорт
	//Ответ.Заголовки.Вставить("Access-Control-Allow-Origin"		, "http://localhost:63342"); //http://192.168.1.6
	//Ответ.Заголовки.Вставить("Access-Control-Allow-Methods"		, "GET, PUT, PATCH, POST, DELETE, OPTIONS");
	//Ответ.Заголовки.Вставить("Access-Control-Allow-Credentials"	, "true");
	//Ответ.Заголовки.Вставить("Access-Control-Allow-Headers"		, "X-Requested-With, origin, content-type, authorization, accept, set-cookie");
КонецПроцедуры

// Возвращает настройки подключения, для использования в метода ОМ.ИнтернетСервисы
//
// Параметры:
//	Конфигурация		- произвольное значение, для определения настройки
//	ВызыватьИсключение	- Булево - вызывать исключение при ошибке
//	НеСообщать			- Булево - не выдавать сообщение при ошибке
//
// Возвращаемое значение:
//   Структура
//		Конфигурация	- произвольное значение - параметр Конфигурация
//		АдресСервера	- Строка - полный адрес сервера
//		Пользователь	- Строка - имя пользователя для подключения
//		Пароль			- Строка - пароль пользователя для подключения
//		СтруктураАдреса	- Структура - см. ОбщегоНазначенияКлиентСервер.СтруктураURI
// 
Функция ПолучитьНастройкиПодключения(знач Конфигурация, знач ВызыватьИсключение = Ложь, знач НеСообщать = Ложь) Экспорт
	
	// для обработки конструкции использовать
	//ТекстСообщения = НСтр("ru='Ошибка получения настроек соединения с ИБ ""Документооборот"".'");
	//ИнтернетСервисыКлиентСервер.ОбработатьТекстОшибки(ТекстСообщения, ВызыватьИсключение, НеСообщать);
	//Возврат Неопределено;
	
	// необходимо реализовать получение данных значений из хранилища
	// в зависимости от реализации хранилища и параметра Конфигурация
	АдресСервера		= ""; // Например https://api.ru
	ИмяПользователя		= "";
	ПарольПользователя	= "";
	
	// оставляем как есть
	СтруктураАдреса = ОбщегоНазначенияКлиентСервер.СтруктураURI(АдресСервера);
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("Конфигурация"		, Конфигурация);
	СтруктураДанных.Вставить("АдресСервера"		, АдресСервера);
	СтруктураДанных.Вставить("Пользователь"		, ИмяПользователя);
	СтруктураДанных.Вставить("Пароль"			, ПарольПользователя);
	СтруктураДанных.Вставить("СтруктураАдреса"	, СтруктураАдреса);
	
	Возврат СтруктураДанных;
	
КонецФункции

// Выполняет преобразование значения в строку JSON для типов, не поддерживаемых подсистемой
//	
// Используется для дополнения в методе ИнтернетСервисыКлиентСервер.ЗначениеВСтрокуJSON
// если метод выполняется на сервере
//
// Параметры:
//	Свойство				- Строка - имя свойства
//	Значение				- Произвольный - значение свойства
//	Параметры				- Структура - см. ИнтернетСервисыКлиентСервер.ПараметрыЗначениеВСтрокуJSON
//	СтандартнаяОбработка	- Булево - признак стандартной обработки в методе ИнтернетСервисы.СериализацияЗначенияВJSON
//
// Возвращаемое значение:
//   Строка, Число, Булево - значение для подстановки в JSON
//
Функция СериализацияЗначенияВJSON(знач Свойство, знач Значение, знач Параметры, СтандартнаяОбработка) Экспорт
	
	// ПРИМЕР
	//
	//ТипЗначения = ТипЗнч(Значение);
	//
	//Отказ = Истина;
	//
	//ВызватьИсключение СтрШаблон(НСтр("ru='Недопустимый тип (%1) свойства ""%2"" (%3)'"),
	//	Строка(ТипЗначения),
	//	Свойство,
	//	Строка(Значение));
	
	СтандартнаяОбработка = Истина;
	Возврат Неопределено;
	
КонецФункции
