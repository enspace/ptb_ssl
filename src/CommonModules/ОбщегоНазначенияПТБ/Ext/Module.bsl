
#Область ОписаниеИзменений

// 20.12.2021, Анисков А.А.
//	+ ТабличныйДокументВТаблицуЗначений
//	+ ПустоеЗначениеПоТипу

// 09.11.2021, Анисков А.А.
//	+ РезультатЗапросаВСоответствие
//	+ ПолучитьШаблонЭлементаРезультатаЗапроса

// 09.01.2020, Анисков А.А.
//	+ РезультатЗапросаВМассив
//	+ РезультатЗапросаВСтруктуру
//	+ МассивВТаблицуЗначений
//	+ ПроверитьУникальностьЭлементаСправочника

// 04.09.2019, Анисков А.А.
//	+ ЗаполнитьПоСтруктуре
//	+ УдалитьПовторяющиесяЭлементыМассива
//	+ ЕстьРеквизитОбъекта
//	+ ФоновыеЗаданияДоступны
//	+ ПолучитьТаблицуЗначенийПоДаннымСКД
//	+ СодержимоеВременнойТаблицы

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Заполняет реквизиты объекта значениями данных заполнения.
//	Заполнение возможно только в случае, когда в качестве ДанныхЗаполнения получена структура. 
//	Заполнены будут только те реквизиты, для которых в метаданных установлен флаг "ЗаполнятьИзДанныхЗаполнения"
//
// Параметры:
//	Объект - СправочникОбъект, ДокументОбъект и пр. - объект данных 1С для заполнения
//	ДанныеЗаполнения - Структура - значения заполнения с именами реквизитов и значениями,
//		таб. части передаются в виде массива структур
//	МетаданныеОбъекта - Метаданные - метаданные объекта для считывания реквизитов
//
Процедура ЗаполнитьПоСтруктуре(знач Объект, знач ДанныеЗаполнения, знач МетаданныеОбъекта = Неопределено) Экспорт

	Если Объект = Неопределено
		ИЛИ ТипЗнч(ДанныеЗаполнения) <> Тип("Структура")
		ИЛИ ДанныеЗаполнения.Количество() = 0 Тогда

		Возврат;

	КонецЕсли;

	Если МетаданныеОбъекта = Неопределено Тогда
		МетаданныеОбъекта = Объект.Метаданные();
	КонецЕсли;
	
	Если Метаданные.Справочники.Содержит(МетаданныеОбъекта)
		ИЛИ Метаданные.ПланыВидовХарактеристик.Содержит(МетаданныеОбъекта) Тогда
		РазличатьГруппыИЭлементы = МетаданныеОбъекта.Иерархический;
	Иначе
		РазличатьГруппыИЭлементы = Ложь;
	КонецЕсли;
	
	ЕстьТабЧасти = (ОбщегоНазначения.ЭтоСправочник(МетаданныеОбъекта)
		ИЛИ ОбщегоНазначения.ЭтоДокумент(МетаданныеОбъекта)
		ИЛИ Метаданные.Отчеты.Содержит(МетаданныеОбъекта)
		ИЛИ Метаданные.Обработки.Содержит(МетаданныеОбъекта)
		ИЛИ ОбщегоНазначения.ЭтоЗадача(МетаданныеОбъекта)
		ИЛИ ОбщегоНазначения.ЭтоБизнесПроцесс(МетаданныеОбъекта));
	
	МассивТабЧастей = Новый Массив;
	Если ЕстьТабЧасти Тогда
		Для Каждого МетаТабЧасть Из МетаданныеОбъекта.ТабличныеЧасти Цикл
			МассивТабЧастей.Добавить(МетаТабЧасть.Имя);
		КонецЦикла;
	КонецЕсли;

	// Реквизиты шапки документа
	СтруктураЗаполнения = Новый Структура;
	Для Каждого Реквизит Из МетаданныеОбъекта.СтандартныеРеквизиты Цикл
		Если Реквизит.ЗаполнятьИзДанныхЗаполнения
			И ДанныеЗаполнения.Свойство(Реквизит.Имя) Тогда
			СтруктураЗаполнения.Вставить(Реквизит.Имя);
		КонецЕсли;
	КонецЦикла;
	Для Каждого Реквизит Из МетаданныеОбъекта.Реквизиты Цикл
		Если Реквизит.ЗаполнятьИзДанныхЗаполнения
			И ДанныеЗаполнения.Свойство(Реквизит.Имя) Тогда
			Если РазличатьГруппыИЭлементы Тогда
				Если (Объект.ЭтоГруппа И Реквизит.Использование <> Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляЭлемента)
					ИЛИ
					(НЕ Объект.ЭтоГруппа И Реквизит.Использование <> Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы)
					Тогда
					СтруктураЗаполнения.Вставить(Реквизит.Имя);
				КонецЕсли;
			Иначе
				СтруктураЗаполнения.Вставить(Реквизит.Имя);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	ЗаполнитьЗначенияСвойств(СтруктураЗаполнения, ДанныеЗаполнения);
	ЗаполнитьЗначенияСвойств(Объект, СтруктураЗаполнения);
	
	// Табличные части документа
	Для Каждого ИмяТабличнойЧасти Из МассивТабЧастей Цикл
		Если НЕ ДанныеЗаполнения.Свойство(ИмяТабличнойЧасти) Тогда
			Продолжить;
		ИначеЕсли НЕ ТипЗнч(ДанныеЗаполнения[ИмяТабличнойЧасти]) = Тип("Массив") Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого СтруктураДанных Из ДанныеЗаполнения[ИмяТабличнойЧасти] Цикл
			НоваяСтрока = Объект[ИмяТабличнойЧасти].Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураДанных);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Проверяет существование реквизита у объекта метаданных по переданному имени
//
// Параметры:
//	ОбъектМетаданных - Тип: МетаданныеОбъект. 
//	ИмяРеквизита - Тип: Строка.
//
// Возвращаемое значение:
//	Булево
//
Функция ЕстьРеквизитОбъекта(знач ОбъектМетаданных, знач ИмяРеквизита) Экспорт
	РеквизитСуществует = Ложь;
	
	// Проверяем стандартные реквизиты
	РеквизитСуществует = ОбщегоНазначения.ЭтоСтандартныйРеквизит(ОбъектМетаданных.СтандартныеРеквизиты, ИмяРеквизита);
	
	// Проверяем обычные реквизиты
	Если НЕ РеквизитСуществует Тогда
		// Проверяем реквизиты объекта
		РеквизитСуществует = НЕ (ОбъектМетаданных.Реквизиты.Найти(ИмяРеквизита) = Неопределено);
	КонецЕсли;
	
	// Проверяем общие реквизиты
	Если НЕ РеквизитСуществует Тогда
		ОбщийРеквизит = Метаданные.ОбщиеРеквизиты.Найти(ИмяРеквизита);
		
		Если НЕ ОбщийРеквизит = Неопределено Тогда
			
			АвтоИспользование = (ОбщийРеквизит.АвтоИспользование = Метаданные.СвойстваОбъектов.АвтоИспользованиеОбщегоРеквизита.Использовать);
			
			ЭлементСостава = ОбщийРеквизит.Состав.Найти(ОбъектМетаданных);
			
			Если НЕ ЭлементСостава = Неопределено Тогда
				ИспользованиеОбщегоРеквизита = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита;
				РеквизитСуществует = (ЭлементСостава.Использование = ИспользованиеОбщегоРеквизита.Использовать
										ИЛИ (АвтоИспользование И ЭлементСостава.Использование = ИспользованиеОбщегоРеквизита.Авто));
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат РеквизитСуществует;
КонецФункции

// Возвращает признак доступности фонового задания. Использовать необходимо
// ОбщегоНазначенияУМТРКлиентСервер.ФоновыеЗаданияДоступны
//
// Возвращаемое значение:
//   Булево
// 
Функция ФоновыеЗаданияДоступны() Экспорт 
	ФоновыеЗаданияДоступны = Истина;
	
	ЭтоФайловаяИБ = ОбщегоНазначения.ИнформационнаяБазаФайловая();
	Если ЭтоФайловаяИБ Тогда
		СистИнфо = Новый СистемнаяИнформация;
		
		ЭтоПлатформа_8_3_6 = (ОбщегоНазначенияКлиентСервер.СравнитьВерсии(СистИнфо.ВерсияПриложения, "8.3.6.0") > 1);
		Если ЭтоПлатформа_8_3_6 Тогда
			ИсключенныеРежимы = Новый Массив;
			ИсключенныеРежимы.Добавить(Метаданные.СвойстваОбъектов.РежимСовместимости.Версия8_1);
			ИсключенныеРежимы.Добавить(Метаданные.СвойстваОбъектов.РежимСовместимости.Версия8_2_13);
			ИсключенныеРежимы.Добавить(Метаданные.СвойстваОбъектов.РежимСовместимости.Версия8_2_16);
			
			Если ИсключенныеРежимы.Найти(Метаданные.РежимСовместимости) <> Неопределено Тогда
				ФоновыеЗаданияДоступны = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ФоновыеЗаданияДоступны;
КонецФункции

// Проверяет уникальность элемента справочника по набору реквизитов
//
// Параметры:
//	ИмяОбъекта - Строка - Имя справочника
//  СтруктураРеквизитов - Структура - Структура с именами проверяемых реквизитов
//	Ссылка - Ссылка - Ссылка на элемент справочника
//
// Возвращаемое значение:
//	Булево 
//
Функция ПроверитьУникальностьЭлементаСправочника(знач ИмяОбъекта, знач СтруктураРеквизитов, знач Ссылка) Экспорт
    Запрос = Новый Запрос;
    Запрос.УстановитьПараметр("Ссылка", Ссылка); 
    Запрос.Текст = 
    "ВЫБРАТЬ ПЕРВЫЕ 1
    |    Спр.Ссылка
    |ИЗ
    |    Справочник." + ИмяОбъекта + " КАК Спр
    |ГДЕ
    |    Спр.Ссылка <> &Ссылка
    |";  
	
    Счетчик = 0;
	Для Каждого ЭлементСтруктуры Из СтруктураРеквизитов Цикл
		ИмяПараметра = "Пар" + Формат(Счетчик, "ЧГ=");
        Запрос.Текст = СтрШаблон("%1 И Спр.%2 = &%3",
			Запрос.Текст,
			ЭлементСтруктуры.Ключ,
			ИмяПараметра);
		
		
        Запрос.УстановитьПараметр(ИмяПараметра, ЭлементСтруктуры.Значение);
        Счетчик = Счетчик + 1;
	КонецЦикла;    
	
	
	Возврат Запрос.Выполнить().Пустой();
КонецФункции

// Возвращает пустое значение по типу
//
// Параметры:
//	ТипСсылки	- Тип
//
// Возвращаемое значение:
//   Произвольный
// 
Функция ПустоеЗначениеПоТипу(знач ТипСсылки) Экспорт
	МассивТипов		= ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТипСсылки);
	ОписаниеТипа	= Новый ОписаниеТипов(МассивТипов);
	
	Возврат ОписаниеТипа.ПривестиЗначение(Неопределено);
КонецФункции

#КонецОбласти

#Область ПрограммныйИнтерфейс_ТаблицаЗначений

// Выполняет инициализацию компоновщика по переданной схеме компоновки и значению отбора
//
// Параметры:
//	СхемаКомпоновкиДанных	- СхемаКомпоновкиДанных
//	Компоновщик				- КомпоновщикНастроекКомпоновкиДанных
//	ОтборXML				- Строка
//
Процедура ИнициализацияКомпоновщика(знач СхемаКомпоновкиДанных, знач Компоновщик, знач ОтборXML = "") Экспорт
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено);
	
	Настройки	= СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	URLСхемы	= ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, АдресХранилища);
	
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемы);
	
	Компоновщик.Инициализировать(ИсточникНастроек);
	Компоновщик.ЗагрузитьНастройки(Настройки);
	
	Если НЕ ПустаяСтрока(ОтборXML) Тогда
		Компоновщик.Настройки.Отбор.Элементы.Очистить();
		
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку(ОтборXML);
		ОтборКомпоновкиДанных = СериализаторXDTO.ПрочитатьXML(ЧтениеXML);
		
		Если ТипЗнч(ОтборКомпоновкиДанных) = Тип("ОтборКомпоновкиДанных") Тогда
			ОбщегоНазначенияПТБКлиентСервер.ЗаполнитьОтборКомпоновкиДанныхПоИсточнику(
				Компоновщик.Настройки.Отбор,
				ОтборКомпоновкиДанных);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Исполняет сбор данных по настроенной схеме компоновки данных и возвращает таблицу значений
//
// Параметры:
//	СхемаКомпоновкиДанных	- СхемаКомпоновкиДанных
//	Компоновщик				- КомпоновщикНастроекКомпоновкиДанных
//	ВнешниеНаборыДанных		- Структура
//		Ключ структуры соответствует имени внешнего набора данных. Значение структуры - внешнему набору данных
//
// Возвращаемое значение:
//	ТаблицаЗначений
//
Функция ПолучитьТаблицуЗначенийПоДаннымСКД(знач СхемаКомпоновкиДанных, знач Компоновщик, знач ВнешниеНаборыДанных = Неопределено) Экспорт
	ТаблицаДанных = Новый ТаблицаЗначений;
	
	КомпоновщикМакета		= Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки			= КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, 
		Компоновщик.ПолучитьНастройки(),,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	
	Если ТипЗнч(ВнешниеНаборыДанных) = Тип("Структура") Тогда
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных);
	Иначе 
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	КонецЕсли;
		
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ТаблицаДанных);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	Возврат ТаблицаДанных;
КонецФункции

// Преобразует массив структур в таблицу значений.
//
// Параметры:
//	МассивСтрок - Массив - Массив структур
//
// Возвращаемое значение:
//	ТаблицаЗначений - Таблица значений, полученная в результате преобразования массива структур строк 
//
Функция МассивВТаблицуЗначений(знач МассивСтрок) Экспорт
    ТаблицаЗначений = Новый ТаблицаЗначений;
    
    Для Каждого ЭлементМассива Из МассивСтрок Цикл
        Если ТаблицаЗначений.Колонки.Количество() = 0 Тогда
            Для Каждого КлючИЗначение Из ЭлементМассива Цикл
                ТаблицаЗначений.Колонки.Добавить(КлючИЗначение.Ключ);
            КонецЦикла;
        КонецЕсли;
        
        НоваяСтрока = ТаблицаЗначений.Добавить();
		Для Каждого КлючИЗначение Из ЭлементМассива Цикл
			Если ТаблицаЗначений.Колонки.Найти(КлючИЗначение.Ключ) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
        КонецЦикла;
    КонецЦикла;
    
    Возврат ТаблицаЗначений;
КонецФункции

// Преобразовывает табличный документ в таблицу значений
//
// Параметры:
//	ТабличныйДокумент - ТабличныйДокумент
//
// Возвращаемое значение:
//   ТаблицаЗначений
// 
Функция ТабличныйДокументВТаблицуЗначений(знач ТабличныйДокумент) Экспорт
	ОбластьЯчеек = ТабличныйДокумент.Область(1, 1, ТабличныйДокумент.ВысотаТаблицы, ТабличныйДокумент.ШиринаТаблицы);
	
	ИсточникДанных = Новый ОписаниеИсточникаДанных(ОбластьЯчеек);
	
	ПостроительОтчета = Новый ПостроительОтчета; 
	ПостроительОтчета.ИсточникДанных = ИсточникДанных;
	ПостроительОтчета.Выполнить();
	
	Возврат ПостроительОтчета.Результат.Выгрузить();
КонецФункции

#КонецОбласти

#Область ПрограммныйИнтерфейс_Запросы

// Получает временную таблицу из запроса. Обязательно должен использоваться МенеджерВременныхТаблиц запроса.
//
// Параметры:
//	Запрос - Запрос - Запрос, таблицу которого получаем
//	ИмяВременнойТаблицы - Строка - ИмяВременнойТаблицы
//
// Возвращаемое значение:
//	Таблица значений - Таблица значений, содержащая временную таблицу запроса
//
Функция СодержимоеВременнойТаблицы(знач Запрос, знач ИмяВременнойТаблицы) Экспорт
	ЗапросВТ = Новый Запрос ("ВЫБРАТЬ * ИЗ " + ИмяВременнойТаблицы);
	ЗапросВТ.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
	Возврат ЗапросВТ.Выполнить().Выгрузить();
КонецФункции

// Выгружает результат выполнения запроса в массив структур
//
// Параметры:
//	РезультатЗапроса	- РезультатЗапроса
//	УдалитьТипNULL		- Булево - удалять NULL из типизации значения колонки
//
// Возвращаемое значение:
//   Массив. Элемент массива Структура, где Ключ - имя колонки результата запроса
// 
Функция РезультатЗапросаВМассив(знач РезультатЗапроса, знач УдалитьТипNULL = Истина, знач Иерархия = Ложь) Экспорт
	ПараметрыКолонок = ПолучитьПараметрыКолонокПоРезультатуЗапроса(РезультатЗапроса, УдалитьТипNULL, Иерархия);
	
	МассивРезультат = Новый Массив;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ДанныеСтроки = ПолучитьДанныеСтрокиИзВыборкиПоПараметрам(Выборка, ПараметрыКолонок);
		МассивРезультат.Добавить(ДанныеСтроки);
	КонецЦикла;
	
	Возврат МассивРезультат;
КонецФункции

// Выгружает первую строку результата выполнения запроса в структуру
//
// Параметры:
//	РезультатЗапроса	- РезультатЗапроса
//	УдалитьТипNULL		- Булево - удалять NULL из типизации значения колонки
//
// Возвращаемое значение:
//   Структура. Ключ - имя колонки результата запроса
// 
Функция РезультатЗапросаВСтруктуру(знач РезультатЗапроса, знач УдалитьТипNULL = Истина, знач Иерархия = Ложь) Экспорт
	ПараметрыКолонок = ПолучитьПараметрыКолонокПоРезультатуЗапроса(РезультатЗапроса, УдалитьТипNULL, Иерархия);
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат ПолучитьПустыеДанныеСтрокиИзВыборкиПоПараметрам(ПараметрыКолонок);
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		ДанныеСтроки = ПолучитьДанныеСтрокиИзВыборкиПоПараметрам(Выборка, ПараметрыКолонок);
	КонецЕсли;
	
	Возврат ДанныеСтроки;
КонецФункции

// Выгружает результат выполнения запроса в соответствие структур
//
// Параметры:
//	РезультатЗапроса	- РезультатЗапроса
//	ПолеКлюча			- Строка - поле для получения ключа
//	УдалитьТипNULL		- Булево - удалять NULL из типизации значения колонки
//
// Возвращаемое значение:
//   Соответствие.
//		Ключ		- Произвольный - значение реквизит ПолеКлюча
//		Значение	- Структура - Ключ - имя колонки результата запроса
// 
Функция РезультатЗапросаВСоответствие(знач РезультатЗапроса, знач ПолеКлюча, знач УдалитьТипNULL = Истина, знач Иерархия = Ложь) Экспорт
	ПараметрыКолонок = ПолучитьПараметрыКолонокПоРезультатуЗапроса(РезультатЗапроса, УдалитьТипNULL, Иерархия);
		
	ДанныеРезультат = Новый Соответствие;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ДанныеСтроки = ПолучитьДанныеСтрокиИзВыборкиПоПараметрам(Выборка, ПараметрыКолонок);
		ДанныеРезультат.Вставить(Выборка[ПолеКлюча], ДанныеСтроки);
	КонецЦикла;
	
	Возврат ДанныеРезультат;
КонецФункции

// Выгружает результат выполнения запроса в соответствие массивов
//
// Параметры:
//	РезультатЗапроса	- РезультатЗапроса
//	ПолеКлюча			- Строка - поле для получения ключа
//	УдалитьТипNULL		- Булево - удалять NULL из типизации значения колонки
//	Иерархия			- Булево - заменить "_" на иерархию вложенных структур
//
// Возвращаемое значение:
//   Соответствие.
//		Ключ		- Произвольный - значение реквизит ПолеКлюча
//		Значение	- Массив - элемент массива Структура соотв. записи из запроса
//			Ключ - имя колонки результата запроса
// 
Функция РезультатЗапросаВСоответствиеМассивов(знач РезультатЗапроса, знач ПолеКлюча, знач УдалитьТипNULL = Истина, знач Иерархия = Ложь) Экспорт
	ПараметрыКолонок = ПолучитьПараметрыКолонокПоРезультатуЗапроса(РезультатЗапроса, УдалитьТипNULL, Иерархия);
	
	ДанныеРезультат = Новый Соответствие;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивДанных = ДанныеРезультат.Получить(Выборка[ПолеКлюча]);
		Если МассивДанных = Неопределено Тогда
			МассивДанных = Новый Массив;
			ДанныеРезультат.Вставить(Выборка[ПолеКлюча], МассивДанных);
		КонецЕсли;
		
		ДанныеСтроки = ПолучитьДанныеСтрокиИзВыборкиПоПараметрам(Выборка, ПараметрыКолонок);
		
		МассивДанных.Добавить(ДанныеСтроки);
	КонецЦикла;
	
	Возврат ДанныеРезультат;
КонецФункции

// Возвращает структуру с пустыми значениями по колонкам результата запроса
//
// Параметры:
//	РезультатЗапроса	- РезультатЗапроса
//	УдалитьТипNULL		- Булево - удалять NULL из типизации значения колонки
//
// Возвращаемое значение:
//   Структура
// 
Функция ПолучитьШаблонЭлементаРезультатаЗапроса(знач РезультатЗапроса, знач УдалитьТипNULL = Истина) Экспорт
	ШаблонЭлемента = Новый Структура;
	
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		ТипКолонки = Колонка.ТипЗначения;
		Если УдалитьТипNULL Тогда
			МассивТипов = ТипКолонки.Типы();
			ИндексNULL	= МассивТипов.Найти(Тип("Null"));
			Если ИндексNULL <> Неопределено Тогда
				МассивТипов.Удалить(ИндексNULL);
			КонецЕсли;
			
			ТипКолонки = Новый ОписаниеТипов(МассивТипов);
		КонецЕсли;
		
		ШаблонЭлемента.Вставить(Колонка.Имя, ТипКолонки.ПривестиЗначение(Неопределено));
	КонецЦикла;
	
	Возврат ШаблонЭлемента;
КонецФункции

#КонецОбласти

#Область ПрограммныйИнтерфейс_Устарело

// Устарел. Рекомендуется: ОбщегоНазначенияКлиентСервер.СвернутьМассив
//
// Удаляет из переданного массива неуникальные значения
// Является оберткой над методом ОбщегоНазначенияКлиентСервер.ДополнитьМассив
//
// Параметры:
//	МассивЗначений - Массив
//
Процедура УдалитьПовторяющиесяЭлементыМассива(МассивЗначений) Экспорт
	МассивЗначений = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивЗначений);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьПараметрыКолонокПоРезультатуЗапроса(знач РезультатЗапроса, знач УдалитьТипNULL = Истина, знач Иерархия = Ложь)
	ПараметрыКолонок = Новый Массив;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		ТипКолонки = Колонка.ТипЗначения;
		Если УдалитьТипNULL Тогда
			МассивТипов = ТипКолонки.Типы();
			ИндексNULL	= МассивТипов.Найти(Тип("Null"));
			Если ИндексNULL <> Неопределено Тогда
				МассивТипов.Удалить(ИндексNULL);
			КонецЕсли;
			
			ТипКолонки = Новый ОписаниеТипов(МассивТипов);
		КонецЕсли;
		
		НастройкаКолонки = Новый Структура("Имя,ПолныйПуть,ПустоеЗначение",
			Колонка.Имя,
			Колонка.Имя,
			ТипКолонки.ПривестиЗначение(Неопределено));
		
		Если Иерархия = Истина Тогда
			НастройкаКолонки.ПолныйПуть = СтрЗаменить(Колонка.Имя, "_", ".");
		КонецЕсли;
		
		ПараметрыКолонок.Добавить(НастройкаКолонки);
	КонецЦикла;
	
	Возврат ПараметрыКолонок;
КонецФункции

Функция ПолучитьДанныеСтрокиИзВыборкиПоПараметрам(знач Выборка, знач ПараметрыКолонок)
	ДанныеСтроки = Новый Структура;
	Для Каждого Настройка Из ПараметрыКолонок Цикл
		ОбщегоНазначенияПТБКлиентСервер.УстановитьСвойствоСтруктуры(ДанныеСтроки,
			Настройка.ПолныйПуть,
			Выборка[Настройка.Имя]);
	КонецЦикла;
		
	Возврат ДанныеСтроки;
КонецФункции

Функция ПолучитьПустыеДанныеСтрокиИзВыборкиПоПараметрам(знач ПараметрыКолонок)
	ДанныеСтроки = Новый Структура;
	Для Каждого Настройка Из ПараметрыКолонок Цикл
		ОбщегоНазначенияПТБКлиентСервер.УстановитьСвойствоСтруктуры(ДанныеСтроки,
			Настройка.ПолныйПуть,
			Настройка.ПустоеЗначение);
	КонецЦикла;
		
	Возврат ДанныеСтроки;
КонецФункции

#КонецОбласти
 

