
#Область ОписаниеИзменений

// 20.12.2021, Анисков А.А.
//	+ ТабличныйДокументВТаблицуЗначений
//	+ ПустоеЗначениеПоТипу

// 09.11.2021, Анисков А.А.
//	+ РезультатЗапросаВСоответствие
//	+ ПолучитьШаблонЭлементаРезультатаЗапроса

// 09.01.2020, Анисков А.А.
//	+ РезультатЗапросаВМассив
//	+ РезультатЗапросаВСтруктуру
//	+ МассивВТаблицуЗначений
//	+ ПроверитьУникальностьЭлементаСправочника

// 04.09.2019, Анисков А.А.
//	+ ЗаполнитьПоСтруктуре
//	+ УдалитьПовторяющиесяЭлементыМассива
//	+ ЕстьРеквизитОбъекта
//	+ ФоновыеЗаданияДоступны
//	+ ПолучитьТаблицуЗначенийПоДаннымСКД
//	+ СодержимоеВременнойТаблицы

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Заполняет реквизиты объекта значениями данных заполнения.
//	Заполнение возможно только в случае, когда в качестве ДанныхЗаполнения получена структура. 
//	Заполнены будут только те реквизиты, для которых в метаданных установлен флаг "ЗаполнятьИзДанныхЗаполнения"
//
// Параметры:
//	Объект - СправочникОбъект, ДокументОбъект и пр. - объект данных 1С для заполнения
//	ДанныеЗаполнения - Структура - значения заполнения с именами реквизитов и значениями,
//		таб. части передаются в виде массива структур
//	МетаданныеОбъекта - Метаданные - метаданные объекта для считывания реквизитов
//
Процедура ЗаполнитьПоСтруктуре(знач Объект, знач ДанныеЗаполнения, знач МетаданныеОбъекта = Неопределено) Экспорт

	Если Объект = Неопределено
		ИЛИ ТипЗнч(ДанныеЗаполнения) <> Тип("Структура")
		ИЛИ ДанныеЗаполнения.Количество() = 0 Тогда

		Возврат;

	КонецЕсли;

	Если МетаданныеОбъекта = Неопределено Тогда
		МетаданныеОбъекта = Объект.Метаданные();
	КонецЕсли;
	
	Если Метаданные.Справочники.Содержит(МетаданныеОбъекта)
		ИЛИ Метаданные.ПланыВидовХарактеристик.Содержит(МетаданныеОбъекта) Тогда
		РазличатьГруппыИЭлементы = МетаданныеОбъекта.Иерархический;
	Иначе
		РазличатьГруппыИЭлементы = Ложь;
	КонецЕсли;
	
	ЕстьТабЧасти = (ОбщегоНазначения.ЭтоСправочник(МетаданныеОбъекта)
		ИЛИ ОбщегоНазначения.ЭтоДокумент(МетаданныеОбъекта)
		ИЛИ Метаданные.Отчеты.Содержит(МетаданныеОбъекта)
		ИЛИ Метаданные.Обработки.Содержит(МетаданныеОбъекта)
		ИЛИ ОбщегоНазначения.ЭтоЗадача(МетаданныеОбъекта)
		ИЛИ ОбщегоНазначения.ЭтоБизнесПроцесс(МетаданныеОбъекта));
	
	МассивТабЧастей = Новый Массив;
	Если ЕстьТабЧасти Тогда
		Для Каждого МетаТабЧасть Из МетаданныеОбъекта.ТабличныеЧасти Цикл
			МассивТабЧастей.Добавить(МетаТабЧасть.Имя);
		КонецЦикла;
	КонецЕсли;

	// Реквизиты шапки документа
	СтруктураЗаполнения = Новый Структура;
	Для Каждого Реквизит Из МетаданныеОбъекта.СтандартныеРеквизиты Цикл
		Если Реквизит.ЗаполнятьИзДанныхЗаполнения
			И ДанныеЗаполнения.Свойство(Реквизит.Имя) Тогда
			СтруктураЗаполнения.Вставить(Реквизит.Имя);
		КонецЕсли;
	КонецЦикла;
	Для Каждого Реквизит Из МетаданныеОбъекта.Реквизиты Цикл
		Если Реквизит.ЗаполнятьИзДанныхЗаполнения
			И ДанныеЗаполнения.Свойство(Реквизит.Имя) Тогда
			Если РазличатьГруппыИЭлементы Тогда
				Если (Объект.ЭтоГруппа И Реквизит.Использование <> Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляЭлемента)
					ИЛИ
					(НЕ Объект.ЭтоГруппа И Реквизит.Использование <> Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы)
					Тогда
					СтруктураЗаполнения.Вставить(Реквизит.Имя);
				КонецЕсли;
			Иначе
				СтруктураЗаполнения.Вставить(Реквизит.Имя);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	ЗаполнитьЗначенияСвойств(СтруктураЗаполнения, ДанныеЗаполнения);
	ЗаполнитьЗначенияСвойств(Объект, СтруктураЗаполнения);
	
	// Табличные части документа
	Для Каждого ИмяТабличнойЧасти Из МассивТабЧастей Цикл
		Если НЕ ДанныеЗаполнения.Свойство(ИмяТабличнойЧасти) Тогда
			Продолжить;
		ИначеЕсли НЕ ТипЗнч(ДанныеЗаполнения[ИмяТабличнойЧасти]) = Тип("Массив") Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого СтруктураДанных Из ДанныеЗаполнения[ИмяТабличнойЧасти] Цикл
			НоваяСтрока = Объект[ИмяТабличнойЧасти].Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураДанных);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Проверяет существование реквизита у объекта метаданных по переданному имени
//
// Параметры:
//	ОбъектМетаданных - Тип: МетаданныеОбъект. 
//	ИмяРеквизита - Тип: Строка.
//
// Возвращаемое значение:
//	Булево
//
Функция ЕстьРеквизитОбъекта(знач ОбъектМетаданных, знач ИмяРеквизита) Экспорт
	РеквизитСуществует = Ложь;
	
	// Проверяем стандартные реквизиты
	РеквизитСуществует = ОбщегоНазначения.ЭтоСтандартныйРеквизит(ОбъектМетаданных.СтандартныеРеквизиты, ИмяРеквизита);
	
	// Проверяем обычные реквизиты
	Если НЕ РеквизитСуществует Тогда
		// Проверяем реквизиты объекта
		РеквизитСуществует = НЕ (ОбъектМетаданных.Реквизиты.Найти(ИмяРеквизита) = Неопределено);
	КонецЕсли;
	
	// Проверяем общие реквизиты
	Если НЕ РеквизитСуществует Тогда
		ОбщийРеквизит = Метаданные.ОбщиеРеквизиты.Найти(ИмяРеквизита);
		
		Если НЕ ОбщийРеквизит = Неопределено Тогда
			
			АвтоИспользование = (ОбщийРеквизит.АвтоИспользование = Метаданные.СвойстваОбъектов.АвтоИспользованиеОбщегоРеквизита.Использовать);
			
			ЭлементСостава = ОбщийРеквизит.Состав.Найти(ОбъектМетаданных);
			
			Если НЕ ЭлементСостава = Неопределено Тогда
				ИспользованиеОбщегоРеквизита = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита;
				РеквизитСуществует = (ЭлементСостава.Использование = ИспользованиеОбщегоРеквизита.Использовать
										ИЛИ (АвтоИспользование И ЭлементСостава.Использование = ИспользованиеОбщегоРеквизита.Авто));
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат РеквизитСуществует;
КонецФункции

// Возвращает признак доступности фонового задания. Использовать необходимо
// ОбщегоНазначенияУМТРКлиентСервер.ФоновыеЗаданияДоступны
//
// Возвращаемое значение:
//   Булево
// 
Функция ФоновыеЗаданияДоступны() Экспорт 
	ФоновыеЗаданияДоступны = Истина;
	
	ЭтоФайловаяИБ = ОбщегоНазначения.ИнформационнаяБазаФайловая();
	Если ЭтоФайловаяИБ Тогда
		СистИнфо = Новый СистемнаяИнформация;
		
		ЭтоПлатформа_8_3_6 = (ОбщегоНазначенияКлиентСервер.СравнитьВерсии(СистИнфо.ВерсияПриложения, "8.3.6.0") > 1);
		Если ЭтоПлатформа_8_3_6 Тогда
			ИсключенныеРежимы = Новый Массив;
			ИсключенныеРежимы.Добавить(Метаданные.СвойстваОбъектов.РежимСовместимости.Версия8_1);
			ИсключенныеРежимы.Добавить(Метаданные.СвойстваОбъектов.РежимСовместимости.Версия8_2_13);
			ИсключенныеРежимы.Добавить(Метаданные.СвойстваОбъектов.РежимСовместимости.Версия8_2_16);
			
			Если ИсключенныеРежимы.Найти(Метаданные.РежимСовместимости) <> Неопределено Тогда
				ФоновыеЗаданияДоступны = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ФоновыеЗаданияДоступны;
КонецФункции

// Проверяет уникальность элемента справочника по набору реквизитов
//
// Параметры:
//	ИмяОбъекта - Строка - Имя справочника
//  СтруктураРеквизитов - Структура - Структура с именами проверяемых реквизитов
//	Ссылка - Ссылка - Ссылка на элемент справочника
//
// Возвращаемое значение:
//	Булево 
//
Функция ПроверитьУникальностьЭлементаСправочника(знач ИмяОбъекта, знач СтруктураРеквизитов, знач Ссылка) Экспорт
    Запрос = Новый Запрос;
    Запрос.УстановитьПараметр("Ссылка", Ссылка); 
    Запрос.Текст = 
    "ВЫБРАТЬ ПЕРВЫЕ 1
    |    Спр.Ссылка
    |ИЗ
    |    Справочник." + ИмяОбъекта + " КАК Спр
    |ГДЕ
    |    Спр.Ссылка <> &Ссылка
    |";  
	
    Счетчик = 0;
	Для Каждого ЭлементСтруктуры Из СтруктураРеквизитов Цикл
		ИмяПараметра = "Пар" + Формат(Счетчик, "ЧГ=");
        Запрос.Текст = СтрШаблон("%1 И Спр.%2 = &%3",
			Запрос.Текст,
			ЭлементСтруктуры.Ключ,
			ИмяПараметра);
		
		
        Запрос.УстановитьПараметр(ИмяПараметра, ЭлементСтруктуры.Значение);
        Счетчик = Счетчик + 1;
	КонецЦикла;    
	
	
	Возврат Запрос.Выполнить().Пустой();
КонецФункции

// Возвращает пустое значение по типу
//
// Параметры:
//	ТипСсылки	- Тип
//
// Возвращаемое значение:
//   Произвольный
// 
Функция ПустоеЗначениеПоТипу(знач ТипСсылки) Экспорт
	МассивТипов		= ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТипСсылки);
	ОписаниеТипа	= Новый ОписаниеТипов(МассивТипов);
	
	Возврат ОписаниеТипа.ПривестиЗначение(Неопределено);
КонецФункции

#КонецОбласти

#Область ПрограммныйИнтерфейс_ОбработкаПолученияДанныхВыбора

// Формирования настроек для метода ПолучитьСписокДанныхВыбора
// Подробнее см. в методе ОбработкаПолученияДанныхВыбора текущего модуля
//
// Параметры:
//	Параметры		- Структура - Параметры обработчика ОбработкаПолученияДанныхВыбора
//	ОсновнаяТаблица	- Строка - имя основной таблицы данных. В запросе имеет синоним Т
//
// Возвращаемое значение:
//   Структура
//		ОсновнаяТаблица		- Строка - значение соотв. параметра
//		Параметры			- Струткура - значение соотв. параметра
//		Количество			- Число - количество строк для получения данных
//		ПоискПоНаименованию	- Булево - использовать значение СтрокаПоиска для поиск по наименованию
//			Правило подстановки в общий отбор - И
//		ПоляПоиска			- Массив - перечень полных имен полей для поиска по строке с условием ИЛИ между полями
//			Правило подстановки в общий отбор - И
//		Представление		- Массив - перечень полей для формирования представления
//			Представление формируется по шаблону Поле1 (Поле2[,ПолеN])
//		ПолеКартинок		- Строка - синоним поля для вычисления картинки из массива.
//			Если указано поле картинок, параметры КартинкаГруппы/КартинкаЭлемента игнорируется
//		МассивКартинок		- Массив - массив картинок для подстановки в результат выбора
//		КартинкаГруппы		- Картинка, Неопределено - картинка для подстановки в список данных выбора для группы
//		КартинкаЭлемента	- Картинка, Неопределено - картинка для подстановки в список данных выбора для элемента
//		ЗаменаПолей			- Структура - настройка замены полей при формировании текста отбора
//			Ключ		- Строка - имя поля отбора из параметров
//			Значение	- Строка - источник данных с указанием синонима таблицы. Основная таблица имеет синоним "Т"
//		ЗапросПоляВыбора	- Массив - строка для подстановки в поля выбора включая поле данных и синоним.
//			Например: "Т.Код КАК Код". По умолчанию система выбирает Ссылка, Наименование, ЭтоГруппа, ПометкаУдаления
//		ЗапросОтборы		- Массив - дополнительные отборы для подстановки в запрос.
//			Запросы соединяются через И. Параметры устанавливаются в настройку ЗапросПараметры
//		ЗапросСоединения	- Массив - дополнительные соединения к основной таблице запроса
//		ЗапросПараметры		- Структура - значения параметров для подстановки в запрос
//			Ключ		- Строка - имя параметра
//			Значение	- Произвольный - значение параметра
//
Функция НастройкиПолученияДанныхВыбора(знач Параметры, знач ОсновнаяТаблица) Экспорт
	Настройки = Новый Структура;
	Настройки.Вставить("ОсновнаяТаблица"		, ОсновнаяТаблица);
	Настройки.Вставить("Параметры"				, Параметры);
	Настройки.Вставить("Количество"				, 20);
	Настройки.Вставить("ПоискПоНаименованию"	, Истина);
	Настройки.Вставить("ПоляПоиска"				, Новый Массив);
	Настройки.Вставить("Представление"			, Новый Массив);
	Настройки.Вставить("ПолеКартинок"			, "");
	Настройки.Вставить("МассивКартинок"			, Новый Массив);
	Настройки.Вставить("КартинкаГруппы"			, Неопределено);
	Настройки.Вставить("КартинкаЭлемента"		, Неопределено);
	Настройки.Вставить("ЗаменаПолей"			, Новый Структура);
	Настройки.Вставить("ЗапросПоляВыбора"		, Новый Массив);
	Настройки.Вставить("ЗапросОтборы"			, Новый Массив);
	Настройки.Вставить("ЗапросСоединения"		, Новый Массив);
	Настройки.Вставить("ЗапросПараметры"		, Новый Структура);
	Настройки.Вставить("РежимОтладки"			, Ложь);
	
	Возврат Настройки;
КонецФункции

// Выполняет подготовку списка значений ДанныеВыбора для обработчика ОбработкаПолученияДанныхВыбора
// Подробнее см. в методе ОбработкаПолученияДанныхВыбора текущего модуля
//
// Ограничения:
//	- не учитывает поля поиска заданные в метаданных
//
// Параметры:
//	Настройки	- Структура - см. ОбщегоНазначенияПТБ.НастройкиПолученияДанныхВыбора
//
// Возвращаемое значение:
//   СписокЗначений - данные для возвращения в параметр ДанныеВыбора обработчика
//
Функция ПолучитьСписокДанныхВыбора(Настройки) Экспорт
	Параметры = Настройки.Параметры;

	КартинкаГруппы		= ?(ТипЗнч(Настройки.КартинкаГруппы) = Тип("Картинка"), Настройки.КартинкаГруппы, Неопределено);
	КартинкаЭлемента	= ?(ТипЗнч(Настройки.КартинкаЭлемента) = Тип("Картинка"), Настройки.КартинкаЭлемента, Неопределено);
	ЕстьПредставление	= (Настройки.Представление.Количество() > 0);
	ЕстьПолеКартинок	= ЗначениеЗаполнено(Настройки.ПолеКартинок);
	
	СтрокаПоиска 	= СокрЛП(Параметры.СтрокаПоиска);
	ДлинаПоиска		= Формат(СтрДлина(СтрокаПоиска), "ЧГ=");
	СтрокаПервые	= ?(Настройки.Количество > 0, " ПЕРВЫЕ " + Формат(Настройки.Количество, "ЧГ="), "");
	ПоискНачСтроки	= (Параметры.Свойство("СпособПоискаСтроки") И Параметры.СпособПоискаСтроки = СпособПоискаСтрокиПриВводеПоСтроке.Начало);
	ВыделитьСтроку	= (НЕ ПустаяСтрока(СтрокаПоиска));
	Иерархический	= Ложь;
	
	Запрос	= Новый Запрос;	
	Отборы	= Настройки.ЗапросОтборы;
	
	// поиск по наименованию
	Если Настройки.ПоискПоНаименованию И НЕ ПустаяСтрока(СтрокаПоиска) Тогда
		Если ПоискНачСтроки Тогда
			Отборы.Добавить("Т.Наименование >= &СтрокаПоиска");
			Отборы.Добавить(СтрШаблон("ПОДСТРОКА(Т.Наименование, 1, %1) = &СтрокаПоиска", ДлинаПоиска));
		Иначе 
			Отборы.Добавить("Т.Наименование ПОДОБНО &СтрокаПоиска");
		КонецЕсли;
	КонецЕсли;
	
	// поиск по дополнительным полям с условием "ИЛИ"
	ОтборыПоиск = Новый Массив;
	Если НЕ ПустаяСтрока(СтрокаПоиска) И Настройки.ПоляПоиска.Количество() > 0 Тогда
		Для Каждого ПолеПоиска Из Настройки.ПоляПоиска Цикл
			ПолеПоиска = СокрЛП(ПолеПоиска);
			Если НЕ ЗначениеЗаполнено(ПолеПоиска) Тогда
				Продолжить;
			КонецЕсли;
				
			Если ПоискНачСтроки Тогда
				ТекстОтбора = СтрШаблон("(%1 >= &СтрокаПоиска И ПОДСТРОКА(%1, 1, %2) = &СтрокаПоиска)", ПолеПоиска, ДлинаПоиска);
				ОтборыПоиск.Добавить(ТекстОтбора);
				
				Запрос.УстановитьПараметр("СтрокаПоиска", СтрокаПоиска);
			Иначе 
				ОтборыПоиск.Добавить(ПолеПоиска + " ПОДОБНО &СтрокаПоиска");
			КонецЕсли;
		КонецЦикла;
		
		Если ОтборыПоиск.Количество() > 0 Тогда
			СтрОтборПоиска = СтрСоединить(ОтборыПоиск, Символы.ПС + Символы.Таб + Символы.Таб + "ИЛИ ");
			Отборы.Добавить(СтрШаблон("(%1)", СтрОтборПоиска));
		КонецЕсли;
	КонецЕсли;
	
	// установим параметр строки поиска
	Если ПоискНачСтроки Тогда
		Запрос.УстановитьПараметр("СтрокаПоиска", СтрокаПоиска);
	Иначе 
		Запрос.УстановитьПараметр("СтрокаПоиска", "%" + СтрокаПоиска + "%");
	КонецЕсли;
	
	// отбор по иерархии
	Если Параметры.Свойство("ВыборГруппИЭлементов") Тогда
		Иерархический = Истина;
		Если Параметры.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Группы Тогда
			Отборы.Добавить("Т.ЭтоГруппа");
		ИначеЕсли Параметры.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы Тогда
			Отборы.Добавить("(НЕ Т.ЭтоГруппа)");
		КонецЕсли;
	КонецЕсли;
	
	// параметры Отбор
	Для Каждого КлючЗначение Из Параметры.Отбор Цикл
		ЗначениеПоля = КлючЗначение.Значение;
		ИмяПоля      = КлючЗначение.Ключ;
		
		Если Настройки.ЗаменаПолей.Свойство(ИмяПоля) Тогда
			ПолеЗапроса = Настройки.ЗаменаПолей[ИмяПоля];
		Иначе 
			ПолеЗапроса = "Т." + ИмяПоля;
		КонецЕсли;
		
		ИмяПараметра = "p_" + ИмяПоля;
		
		Если ТипЗнч(ЗначениеПоля) = Тип("Массив") Или ТипЗнч(ЗначениеПоля) = Тип("ФиксированныйМассив") Тогда
			ШаблонУсловия = "%1 В (&%2)";
		Иначе
			ШаблонУсловия = "%1 = &%2";
		КонецЕсли;
		
		ТекстУсловия = СтрШаблон(ШаблонУсловия, ПолеЗапроса, ИмяПараметра);
		Отборы.Добавить(ТекстУсловия);

		Запрос.УстановитьПараметр(ИмяПараметра, КлючЗначение.Значение);
	КонецЦикла;
	
	// поля запроса
	ПоляВыбора = Настройки.ЗапросПоляВыбора;
	ПоляВыбора.Добавить("Т.Ссылка КАК Ссылка");
	ПоляВыбора.Добавить("Т.ПометкаУдаления КАК ПометкаУдаления");
	ПоляВыбора.Добавить(?(Иерархический, "Т.ЭтоГруппа", "ЛОЖЬ") + " КАК ЭтоГруппа");
	
	// добавим представление ссылки, если не указан собственный набор полей
	Если НЕ ЕстьПредставление Тогда
		ПоляВыбора.Добавить("ПРЕДСТАВЛЕНИЕССЫЛКИ(Т.Ссылка) КАК Представление");
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ " + СтрокаПервые + "
	|	" + СтрСоединить(ПоляВыбора, "," + Символы.ПС + Символы.Таб) + "
	|ИЗ
	|	" + Настройки.ОсновнаяТаблица + " КАК Т
	|	" + СтрСоединить(Настройки.ЗапросСоединения, Символы.ПС + Символы.Таб) + "
	|ГДЕ
	|	" + СтрСоединить(Отборы, Символы.ПС + Символы.Таб + "И ") + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование"; 
	
	// установим параметры
	Для Каждого КлючИЗначение Из Настройки.ЗапросПараметры Цикл
		Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	// если режим отладки сообщим запрос и параметры
	Если Настройки.РежимОтладки = Истина Тогда
		ТекстСообщения = Новый Массив;
		ТекстСообщения.Добавить(Запрос.Текст);
		ТекстСообщения.Добавить("------------------");
		Для Каждого П Из Запрос.Параметры Цикл
			ТекстСообщения.Добавить(П.Ключ + ": " + Строка(П.Значение));
		КонецЦикла;
		
		ОбщегоНазначения.СообщитьПользователю(СтрСоединить(ТекстСообщения, Символы.ПС));
	КонецЕсли;
	
	// формируем данные выбора
	ДанныеВыбора = Новый СписокЗначений;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат ДанныеВыбора;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ЕстьПредставление Тогда
			Представление = ПредставлениеЭлементаДанныхВыбора(Выборка, Настройки.Представление);
		Иначе 
			Представление = Выборка.Представление;
		КонецЕсли;
		
		Если ВыделитьСтроку Тогда
			Результат = СтрНайтиИВыделитьОформлением(Представление, СтрокаПоиска);
			Если НЕ Результат = Неопределено Тогда
				Представление = Результат;
			КонецЕсли;
		КонецЕсли;
		
		ЗначениеКартинка = Неопределено;
		Если ЕстьПолеКартинок Тогда
			ИндексКартинки = Выборка[Настройки.ПолеКартинок];
			Если ТипЗнч(ИндексКартинки) = Тип("Число") И ИндексКартинки <= Настройки.МассивКартинок.ВГраница() Тогда
				ЗначениеКартинка = Настройки.МассивКартинок[ИндексКартинки];
			КонецЕсли;
		Иначе 
			ЗначениеКартинка = ?(Выборка.ЭтоГруппа, КартинкаГруппы, КартинкаЭлемента);
		КонецЕсли;
		
		ДанныеВыбора.Добавить(Выборка.Ссылка,
			Представление,
			Выборка.ПометкаУдаления,
			ЗначениеКартинка);
	КонецЦикла;	
	
	Возврат ДанныеВыбора;
КонецФункции

// Пример реализации обработчика ОбработкаПолученияДанныхВыбора
//
Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	ПараметрыОтбор = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "Отбор", Новый Структура);

    ЕстьОтборДействующийДоговор     = ПараметрыОтбор.Свойство("ДействующийДоговор");
    ЕстьОтборОсновнойДоговор        = ПараметрыОтбор.Свойство("ОсновнойДоговор");
	
	// поскольку безусловно надо отбирать по пользователю, отменяем стандартную обработку
	СтандартнаяОбработка = Ложь;
	
	// получим коллекцию настроек
	Настройки = ОбщегоНазначенияПТБ.НастройкиПолученияДанныхВыбора(Параметры, "Справочник.Контрагенты");
 
    // добавим соединение с регистром доступных контаргентов
    // запрос получения данных имеет условие РАЗЛИЧНЫЕ
    // однако стоит учитывать влияние настроек на производительность
    Настройки.ЗапросСоединения.Добавить("ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДоступныеКонтрагенты КАК ДоступныеКонтрагенты
    |   ПО Т.Ссылка = ДоступныеКонтрагенты.Контрагент
    |       И ДоступныеКонтрагенты.Пользователь = &Пользователь");
 
    // установим параметр Пользователь
    Настройки.ЗапросПараметры.Вставить("Пользователь", Пользователи.ТекущийПользователь());

    // если есть отбор по основному договору, сделаем соединение со справочником Договоры
    // с условием Основной = ИСТИНА
    ЕстьСоединениеДоговоры = (ЕстьОтборДействующийДоговор ИЛИ ЕстьОтборОсновнойДоговор);
    Если ЕстьСоединениеДоговоры Тогда
        Настройки.ЗапросСоединения.Добавить("ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Договоры КАК Договоры
        |   ПО Т.Ссылка = Договоры.Владелец");
    КонецЕсли;
	
	// отбор по действующему договору
    Если ЕстьОтборДействующийДоговор Тогда
        Настройки.ЗапросОтборы.Добавить("Договоры.ДатаОкончания <= &ТекущаяДата");
        Настройки.ЗапросПараметры.Вставить("ТекущаяДата", ТекущаяДатаСеанса());
    КонецЕсли;

	// отбор по основному договору
    Если ЕстьОтборОсновнойДоговор Тогда
        Настройки.ЗаменаПолей.Вставить("ОсновнойДоговор", "Договоры.Ссылка");
        Настройки.ЗапросОтборы.Добавить("Договоры.Основной = ИСТИНА");
    КонецЕсли;
 
    ДанныеВыбора = ОбщегоНазначенияПТБ.ПолучитьСписокДанныхВыбора(Настройки);
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс_ТаблицаЗначений

// Выполняет инициализацию компоновщика по переданной схеме компоновки и значению отбора
//
// Параметры:
//	СхемаКомпоновкиДанных	- СхемаКомпоновкиДанных
//	Компоновщик				- КомпоновщикНастроекКомпоновкиДанных
//	ОтборXML				- Строка
//
Процедура ИнициализацияКомпоновщика(знач СхемаКомпоновкиДанных, знач Компоновщик, знач ОтборXML = "") Экспорт
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено);
	
	Настройки	= СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	URLСхемы	= ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, АдресХранилища);
	
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемы);
	
	Компоновщик.Инициализировать(ИсточникНастроек);
	Компоновщик.ЗагрузитьНастройки(Настройки);
	
	Если НЕ ПустаяСтрока(ОтборXML) Тогда
		Компоновщик.Настройки.Отбор.Элементы.Очистить();
		
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку(ОтборXML);
		ОтборКомпоновкиДанных = СериализаторXDTO.ПрочитатьXML(ЧтениеXML);
		
		Если ТипЗнч(ОтборКомпоновкиДанных) = Тип("ОтборКомпоновкиДанных") Тогда
			ОбщегоНазначенияПТБКлиентСервер.ЗаполнитьОтборКомпоновкиДанныхПоИсточнику(
				Компоновщик.Настройки.Отбор,
				ОтборКомпоновкиДанных);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Исполняет сбор данных по настроенной схеме компоновки данных и возвращает таблицу значений
//
// Параметры:
//	СхемаКомпоновкиДанных	- СхемаКомпоновкиДанных
//	Компоновщик				- КомпоновщикНастроекКомпоновкиДанных
//	ВнешниеНаборыДанных		- Структура
//		Ключ структуры соответствует имени внешнего набора данных. Значение структуры - внешнему набору данных
//
// Возвращаемое значение:
//	ТаблицаЗначений
//
Функция ПолучитьТаблицуЗначенийПоДаннымСКД(знач СхемаКомпоновкиДанных, знач Компоновщик, знач ВнешниеНаборыДанных = Неопределено) Экспорт
	ТаблицаДанных = Новый ТаблицаЗначений;
	
	КомпоновщикМакета		= Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки			= КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, 
		Компоновщик.ПолучитьНастройки(),,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	
	Если ТипЗнч(ВнешниеНаборыДанных) = Тип("Структура") Тогда
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных);
	Иначе 
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	КонецЕсли;
		
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ТаблицаДанных);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	Возврат ТаблицаДанных;
КонецФункции

// Преобразует массив структур в таблицу значений.
//
// Параметры:
//	МассивСтрок - Массив - Массив структур
//
// Возвращаемое значение:
//	ТаблицаЗначений - Таблица значений, полученная в результате преобразования массива структур строк 
//
Функция МассивВТаблицуЗначений(знач МассивСтрок) Экспорт
    ТаблицаЗначений = Новый ТаблицаЗначений;
    
    Для Каждого ЭлементМассива Из МассивСтрок Цикл
        Если ТаблицаЗначений.Колонки.Количество() = 0 Тогда
            Для Каждого КлючИЗначение Из ЭлементМассива Цикл
                ТаблицаЗначений.Колонки.Добавить(КлючИЗначение.Ключ);
            КонецЦикла;
        КонецЕсли;
        
        НоваяСтрока = ТаблицаЗначений.Добавить();
		Для Каждого КлючИЗначение Из ЭлементМассива Цикл
			Если ТаблицаЗначений.Колонки.Найти(КлючИЗначение.Ключ) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
        КонецЦикла;
    КонецЦикла;
    
    Возврат ТаблицаЗначений;
КонецФункции

// Преобразовывает табличный документ в таблицу значений
//
// Параметры:
//	ТабличныйДокумент - ТабличныйДокумент
//
// Возвращаемое значение:
//   ТаблицаЗначений
// 
Функция ТабличныйДокументВТаблицуЗначений(знач ТабличныйДокумент) Экспорт
	ОбластьЯчеек = ТабличныйДокумент.Область(1, 1, ТабличныйДокумент.ВысотаТаблицы, ТабличныйДокумент.ШиринаТаблицы);
	
	ИсточникДанных = Новый ОписаниеИсточникаДанных(ОбластьЯчеек);
	
	ПостроительОтчета = Новый ПостроительОтчета; 
	ПостроительОтчета.ИсточникДанных = ИсточникДанных;
	ПостроительОтчета.Выполнить();
	
	Возврат ПостроительОтчета.Результат.Выгрузить();
КонецФункции

#КонецОбласти

#Область ПрограммныйИнтерфейс_Запросы

// Получает временную таблицу из запроса. Обязательно должен использоваться МенеджерВременныхТаблиц запроса.
//
// Параметры:
//	Запрос - Запрос - Запрос, таблицу которого получаем
//	ИмяВременнойТаблицы - Строка - ИмяВременнойТаблицы
//
// Возвращаемое значение:
//	Таблица значений - Таблица значений, содержащая временную таблицу запроса
//
Функция СодержимоеВременнойТаблицы(знач Запрос, знач ИмяВременнойТаблицы) Экспорт
	ЗапросВТ = Новый Запрос ("ВЫБРАТЬ * ИЗ " + ИмяВременнойТаблицы);
	ЗапросВТ.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
	Возврат ЗапросВТ.Выполнить().Выгрузить();
КонецФункции

// Выгружает результат выполнения запроса в массив структур
//
// Параметры:
//	РезультатЗапроса	- РезультатЗапроса
//	УдалитьТипNULL		- Булево - удалять NULL из типизации значения колонки
//
// Возвращаемое значение:
//   Массив. Элемент массива Структура, где Ключ - имя колонки результата запроса
// 
Функция РезультатЗапросаВМассив(знач РезультатЗапроса, знач УдалитьТипNULL = Истина, знач Иерархия = Ложь) Экспорт
	ПараметрыКолонок = ПолучитьПараметрыКолонокПоРезультатуЗапроса(РезультатЗапроса, УдалитьТипNULL, Иерархия);
	
	МассивРезультат = Новый Массив;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ДанныеСтроки = ПолучитьДанныеСтрокиИзВыборкиПоПараметрам(Выборка, ПараметрыКолонок);
		МассивРезультат.Добавить(ДанныеСтроки);
	КонецЦикла;
	
	Возврат МассивРезультат;
КонецФункции

// Выгружает первую строку результата выполнения запроса в структуру
//
// Параметры:
//	РезультатЗапроса	- РезультатЗапроса
//	УдалитьТипNULL		- Булево - удалять NULL из типизации значения колонки
//
// Возвращаемое значение:
//   Структура. Ключ - имя колонки результата запроса
// 
Функция РезультатЗапросаВСтруктуру(знач РезультатЗапроса, знач УдалитьТипNULL = Истина, знач Иерархия = Ложь) Экспорт
	ПараметрыКолонок = ПолучитьПараметрыКолонокПоРезультатуЗапроса(РезультатЗапроса, УдалитьТипNULL, Иерархия);
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат ПолучитьПустыеДанныеСтрокиИзВыборкиПоПараметрам(ПараметрыКолонок);
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		ДанныеСтроки = ПолучитьДанныеСтрокиИзВыборкиПоПараметрам(Выборка, ПараметрыКолонок);
	КонецЕсли;
	
	Возврат ДанныеСтроки;
КонецФункции

// Выгружает результат выполнения запроса в соответствие структур
//
// Параметры:
//	РезультатЗапроса	- РезультатЗапроса
//	ПолеКлюча			- Строка - поле для получения ключа
//	УдалитьТипNULL		- Булево - удалять NULL из типизации значения колонки
//
// Возвращаемое значение:
//   Соответствие.
//		Ключ		- Произвольный - значение реквизит ПолеКлюча
//		Значение	- Структура - Ключ - имя колонки результата запроса
// 
Функция РезультатЗапросаВСоответствие(знач РезультатЗапроса, знач ПолеКлюча, знач УдалитьТипNULL = Истина, знач Иерархия = Ложь) Экспорт
	ПараметрыКолонок = ПолучитьПараметрыКолонокПоРезультатуЗапроса(РезультатЗапроса, УдалитьТипNULL, Иерархия);
		
	ДанныеРезультат = Новый Соответствие;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ДанныеСтроки = ПолучитьДанныеСтрокиИзВыборкиПоПараметрам(Выборка, ПараметрыКолонок);
		ДанныеРезультат.Вставить(Выборка[ПолеКлюча], ДанныеСтроки);
	КонецЦикла;
	
	Возврат ДанныеРезультат;
КонецФункции

// Выгружает результат выполнения запроса в соответствие массивов
//
// Параметры:
//	РезультатЗапроса	- РезультатЗапроса
//	ПолеКлюча			- Строка - поле для получения ключа
//	УдалитьТипNULL		- Булево - удалять NULL из типизации значения колонки
//	Иерархия			- Булево - заменить "_" на иерархию вложенных структур
//
// Возвращаемое значение:
//   Соответствие.
//		Ключ		- Произвольный - значение реквизит ПолеКлюча
//		Значение	- Массив - элемент массива Структура соотв. записи из запроса
//			Ключ - имя колонки результата запроса
// 
Функция РезультатЗапросаВСоответствиеМассивов(знач РезультатЗапроса, знач ПолеКлюча, знач УдалитьТипNULL = Истина, знач Иерархия = Ложь) Экспорт
	ПараметрыКолонок = ПолучитьПараметрыКолонокПоРезультатуЗапроса(РезультатЗапроса, УдалитьТипNULL, Иерархия);
	
	ДанныеРезультат = Новый Соответствие;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивДанных = ДанныеРезультат.Получить(Выборка[ПолеКлюча]);
		Если МассивДанных = Неопределено Тогда
			МассивДанных = Новый Массив;
			ДанныеРезультат.Вставить(Выборка[ПолеКлюча], МассивДанных);
		КонецЕсли;
		
		ДанныеСтроки = ПолучитьДанныеСтрокиИзВыборкиПоПараметрам(Выборка, ПараметрыКолонок);
		
		МассивДанных.Добавить(ДанныеСтроки);
	КонецЦикла;
	
	Возврат ДанныеРезультат;
КонецФункции

// Возвращает структуру с пустыми значениями по колонкам результата запроса
//
// Параметры:
//	РезультатЗапроса	- РезультатЗапроса
//	УдалитьТипNULL		- Булево - удалять NULL из типизации значения колонки
//
// Возвращаемое значение:
//   Структура
// 
Функция ПолучитьШаблонЭлементаРезультатаЗапроса(знач РезультатЗапроса, знач УдалитьТипNULL = Истина) Экспорт
	ШаблонЭлемента = Новый Структура;
	
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		ТипКолонки = Колонка.ТипЗначения;
		Если УдалитьТипNULL Тогда
			МассивТипов = ТипКолонки.Типы();
			ИндексNULL	= МассивТипов.Найти(Тип("Null"));
			Если ИндексNULL <> Неопределено Тогда
				МассивТипов.Удалить(ИндексNULL);
			КонецЕсли;
			
			ТипКолонки = Новый ОписаниеТипов(МассивТипов);
		КонецЕсли;
		
		ШаблонЭлемента.Вставить(Колонка.Имя, ТипКолонки.ПривестиЗначение(Неопределено));
	КонецЦикла;
	
	Возврат ШаблонЭлемента;
КонецФункции

#КонецОбласти

#Область ПрограммныйИнтерфейс_Устарело

// Устарел. Рекомендуется: ОбщегоНазначенияКлиентСервер.СвернутьМассив
//
// Удаляет из переданного массива неуникальные значения
// Является оберткой над методом ОбщегоНазначенияКлиентСервер.ДополнитьМассив
//
// Параметры:
//	МассивЗначений - Массив
//
Процедура УдалитьПовторяющиесяЭлементыМассива(МассивЗначений) Экспорт
	МассивЗначений = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивЗначений);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьПараметрыКолонокПоРезультатуЗапроса(знач РезультатЗапроса, знач УдалитьТипNULL = Истина, знач Иерархия = Ложь)
	ПараметрыКолонок = Новый Массив;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		ТипКолонки = Колонка.ТипЗначения;
		Если УдалитьТипNULL Тогда
			МассивТипов = ТипКолонки.Типы();
			ИндексNULL	= МассивТипов.Найти(Тип("Null"));
			Если ИндексNULL <> Неопределено Тогда
				МассивТипов.Удалить(ИндексNULL);
			КонецЕсли;
			
			ТипКолонки = Новый ОписаниеТипов(МассивТипов);
		КонецЕсли;
		
		НастройкаКолонки = Новый Структура("Имя,ПолныйПуть,ПустоеЗначение",
			Колонка.Имя,
			Колонка.Имя,
			ТипКолонки.ПривестиЗначение(Неопределено));
		
		Если Иерархия = Истина Тогда
			НастройкаКолонки.ПолныйПуть = СтрЗаменить(Колонка.Имя, "_", ".");
		КонецЕсли;
		
		ПараметрыКолонок.Добавить(НастройкаКолонки);
	КонецЦикла;
	
	Возврат ПараметрыКолонок;
КонецФункции

Функция ПолучитьДанныеСтрокиИзВыборкиПоПараметрам(знач Выборка, знач ПараметрыКолонок)
	ДанныеСтроки = Новый Структура;
	Для Каждого Настройка Из ПараметрыКолонок Цикл
		ОбщегоНазначенияПТБКлиентСервер.УстановитьСвойствоСтруктуры(ДанныеСтроки,
			Настройка.ПолныйПуть,
			Выборка[Настройка.Имя]);
	КонецЦикла;
		
	Возврат ДанныеСтроки;
КонецФункции

Функция ПолучитьПустыеДанныеСтрокиИзВыборкиПоПараметрам(знач ПараметрыКолонок)
	ДанныеСтроки = Новый Структура;
	Для Каждого Настройка Из ПараметрыКолонок Цикл
		ОбщегоНазначенияПТБКлиентСервер.УстановитьСвойствоСтруктуры(ДанныеСтроки,
			Настройка.ПолныйПуть,
			Настройка.ПустоеЗначение);
	КонецЦикла;
		
	Возврат ДанныеСтроки;
КонецФункции

Функция ПредставлениеЭлементаДанныхВыбора(знач Выборка, знач ПоляПредставления)
	Представление = Выборка[ПоляПредставления[0]];
	
	ДопДанные = Новый Массив;
	Для Индекс = 1 По ПоляПредставления.ВГраница() Цикл
		ДопДанные.Добавить(Выборка[ПоляПредставления[Индекс]]);
	КонецЦикла;
	
	Если ДопДанные.Количество() > 0 Тогда
		Представление = СтрШаблон("%1 (%2)", Представление, СтрСоединить(ДопДанные, "; "));
	КонецЕсли;
	
	Возврат Представление;
КонецФункции

#КонецОбласти
 

