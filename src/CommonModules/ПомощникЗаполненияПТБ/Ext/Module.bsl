// Copyright (c) 2023, ООО ПрогТехБизнес
// Лицензия Attribution 4.0 International (CC BY 4.0)

#Область ПрограммныйИнтерфейс

// Выполняет инициализацию компоновщика на основании переданной схемы, а также добавляет 
// в Настройки.Отбор настройку отбора переданную в параметре ОтборXML
//
// Параметры:
//	Форма 					- УправляемаяФорма
//	ИмяРеквизитаКомпоновщик	- Строка - имя реквизита с типом КомпоновщикНастроекКомпоновкиДанных
//	СхемаКомпоновкиДанных	- СхемаКомпоновкиДанных
//	ОтборXML				- Строка - сериализованный в строку объект ОтборКомпоновкиДанных
// 
Процедура ИнициализацияКомпоновщикаНастроек(Форма, знач ИмяРеквизитаКомпоновщик, знач СхемаКомпоновкиДанных, знач ОтборXML = "") Экспорт
	Если НЕ ТипЗнч(СхемаКомпоновкиДанных) = Тип("СхемаКомпоновкиДанных") Тогда
		ВызватьИсключение НСтр("ru='При инициализации помощника заполнения не указана СКД.'");
	КонецЕсли;
	
	// добавим реквизит для представления настройки отбора и хранения адреса схемы
	ПроверитьСуществованиеРеквизитовПомощникаЗаполнения(Форма, ИмяРеквизитаКомпоновщик);
	
	// инициализация СКД и настройка компоновщика
	Настройки	= СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	URLСхемы	= ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Форма.УникальныйИдентификатор);
	
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемы);
	
	Компоновщик = Форма[ИмяРеквизитаКомпоновщик];
	Компоновщик.Инициализировать(ИсточникНастроек);
	Компоновщик.ЗагрузитьНастройки(Настройки);
	
	Если НЕ ПустаяСтрока(ОтборXML) Тогда
		Компоновщик.Настройки.Отбор.Элементы.Очистить();
		
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку(ОтборXML);
		ОтборКомпоновкиДанных = СериализаторXDTO.ПрочитатьXML(ЧтениеXML);
		
		Если ТипЗнч(ОтборКомпоновкиДанных) = Тип("ОтборКомпоновкиДанных") Тогда
			ОбщегоНазначенияПТБКлиентСервер.ЗаполнитьОтборКомпоновкиДанныхПоИсточнику(
				Компоновщик.Настройки.Отбор,
				ОтборКомпоновкиДанных);
		КонецЕсли;
	КонецЕсли;
	
	// присвоение переменных
	ПомощникЗаполненияПТБКлиентСервер.ОбновитьПредставлениеОтбора(Форма, ИмяРеквизитаКомпоновщик);
	Форма[ИмяРеквизитаКомпоновщик + "АдресХранилищаСКД"] = URLСхемы;
КонецПроцедуры

// Выполняет настройку переданной группы и добавляет в нее настройку для отбора
//
// Параметры:
//	Форма 					- УправляемаяФорма
//	ИмяРеквизитаКомпоновщик	- Строка - имя реквизита с типом КомпоновщикНастроекКомпоновкиДанных
//	ГруппаВладелец			- ЭлементФормы - элемент формы с типом "ГруппаФормы"
//	КомандаВыбораНастройки	- Булево - следует ли добавлять на форму команду выбора сохраненной настройки
// 
Процедура ДобавитьПолеНастройкиОтбора(Форма, знач ИмяРеквизитаКомпоновщик, знач ГруппаВладелец, знач КомандаВыбораНастройки = Ложь) Экспорт 
	ЭлементВладелец = Форма.Элементы.Найти(ГруппаВладелец);
	Если ЭлементВладелец = Неопределено Тогда
		ВызватьИсключение НСтр("ru='При добавлении поля настройки не верно указана группа.'");
	КонецЕсли;
	
	// настроим внешний вид группы
	Если ТипЗнч(ЭлементВладелец) = Тип("ГруппаФормы") И ЭлементВладелец.Вид = ВидГруппыФормы.ОбычнаяГруппа Тогда
		ЭлементВладелец.Группировка 				= ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		ЭлементВладелец.ЦветФона					= ЦветаСтиля.ЦветФонаГруппыПомощникЗаполнения;
		ЭлементВладелец.Отображение					= ОтображениеОбычнойГруппы.Нет;
		ЭлементВладелец.РастягиватьПоГоризонтали	= Истина;
		ЭлементВладелец.ОтображатьЗаголовок			= Ложь;
	КонецЕсли;
	
	Если КомандаВыбораНастройки = Истина Тогда
		//добавим команду выбора настройки 
		Если Форма.Элементы.Найти(ИмяРеквизитаКомпоновщик + "_КартинкаВыбор") = Неопределено Тогда
			КартинкаОтбор = Форма.Элементы.Добавить(ИмяРеквизитаКомпоновщик + "_КартинкаВыбор", Тип("ДекорацияФормы"), ЭлементВладелец);
			КартинкаОтбор.Вид		= ВидДекорацииФормы.Картинка;
			КартинкаОтбор.Высота	= 1;
			КартинкаОтбор.Ширина	= 2;
			КартинкаОтбор.Картинка	= БиблиотекаКартинок.ЗагрузитьНастройкиОтчета; 
			КартинкаОтбор.Гиперссылка 	= Истина;         
			КартинкаОтбор.Подсказка 	= НСтр("ru='Выбрать настройку'");
			КартинкаОтбор.УстановитьДействие("Нажатие", "Подключаемый_ПомощникЗаполненияВыборНастройкиНажатие");
		КонецЕсли;
	КонецЕсли;
	
	// добавим картинку отбора
	Если Форма.Элементы.Найти(ИмяРеквизитаКомпоновщик + "_КартинкаОтбор") = Неопределено Тогда
		КартинкаОтбор = Форма.Элементы.Добавить(ИмяРеквизитаКомпоновщик + "_КартинкаОтбор", Тип("ДекорацияФормы"), ЭлементВладелец);
		КартинкаОтбор.Вид		= ВидДекорацииФормы.Картинка;
		КартинкаОтбор.Высота	= 1;
		КартинкаОтбор.Ширина	= 2;
		КартинкаОтбор.Картинка	= БиблиотекаКартинок.ОтборКомпоновкиДанных;
	КонецЕсли;
	
	// добавим надпись отбора
	Если Форма.Элементы.Найти(ИмяРеквизитаКомпоновщик + "_НадписьОтбор") = Неопределено Тогда
		НадписьОтбор = Форма.Элементы.Добавить(ИмяРеквизитаКомпоновщик + "_НадписьОтбор", Тип("ПолеФормы"), ЭлементВладелец);
		НадписьОтбор.Вид		 				= ВидПоляФормы.ПолеНадписи;
		НадписьОтбор.ПутьКДанным				= ПомощникЗаполненияПТБКлиентСервер.ИмяРеквизитаПредставление(ИмяРеквизитаКомпоновщик);
		НадписьОтбор.Гиперссылка				= Истина;
		НадписьОтбор.ПоложениеЗаголовка			= ПоложениеЗаголовкаЭлементаФормы.Нет;
		НадписьОтбор.РастягиватьПоГоризонтали	= Истина;
		НадписьОтбор.АвтоМаксимальнаяШирина		= Ложь;
		НадписьОтбор.УстановитьДействие("Нажатие", "Подключаемый_ПомощникЗаполненияОтборНажатие");
	КонецЕсли;  
	
КонецПроцедуры

// Выполняет сбор данных на основе СКД, компоновщика и переданных параметров
//
// Параметры:
//	Форма 					- УправляемаяФорма ИЛИ
//								- Структура с ключами
//									"ИмяСхемыКомпоновки"  - содержит название макета СКД,
//									"ПолноеИмяМетаданные" - содержит имя объекта метаданных в виде "Обработка.НазваниеОбработки"
//	ИмяРеквизитаКомпоновщик	- Строка - имя реквизита с типом КомпоновщикНастроекКомпоновкиДанных
//	Поля					- Массив - имена полей для считывания
//		Если в настройке компоновки существует группировка компоновки данных,
//		то используется структура по умолчанию. Иначе структура будет сформирована
//		из переданных полей		
//	ПараметрыДанных			- Структура - значения параметров данных для установки в компоновщик
//		Ключ		- Строка - имя параметра
//		Значение	- Произвольный - значение параметра
//	Отбор					- ОтборКомпоновкиДанных - настройка отборов, которые будут установлены
//		перед выполнением запроса
//	Порядок					- Соответствие - настройка сортировки данных результирующей таблицы
//		Ключ		- Строка - имя поля, возможно использовать поля через точку
//		Значение	- Строка - ВОЗР или УБЫВ для настройка порядка
//	Ресурсы					- Массив - имена полей ресурсов
//	ВнешниеНаборы			- Структура - внешние наборы данных для передачи в СКД
//	ОтборНаГруппировку		- Булево - накладывать переданные отборы на верхний уровень или группировку
//
// Возвращаемое значение:
//   ТаблицаЗначений
//		Список колонок соответствует переданному параметру Поля
// 
Функция ПолучитьТаблицуЗаполнения(Форма, знач ИмяРеквизитаКомпоновщик, знач Поля,
		знач ПараметрыДанных = Неопределено,
		знач Отбор = Неопределено,
		знач Порядок = Неопределено,
		знач Ресурсы = Неопределено,
		знач ВнешниеНаборы = Неопределено,
		знач ОтборНаГруппировку = Ложь) Экспорт

	ЕстьИмяРеквизитаКомпоновщик = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, ИмяРеквизитаКомпоновщик);
	Если ЕстьИмяРеквизитаКомпоновщик Тогда
		АдресХранилищаСКД = ПомощникЗаполненияПТБКлиентСервер.ИмяРеквизитаАдресХранилища(ИмяРеквизитаКомпоновщик);
		СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(Форма[АдресХранилищаСКД]);
	Иначе
		ИмяСхемыКомпоновки  = Форма["ИмяСхемыКомпоновки"];
		ПолноеИмяМетаданные = Форма["ПолноеИмяМетаданные"];
	
		СхемаКомпоновкиДанных = ПолучитьСхемуКомпоновкиПоИмени(ПолноеИмяМетаданные, ИмяСхемыКомпоновки);
	КонецЕсли;                                                                                  
	
	Если НЕ ТипЗнч(ПараметрыДанных) = Тип("Структура") Тогда
		ПараметрыДанных = Новый Структура;
	КонецЕсли;
	Если НЕ ТипЗнч(Порядок) = Тип("Соответствие") Тогда
		Порядок = Новый Соответствие;
	КонецЕсли;
	Если НЕ ТипЗнч(Ресурсы) = Тип("Массив") Тогда
		Ресурсы = Новый Массив;
	КонецЕсли;
	Для Каждого КлючИЗначение Из Порядок Цикл
		Если НЕ Поля.Найти(КлючИЗначение.Ключ) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Поля.Добавить(КлючИЗначение.Ключ);
	КонецЦикла;
	
	// Инициализация СКД и компоновщика
	КомпоновщикНастроек	= Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	
	Если ЕстьИмяРеквизитаКомпоновщик Тогда
		КомпоновщикНастроек.ЗагрузитьНастройки(Форма[ИмяРеквизитаКомпоновщик].ПолучитьНастройки());
	КонецЕсли;
	
	НастройкиКомпоновки = КомпоновщикНастроек.Настройки;
	
	// Параметры СКД
	Для Каждого КлючИЗначение Из ПараметрыДанных Цикл
		ОбщегоНазначенияПТБКлиентСервер.УстановитьПараметр(НастройкиКомпоновки, КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	// Параметры вывода
	ОбщегоНазначенияПТБКлиентСервер.УстановитьПараметрВывода(НастройкиКомпоновки, "ВертикальноеРасположениеОбщихИтогов", РасположениеИтоговКомпоновкиДанных.Нет);
	ОбщегоНазначенияПТБКлиентСервер.УстановитьПараметрВывода(НастройкиКомпоновки, "ГоризонтальноеРасположениеОбщихИтогов", РасположениеИтоговКомпоновкиДанных.Нет);
	
	// Выбранные поля
	Для Каждого ИмяПоля Из Поля Цикл
		ОбщегоНазначенияПТБКлиентСервер.ДобавитьВыбранноеПоле(НастройкиКомпоновки, ИмяПоля);
	КонецЦикла;
	
	//Ресурсы
	Для Каждого ИмяРесурса Из Ресурсы Цикл
		ОбщегоНазначенияПТБКлиентСервер.ДобавитьВыбранноеПоле(НастройкиКомпоновки, ИмяРесурса);
	КонецЦикла;

	// Группировка
	Если НастройкиКомпоновки.Структура.Количество() = 0 Тогда
		ГруппировкаКомпоновки = НастройкиКомпоновки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		ГруппировкаКомпоновки.Использование = Истина;
		Для Каждого ИмяГруппировки Из Поля Цикл
			ПолеГруппировки = ГруппировкаКомпоновки.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
			ПолеГруппировки.Использование	= Истина;
			ПолеГруппировки.Поле			= Новый ПолеКомпоновкиДанных(ИмяГруппировки);
			ПолеГруппировки.ТипГруппировки	= ТипГруппировкиКомпоновкиДанных.Элементы;
		КонецЦикла;
		ОбщегоНазначенияПТБКлиентСервер.ДобавитьАвтоВыбранноеПоле(ГруппировкаКомпоновки.Выбор);
	Иначе 
		ГруппировкаКомпоновки = НастройкиКомпоновки.Структура[0];
	КонецЕсли;
	
	// Отборы
	Если ТипЗнч(Отбор) = Тип("ОтборКомпоновкиДанных") Тогда
		ОтборПолучатель = ?(ОтборНаГруппировку = Истина, ГруппировкаКомпоновки.Отбор, НастройкиКомпоновки.Отбор);
		ОбщегоНазначенияПТБКлиентСервер.ЗаполнитьОтборКомпоновкиДанныхПоИсточнику(ОтборПолучатель, Отбор);
	КонецЕсли;
	
	// Порядок
	Для Каждого КлючИЗначение Из Порядок Цикл
		ЭлементПорядок = НастройкиКомпоновки.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
		ЭлементПорядок.Поле	= Новый ПолеКомпоновкиДанных(КлючИЗначение.Ключ);
		ЭлементПорядок.ТипУпорядочивания	= ?(НРег(КлючИЗначение.Значение) = "убыв",
			НаправлениеСортировкиКомпоновкиДанных.Убыв,
			НаправлениеСортировкиКомпоновкиДанных.Возр);
	КонецЦикла;
	
	// Таблица данных
	Возврат ОбщегоНазначенияПТБ.ПолучитьТаблицуЗначенийПоДаннымСКД(СхемаКомпоновкиДанных, КомпоновщикНастроек, ВнешниеНаборы); 
	
КонецФункции

// Выполняет сериализацию настройки отбора компоновщика в строку
// Используется Компоновщик.Настройки.Отбор
//
// Параметры:
//	Форма 					- УправляемаяФорма
//	ИмяРеквизитаКомпоновщик	- Строка - имя реквизита с типом КомпоновщикНастроекКомпоновкиДанных
//
// Возвращаемое значение:
//   Строка
// 
Функция ПолучитьСтрокуДляСохраненияОтбора(Форма, знач ИмяРеквизитаКомпоновщик) Экспорт
	Возврат ОбщегоНазначения.ЗначениеВСтрокуXML(Форма[ИмяРеквизитаКомпоновщик].Настройки.Отбор);
КонецФункции

// Формирует схему компоновки данных по переданному тексту запроса
//
// Параметры:
//	ТекстЗапроса 	- Строка - текст запроса
//	ВыбранныеПоля	- Массив, Структура, Неопределено - перечень полей для выбора данных
//		Массив - Строка, Структура(Поле,Заголовок)
//		Структура - ключ - поле, значение - заголовок
//		Неопределено - формируется автоматически из текста запроса
//
// Возвращаемое значение:
//	СхемаКомпоновкиДанных
//
Функция СхемаКомпоновкиДанныхПоЗапросу(знач ТекстЗапроса, знач ВыбранныеПоля = Неопределено) Экспорт
	
	Если ВыбранныеПоля = Неопределено Тогда
		ВыбранныеПоля = ВыбранныеПоляИзЗапроса(ТекстЗапроса);
	КонецЕсли;
	
	СКД = Новый СхемаКомпоновкиДанных;

	// Заполнение основных данных схемы
	ИсточникДанных = СКД.ИсточникиДанных.Добавить();
	ИсточникДанных.Имя                = "ИсточникДанных";
	ИсточникДанных.ТипИсточникаДанных = "Local";

	ТекущийНаборДанных = СКД.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	ТекущийНаборДанных.Имя                          = "ОсновнойНабор";
	ТекущийНаборДанных.Запрос                       = ТекстЗапроса;
	ТекущийНаборДанных.ИсточникДанных               = "ИсточникДанных";
	ТекущийНаборДанных.АвтоЗаполнениеДоступныхПолей = Истина;

	НастройкиПоУмолчанию = СКД.НастройкиПоУмолчанию;

	// Создание структуры.
	// Группировка, детальные записи и автовыбранное поле
	Группировка = НастройкиПоУмолчанию.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	Группировка.Использование = Истина;

	АвтоПоле = Группировка.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	АвтоПоле.Использование = Истина;

	КоллекцияКолонок = Новый ТаблицаЗначений;
	КоллекцияКолонок.Колонки.Добавить("Имя");
	КоллекцияКолонок.Колонки.Добавить("ТипЗначения");
	КоллекцияКолонок.Колонки.Добавить("Заголовок");

	// Добавление полей в набор
	Для Каждого СтрокаКолонки Из ВыбранныеПоля Цикл
		Если ТипЗнч(СтрокаКолонки) = Тип("КлючИЗначение") Тогда
			Поле		= СтрокаКолонки.Ключ;
			Псевдоним	= СтрокаКолонки.Значение;
		ИначеЕсли ТипЗнч(СтрокаКолонки) = Тип("Структура") Тогда 
			Поле		= СтрокаКолонки.Поле;
			Псевдоним	= СтрокаКолонки.Заголовок;
		Иначе
			Поле		= СтрокаКолонки;
			Псевдоним	= СтрокаКолонки;
		КонецЕсли;
		
		ПолеНабора = ТекущийНаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		ПолеНабора.Заголовок   = ?(НЕ ЗначениеЗаполнено(Псевдоним), СокрЛП(Поле), СокрЛП(Псевдоним));
		ПолеНабора.Поле        = СокрЛП(Поле);
		ПолеНабора.ПутьКДанным = СокрЛП(Поле);

		//// Удалим Неопределено и NULL
		//Массив = Новый Массив;
		//Для Каждого ТекущийТип Из НоваяКолонка.ТипЗначения.Типы() Цикл
		//	Если ТекущийТип = Тип("Неопределено") ИЛИ ТекущийТип = Тип("NULL") ИЛИ
		//	     ТекущийТип = Неопределено ИЛИ ТекущийТип = Null Тогда
		//		Продолжить;
		//	КонецЕсли;
		//	Массив.Добавить(ТекущийТип);
		//КонецЦикла;
		//ПолеНабора.ТипЗначения = Новый ОписаниеТипов(Массив, НоваяКолонка.ТипЗначения.КвалификаторыЧисла,
		//                                             НоваяКолонка.ТипЗначения.КвалификаторыСтроки,
		//                                             НоваяКолонка.ТипЗначения.КвалификаторыДаты);

		ВыбранноеПолеКомпоновкиДанных = НастройкиПоУмолчанию.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ВыбранноеПолеКомпоновкиДанных.Поле          = Новый ПолеКомпоновкиДанных(ПолеНабора.ПутьКДанным);
		ВыбранноеПолеКомпоновкиДанных.Использование = Истина;
	КонецЦикла;

	Возврат СКД;	

КонецФункции

Функция ОтборXMLИзХранилищаНастроек(знач КлючОбъекта, знач КлючНастроек, знач ИмяПользователя = Неопределено) Экспорт

    ВладелецНастроек = ?(ИмяПользователя = Неопределено, ИмяПользователя(), ИмяПользователя);

	СохраненныеНастройки = Неопределено;

	СохраненныеНастройки = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(КлючОбъекта, КлючНастроек,,,ВладелецНастроек);
    	
	Если СохраненныеНастройки = Неопределено Тогда
		Возврат Неопределено;	
	КонецЕсли;  
	
	ОтборXML = ОбщегоНазначенияПТБКлиентСервер.СвойствоСоответствия(СохраненныеНастройки, "ОтборXML", Неопределено);
	
	Возврат ОтборXML;

КонецФункции

Функция ПоследняяСохраненнаяНастройка(знач КлючОбъекта, знач ИмяПользователя = Неопределено) Экспорт
	
	Настройка = Неопределено;
	
    ВладелецНастроек = ?(ИмяПользователя = Неопределено, ИмяПользователя(), ИмяПользователя);
    	
	Структура = Новый Структура;
	Структура.Вставить("КлючОбъекта", КлючОбъекта); 
	Структура.Вставить("Пользователь", ВладелецНастроек);
	
	Выборка = ХранилищеОбщихНастроек.Выбрать(Структура);
	
	ПустаяДата 			= Дата('0001.01.01');
	МаксимальнаяДата 	= ПустаяДата;
	
	Пока Выборка.Следующий() Цикл 
		Если ТипЗнч(Выборка.Настройки) <> Тип("Соответствие") Тогда
			Продолжить;
		КонецЕсли;     
		
		ДатаНастройки = ОбщегоНазначенияПТБКлиентСервер.СвойствоСоответствия(Выборка.Настройки, "Дата", ПустаяДата);
		
		Если ДатаНастройки > МаксимальнаяДата Тогда
			Настройка = Выборка.Настройки
		КонецЕсли;
	КонецЦикла;        
	
	Возврат Настройка;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПроверитьСуществованиеРеквизитовПомощникаЗаполнения(Форма, знач ИмяРеквизитаКомпоновщик)
	Реквизит1 = ПомощникЗаполненияПТБКлиентСервер.ИмяРеквизитаПредставление(ИмяРеквизитаКомпоновщик);
	Реквизит2 = ПомощникЗаполненияПТБКлиентСервер.ИмяРеквизитаАдресХранилища(ИмяРеквизитаКомпоновщик);
	
	ЕстьРеквизит1 = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, Реквизит1);
	
	ЕстьРеквизит2 = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, Реквизит2);
	
	// добавим реквизит для представления настройки отбора и хранения адреса схемы
	МассивДобавить = Новый Массив;
	
	Если НЕ ЕстьРеквизит1 Тогда
		МассивДобавить.Добавить(Новый РеквизитФормы(Реквизит1, ОбщегоНазначения.ОписаниеТипаСтрока(0),,, Ложь));
	КонецЕсли;
	
	Если НЕ ЕстьРеквизит2 Тогда
		МассивДобавить.Добавить(Новый РеквизитФормы(Реквизит2, ОбщегоНазначения.ОписаниеТипаСтрока(0),,, Ложь));
	КонецЕсли;
	
	Если МассивДобавить.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Форма.ИзменитьРеквизиты(МассивДобавить);
КонецПроцедуры

Функция ПолучитьСхемуКомпоновкиПоИмени(знач ПолноеИмяМетаданные, знач ИмяСхемыКомпоновки)
	
	СхемаКомпоновкиДанных = Неопределено;
	ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ПолноеИмяМетаданные);
	Если ОбъектМетаданных <> Неопределено Тогда 
		СхемаНайдена = Ложь;
		Для Каждого ТекущаяСхемаКомпоновки Из ОбъектМетаданных.Макеты Цикл
			Если ТекущаяСхемаКомпоновки.Имя = ИмяСхемыКомпоновки  Тогда
				СхемаНайдена = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ СхемаНайдена Тогда
			Возврат Неопределено;	
		КонецЕсли;

		Если Метаданные.Документы.Содержит(ОбъектМетаданных) Тогда
			СхемаКомпоновкиДанных = Документы[ОбъектМетаданных.Имя].ПолучитьМакет(ИмяСхемыКомпоновки);
		ИначеЕсли Метаданные.Справочники.Содержит(ОбъектМетаданных) Тогда
			СхемаКомпоновкиДанных = Справочники[ОбъектМетаданных.Имя].ПолучитьМакет(ИмяСхемыКомпоновки);
		ИначеЕсли Метаданные.Обработки.Содержит(ОбъектМетаданных) Тогда
			СхемаКомпоновкиДанных = Обработки[ОбъектМетаданных.Имя].ПолучитьМакет(ИмяСхемыКомпоновки);
		КонецЕсли;
	КонецЕсли;
	
	Возврат СхемаКомпоновкиДанных;
	
КонецФункции

Функция ВыбранныеПоляИзЗапроса(знач ТекстЗапроса)
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	
	ОсновнойПакет = Неопределено;
	
	Для Каждого ПакетЗапроса Из СхемаЗапроса.ПакетЗапросов Цикл
		Если НЕ ТипЗнч(ПакетЗапроса) = Тип("ЗапросВыбораСхемыЗапроса") Тогда
			Продолжить;
		КонецЕсли;
		
		ОсновнойПакет = ПакетЗапроса;
	КонецЦикла;
	
	Результат = Новый Массив;
	
	Если ОсновнойПакет = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Для Каждого Колонка Из ОсновнойПакет.Колонки Цикл
		Если НЕ ТипЗнч(Колонка) = Тип("КолонкаСхемыЗапроса") Тогда
			Продолжить;
		КонецЕсли;
		
		Результат.Добавить(Колонка.Псевдоним);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти
 
