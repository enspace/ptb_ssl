
#Область ПрограммныйИнтерфейс

// Выполняет инициализацию компоновщика на основании переданной схемы, а также добавляет 
// в Настройки.Отбор настройку отбора переданную в параметре ОтборXML
//
// Параметры:
//	Форма 					- УправляемаяФорма
//	ИмяРеквизитаКомпоновщик	- Строка - имя реквизита с типом КомпоновщикНастроекКомпоновкиДанных
//	СхемаКомпоновкиДанных	- СхемаКомпоновкиДанных
//	ОтборXML				- Строка - сериализованный в строку объект ОтборКомпоновкиДанных
// 
Процедура ИнициализацияКомпоновщикаНастроек(Форма, знач ИмяРеквизитаКомпоновщик, знач СхемаКомпоновкиДанных, знач ОтборXML = "") Экспорт
	Если НЕ ТипЗнч(СхемаКомпоновкиДанных) = Тип("СхемаКомпоновкиДанных") Тогда
		ВызватьИсключение НСтр("ru='При инициализации помощника заполнения не указана СКД.'");
	КонецЕсли;
	
	// добавим реквизит для представления настройки отбора и хранения адреса схемы
	МассивДобавить = Новый Массив;
	МассивДобавить.Добавить(Новый РеквизитФормы(ИмяРеквизитаКомпоновщик + "НастройкиОтборПредставление", ОбщегоНазначения.ОписаниеТипаСтрока(0),,, Ложь));
	МассивДобавить.Добавить(Новый РеквизитФормы(ИмяРеквизитаКомпоновщик + "АдресХранилищаСКД", ОбщегоНазначения.ОписаниеТипаСтрока(0),,, Ложь));
	Форма.ИзменитьРеквизиты(МассивДобавить);
	
	// инициализация СКД и настройка компоновщика
	Настройки	= СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	URLСхемы	= ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Форма.УникальныйИдентификатор);
	
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемы);
	
	Компоновщик = Форма[ИмяРеквизитаКомпоновщик];
	Компоновщик.Инициализировать(ИсточникНастроек);
	Компоновщик.ЗагрузитьНастройки(Настройки);
	
	Если НЕ ПустаяСтрока(ОтборXML) Тогда
		Компоновщик.Настройки.Отбор.Элементы.Очистить();
		
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку(ОтборXML);
		ОтборКомпоновкиДанных = СериализаторXDTO.ПрочитатьXML(ЧтениеXML);
		
		Если ТипЗнч(ОтборКомпоновкиДанных) = Тип("ОтборКомпоновкиДанных") Тогда
			ОбщегоНазначенияПТБКлиентСервер.ЗаполнитьОтборКомпоновкиДанныхПоИсточнику(
				Компоновщик.Настройки.Отбор,
				ОтборКомпоновкиДанных);
		КонецЕсли;
	КонецЕсли;
	
	// присвоение переменных
	ПомощникЗаполненияПТБКлиентСервер.ОбновитьПредставлениеОтбора(Форма, ИмяРеквизитаКомпоновщик);
	Форма[ИмяРеквизитаКомпоновщик + "АдресХранилищаСКД"] = URLСхемы;
КонецПроцедуры

// Выполняет настройку переданной группы и добавляет в нее настройку для отбора
//
// Параметры:
//	Форма 					- УправляемаяФорма
//	ИмяРеквизитаКомпоновщик	- Строка - имя реквизита с типом КомпоновщикНастроекКомпоновкиДанных
//	ГруппаВладелец			- ЭлементФормы - элемент формы с типом "ГруппаФормы"
// 
Процедура ДобавитьПолеНастройкиОтбора(Форма, знач ИмяРеквизитаКомпоновщик, знач ГруппаВладелец) Экспорт 
	ЭлементВладелец = Форма.Элементы.Найти(ГруппаВладелец);
	Если ЭлементВладелец = Неопределено Тогда
		ВызватьИсключение НСтр("ru='При добавлении поля настройки не верно указана группа.'");
	КонецЕсли;
	
	// настроим внешний вид группы
	Если ТипЗнч(ЭлементВладелец) = Тип("ГруппаФормы") И ЭлементВладелец.Вид = ВидГруппыФормы.ОбычнаяГруппа Тогда
		ЭлементВладелец.Группировка 				= ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		ЭлементВладелец.ЦветФона					= ЦветаСтиля.ЦветФонаГруппыПомощникЗаполнения;
		ЭлементВладелец.Отображение					= ОтображениеОбычнойГруппы.Нет;
		ЭлементВладелец.РастягиватьПоГоризонтали	= Истина;
		ЭлементВладелец.ОтображатьЗаголовок			= Ложь;
	КонецЕсли;
	
	// добавим картинку отбора
	КартинкаОтбор = Форма.Элементы.Добавить(ИмяРеквизитаКомпоновщик + "_КартинкаОтбор", Тип("ДекорацияФормы"), ЭлементВладелец);
	КартинкаОтбор.Вид		= ВидДекорацииФормы.Картинка;
	КартинкаОтбор.Высота	= 1;
	КартинкаОтбор.Ширина	= 2;
	КартинкаОтбор.Картинка	= БиблиотекаКартинок.ОтборКомпоновкиДанных;
	
	// добавим надпись отбора
	НадписьОтбор = Форма.Элементы.Добавить(ИмяРеквизитаКомпоновщик + "_НадписьОтбор", Тип("ПолеФормы"), ЭлементВладелец);
	НадписьОтбор.Вид		 				= ВидПоляФормы.ПолеНадписи;
	НадписьОтбор.ПутьКДанным				= ИмяРеквизитаКомпоновщик + "НастройкиОтборПредставление";
	НадписьОтбор.Гиперссылка				= Истина;
	НадписьОтбор.ПоложениеЗаголовка			= ПоложениеЗаголовкаЭлементаФормы.Нет;
	НадписьОтбор.РастягиватьПоГоризонтали	= Истина;
	НадписьОтбор.АвтоМаксимальнаяШирина		= Ложь;
	НадписьОтбор.УстановитьДействие("Нажатие", "Подключаемый_ПомощникЗаполненияОтборНажатие");
КонецПроцедуры

// Выполняет сбор данных на основе СКД, компоновщика и переданных параметров
//
// Параметры:
//	Форма 					- УправляемаяФорма
//	ИмяРеквизитаКомпоновщик	- Строка - имя реквизита с типом КомпоновщикНастроекКомпоновкиДанных
//	Поля					- Массив - имена полей для считывания
//	ПараметрыДанных			- Структура - значения параметров данных для установки в компоновщик
//		Ключ		- Строка - имя параметра
//		Значение	- Произвольный - значение параметра
//	Отбор					- ОтборКомпоновкиДанных - настройка отборов, которые будут установлены
//		перед выполнением запроса
//	Порядок					- Соответствие - настройка сортировки данных результирующей таблицы
//		Ключ		- Строка - имя поля, возможно использовать поля через точку
//		Значение	- Строка - ВОЗР или УБЫВ для настройка порядка
//
// Возвращаемое значение:
//   ТаблицаЗначений
//		Список колонок соответствует переданному параметру Поля
// 
Функция ПолучитьТаблицуЗаполнения(Форма, знач ИмяРеквизитаКомпоновщик, знач Поля, знач ПараметрыДанных = Неопределено, знач Отбор = Неопределено, знач Порядок = Неопределено, знач ВнешниеНаборыДанных = Неопределено) Экспорт
	
	СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(Форма[ИмяРеквизитаКомпоновщик + "АдресХранилищаСКД"]);
	
	Если НЕ ТипЗнч(ПараметрыДанных) = Тип("Структура") Тогда
		ПараметрыДанных = Новый Структура;
	КонецЕсли;
	Если НЕ ТипЗнч(Порядок) = Тип("Соответствие") Тогда
		Порядок = Новый Соответствие;
	КонецЕсли;
	Для Каждого КлючИЗначение Из Порядок Цикл
		Если НЕ Поля.Найти(КлючИЗначение.Ключ) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Поля.Добавить(КлючИЗначение.Ключ);
	КонецЦикла;
	
	// Инициализация СКД и компоновщика
	КомпоновщикНастроек	= Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	КомпоновщикНастроек.ЗагрузитьНастройки(Форма[ИмяРеквизитаКомпоновщик].ПолучитьНастройки());

	НастройкиКомпоновки = КомпоновщикНастроек.Настройки;
	
	// Параметры СКД
	Для Каждого КлючИЗначение Из ПараметрыДанных Цикл
		ОбщегоНазначенияПТБКлиентСервер.УстановитьПараметр(НастройкиКомпоновки, КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	// Параметры вывода
	ОбщегоНазначенияПТБКлиентСервер.УстановитьПараметрВывода(НастройкиКомпоновки, "ВертикальноеРасположениеОбщихИтогов", РасположениеИтоговКомпоновкиДанных.Нет);
	ОбщегоНазначенияПТБКлиентСервер.УстановитьПараметрВывода(НастройкиКомпоновки, "ГоризонтальноеРасположениеОбщихИтогов", РасположениеИтоговКомпоновкиДанных.Нет);
	
	// Выбранные поля
	Для Каждого ИмяПоля Из Поля Цикл
		ОбщегоНазначенияПТБКлиентСервер.ДобавитьВыбранноеПоле(НастройкиКомпоновки, ИмяПоля);
	КонецЦикла;

	// Группировка
	ГруппировкаКомпоновки = НастройкиКомпоновки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ГруппировкаКомпоновки.Использование = Истина;
	Для Каждого ИмяГруппировки Из Поля Цикл
		ПолеГруппировки = ГруппировкаКомпоновки.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеГруппировки.Использование	= Истина;
		ПолеГруппировки.Поле			= Новый ПолеКомпоновкиДанных(ИмяГруппировки);
		ПолеГруппировки.ТипГруппировки	= ТипГруппировкиКомпоновкиДанных.Элементы;
	КонецЦикла;
	ОбщегоНазначенияПТБКлиентСервер.ДобавитьАвтоВыбранноеПоле(ГруппировкаКомпоновки.Выбор);
	
	// Отборы
	Если ТипЗнч(Отбор) = Тип("ОтборКомпоновкиДанных") Тогда
		ОбщегоНазначенияПТБКлиентСервер.ЗаполнитьОтборКомпоновкиДанныхПоИсточнику(НастройкиКомпоновки.Отбор, Отбор);
	КонецЕсли;
	
	// Порядок
	Для Каждого КлючИЗначение Из Порядок Цикл
		ЭлементПорядок = НастройкиКомпоновки.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
		ЭлементПорядок.Поле	= Новый ПолеКомпоновкиДанных(КлючИЗначение.Ключ);
		ЭлементПорядок.ТипУпорядочивания	= ?(НРег(КлючИЗначение.Значение) = "убыв",
			НаправлениеСортировкиКомпоновкиДанных.Убыв,
			НаправлениеСортировкиКомпоновкиДанных.Возр);
	КонецЦикла;
	
	// Таблица данных
	Возврат ОбщегоНазначенияПТБ.ПолучитьТаблицуЗначенийПоДаннымСКД(СхемаКомпоновкиДанных, КомпоновщикНастроек, ВнешниеНаборыДанных); 
	
КонецФункции

// Выполняет сериализацию настройки отбора компоновщика в строку
// Используется Компоновщик.Настройки.Отбор
//
// Параметры:
//	Форма 					- УправляемаяФорма
//	ИмяРеквизитаКомпоновщик	- Строка - имя реквизита с типом КомпоновщикНастроекКомпоновкиДанных
//
// Возвращаемое значение:
//   Строка
// 
Функция ПолучитьСтрокуДляСохраненияОтбора(Форма, знач ИмяРеквизитаКомпоновщик) Экспорт
	Возврат ОбщегоНазначения.ЗначениеВСтрокуXML(Форма[ИмяРеквизитаКомпоновщик].Настройки.Отбор);
КонецФункции

#КонецОбласти
