
#Область ПрограммныйИнтерфейс

// Формирует строку пакетного запуска приложения 1С в режиме конфигуратора
//
// Параметры:
//	ПутьКФайлуПлатформы	- Строка - путь к файлу платформы
//	ПараметрыСоздания	- Структура, Строка - см. ПолучитьНастройкиСозданияБазы
//		Если передана строка создается файловая БД, где ПутьККаталогу=ПараметрыСоздания
//
// Возвращаемое значение:
//   Строка
// 
Функция КомандаЗапускаСозданияБазы(знач ПутьКФайлуПлатформы, знач ПараметрыСоздания) Экспорт
	ТипПараметры = ТипЗнч(ПараметрыСоздания);
	Если ТипПараметры = Тип("Строка") Тогда
		Настройки = НастройкиСозданияБазы(0);
		Настройки.ПутьККаталогу = ПараметрыСоздания;
		
		ПараметрыКоманды = ПараметрыСозданияБазы(Настройки);
	ИначеЕсли ТипПараметры = Тип("Структура") Тогда
		ПараметрыКоманды = ПараметрыСозданияБазы(ПараметрыСоздания);
	Иначе 
		ВызватьИсключение НСтр("ru='Неверно передан ""ПараметрыСоздания"" метода ""КомандаЗапускаСозданияБазы"".'") ;
	КонецЕсли;
		
	Возврат СтрШаблон("%1 CREATEINFOBASE %2",
		ПутьКФайлуПлатформы,
		ПараметрыКоманды);	
КонецФункции

// Формирует строку пакетного запуска приложения 1С в режиме конфигуратора
//
// Параметры:
//	ПутьКФайлуПлатформы				- Строка - путь к файлу платформы
//	ПараметрыПодключенияКБазе		- Строка - см. ПараметрыПодключенияКБазе
//
// Возвращаемое значение:
//   Строка
// 
Функция КомандаЗапускаКонфигуратора(знач ПутьКФайлуПлатформы, знач ПараметрыПодключенияКБазе, знач ОтключитьЗаставку = Истина) Экспорт
	Возврат СтрШаблон("%1 DESIGNER %2 /DisableStartupMessages /DisableStartupDialogs%3",
		ПутьКФайлуПлатформы,
		ПараметрыПодключенияКБазе,
		?(ОтключитьЗаставку, " /DisableSplash", ""));	
КонецФункции

// Формирует строку пакетного запуска приложения 1С в режиме предприятия
//
// Параметры:
//	ПутьКФайлуПлатформы				- Строка - путь к файлу платформы
//	ПараметрыПодключенияКБазе		- Строка - см. ПараметрыПодключенияКБазе
//
// Возвращаемое значение:
//   Строка
// 
Функция КомандаЗапускаПредприятия(знач ПутьКФайлуПлатформы, знач ПараметрыПодключенияКБазе, знач ПакетныйРежим = Ложь, знач ОтключитьЗаставку = Истина) Экспорт
	Возврат СтрШаблон("%1 ENTERPRISE %2 /DisableStartupMessages%3%4",
		ПутьКФайлуПлатформы,
		ПараметрыПодключенияКБазе,
		?(ПакетныйРежим, " /DisableStartupDialogs", ""),
		?(ОтключитьЗаставку, " /DisableSplash", ""));	
КонецФункции

// Возвращает соответствие идентификаторов приложений и их представлений
//
// Возвращаемое значение:
//   соответствие - ключ = Идентификатор приложения, Значение = Представление
//
Функция ПолучитьПредставленияПриложенийСоединений() Экспорт
	Соответствие = Новый Соответствие;
	Соответствие.Вставить("1CV8"				, НСтр("ru='Толстый клиент'"));
	Соответствие.Вставить("1CV8C"				, НСтр("ru='Тонкий клиент'"));
	Соответствие.Вставить("WebClient"			, НСтр("ru='Веб-клиент'")); 
	Соответствие.Вставить("Designer"			, НСтр("ru='Конфигуратор'")); 
	Соответствие.Вставить("COMConnection"		, НСтр("ru='Внешнее соединение'"));
	Соответствие.Вставить("WSConnection"		, НСтр("ru='Web-сервис'"));
	Соответствие.Вставить("BackgroundJob"		, НСтр("ru='Фоновое задание'")); 
	Соответствие.Вставить("SystemBackgroundJob"	, НСтр("ru='Системное фоновое задание'"));
	Соответствие.Вставить("SrvrConsole"			, НСтр("ru='Консоль кластера'"));
	Соответствие.Вставить("COMConsole"			, НСтр("ru='Адм. внешнее соединение'")); 
	Соответствие.Вставить("JobScheduler"		, НСтр("ru='Планировщик заданий'")); 
	Соответствие.Вставить("Debugger"			, НСтр("ru='Отладчик'")); 
	Соответствие.Вставить("RAS"					, НСтр("ru='Сервер администрирования'"));
	
	Возврат Соответствие;
КонецФункции

// Возвращает представление приложения для соединения
//
// Параметры:
//	ИмяПриложения - Строка - см. ПолучитьПредставленияПриложенийСоединений
//
// Возвращаемое значение:
//   Строка
// 
Функция ПредставлениеПриложенияСоединения(знач ИмяПриложения) Экспорт
	Соответствие	= ПолучитьПредставленияПриложенийСоединений();
	Представление	= Соответствие.Получить(ИмяПриложения);
	
	Возврат ?(НЕ ЗначениеЗаполнено(Представление), ИмяПриложения, Представление);
КонецФункции

#КонецОбласти

#Область ПараметрыЗапускаПриложения

// Возвращает строку подключения к базе данных, в зависимости от параметров
//	/F "КаталогИмяИБ" - для файловой базы данных
//	/S "СерверИБ[:ПортКластера]\КаталогИмяИБ" - для серверной базы данных
//
// Параметры:
//	КаталогИмяИБ	- Строка - путь к файловой ИБ или имя ИБ на сервере
//	СерверИБ		- Строка - имя сервера, если ИБ серверная
//	ПортКластера	- Число - порт кластера, по умолчанию 1541
//
// Возвращаемое значение:
//   Строка
// 
Функция ПараметрыПодключенияКБазе(знач КаталогИмяИБ, знач СерверИБ = "", знач ПортКластера = 1541) Экспорт
	ЭтоФайловаяИБ = ПустаяСтрока(СерверИБ);
	
	Если ЭтоФайловаяИБ Тогда
		Возврат СтрШаблон("/F ""%1""", СокрЛП(КаталогИмяИБ));
	Иначе 
		Возврат СтрШаблон("/S ""%1%2\%3""",
			СокрЛП(СерверИБ),
			?(ПортКластера = 1541, "", ":" + Формат(ПортКластера, "ЧГ=0")),
			СокрЛП(КаталогИмяИБ));
	КонецЕсли;
КонецФункции

// Возвращает строку авторизации пользователя
//	/WA+ или /WA-
//	/N "Пользователь" /P "Пароль"
//	/UC "КодБлокировки"
//
// Параметры:
//	АвторизацияWindows	- Булево - признак авторизации пользователя средствами ОС Windows
//	Пользователь		- Строка - имя пользователя для подключения, по умолчанию пустой
//	Пароль				- Строка - пароль пользователя, по умолчанию пустой
//	КодБлокировки		- Строка - значение блокировки информационной базы
//
// Возвращаемое значение:
//   Строка
// 
Функция ПараметрыАвторизацииПодключения(знач АвторизацияWindows, знач Пользователь = "", знач Пароль = "", знач КодБлокировки = "") Экспорт
	ТипАвторизации		= ?(АвторизацияWindows = Ложь, "/WA-", "/WA+");
	ПользовательПароль	= "";
	БлокировкаСеансов	= "";
	
	Если АвторизацияWindows = Ложь И ЗначениеЗаполнено(Пользователь) Тогда
		ПользовательПароль = СтрШаблон("/N""%1"" /P""%2""", Пользователь, Пароль);
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(КодБлокировки) Тогда
		БлокировкаСеансов = СтрШаблон("/UC""%1""", КодБлокировки);
	КонецЕсли;
		
	Возврат ТипАвторизации
		+ ?(ПустаяСтрока(ПользовательПароль), "", " ") + ПользовательПароль
		+ ?(ПустаяСтрока(БлокировкаСеансов), "", " ") + БлокировкаСеансов;
КонецФункции

// Возвращает строку подключения к хранилищу по переданным параметрам
//	/ConfigurationRepositoryF "КаталогХранилища"
//	/ConfigurationRepositoryN "ИмяПользователя"
//	/ConfigurationRepositoryP "Пароль"
//
// Параметры:
//	КаталогХранилища	- Строка - путь к каталогу хранилища
//	ИмяПользователя		- Строка - имя пользователя для подключения, по умолчанию "ТолькоПросмотр"
//	Пароль				- Строка - пароль пользователя, по умолчанию пустой
//
// Возвращаемое значение:
//   Строка
// 
Функция ПараметрыПодключенияКХранилищу(знач КаталогХранилища, знач ИмяПользователя = "ТолькоПросмотр", знач Пароль = "") Экспорт
	Возврат СтрШаблон("/ConfigurationRepositoryF ""%1"" /ConfigurationRepositoryN ""%2"" /ConfigurationRepositoryP ""%3""",
		СокрЛП(КаталогХранилища),
		ИмяПользователя,
		Пароль);
КонецФункции

// Возвращает строку для выполнения выгрузки в файл *.dt
//	/DumpIB "ПутьКФайлу"
//
// Параметры:
//	ПутьКФайлу - Строка - путь к файлу *.dt
//
// Возвращаемое значение:
//   Строка
// 
Функция ПараметрыВыгрузкиДанныхИБ(знач ПутьКФайлу) Экспорт	
	Возврат СтрШаблон("/DumpIB ""%1""", ПутьКФайлу);
КонецФункции

// Возвращает строку для выполнения загрузки в файла *.dt
//	/RestoreIB "ПутьКФайлу"
//
// Параметры:
//	ПутьКФайлу - Строка - путь к файлу *.dt
//
// Возвращаемое значение:
//   Строка
// 
Функция ПараметрыЗагрузкиДанныхИБ(знач ПутьКФайлу) Экспорт
	Возврат СтрШаблон("/RestoreIB ""%1""", ПутьКФайлу);
КонецФункции

// Возвращает строку для выполнения обновления из файла (в том числе если заданы настройки)
//	/UpdateCfg или /MergeCfg или /LoadCfg "ПутьКФайлуОбновления" 
//		-force (для /UpdateCfg)
//		-Settings "ПутьКФайлуПравил" (для /UpdateCfg, /MergeCfg)
//
// Параметры:
//	Настройки - Структура - НастройкиОбновленияИзФайла
//
// Возвращаемое значение:
//   Строка
// 
Функция ПараметрыОбновленияИзФайла(знач Настройки) Экспорт
	Если НЕ ТипЗнч(Настройки) = Тип("Структура") Тогда
		Возврат "";
	КонецЕсли;
	
	СпособОбновления 				= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Настройки, "СпособОбновления", 0);
	ПутьКФайлуОбновления			= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Настройки, "ФайлОбновления", "");
	ПутьКФайлуПравил				= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Настройки, "ФайлПравилОбъединения", "");
	ОбновлятьКонфигурациюБД			= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Настройки, "ОбновлятьКонфигурациюБД", Ложь);
	НастройкиОбновленияБД			= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Настройки, "НастройкиОбновленияБД", Ложь);
	ИмяРасширения					= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Настройки, "ИмяРасширения", "");
	ОбъединитьВсеСвязанныеОбъекты	= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Настройки, "ОбъединитьВсеСвязанныеОбъекты", Ложь);
	ОчиститьВсеСвязанныеОбъекты		= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Настройки, "ОчиститьВсеСвязанныеОбъекты", Ложь);
	ВывестиДваждыИзмененные			= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Настройки, "ВывестиДваждыИзмененные", Ложь);
	ИгнорироватьКонфликты			= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Настройки, "ИгнорироватьКонфликты", Ложь);
	
	НастройкаПравилОбъединения = ?(ЗначениеЗаполнено(ПутьКФайлуПравил), СтрШаблон(" -Settings""%1""", ПутьКФайлуПравил), "");
	
	Если СпособОбновления = 0 Тогда
		КомандаОбновления = СтрШаблон("/UpdateCfg ""%1""%2", ПутьКФайлуОбновления, НастройкаПравилОбъединения);
	ИначеЕсли СпособОбновления = 1 Тогда
		КомандаОбновления = СтрШаблон("/MergeCfg ""%1""%2", ПутьКФайлуОбновления, НастройкаПравилОбъединения);
	ИначеЕсли СпособОбновления = 2 Тогда
		КомандаОбновления = СтрШаблон("/LoadCfg ""%1""", ПутьКФайлуОбновления);
	Иначе 
		Возврат "";
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ИмяРасширения) Тогда
		КомандаОбновления = КомандаОбновления + " -Extension " + ИмяРасширения;
	КонецЕсли;
	
	Если ОбъединитьВсеСвязанныеОбъекты = Истина Тогда
		КомандаОбновления = КомандаОбновления + " -IncludeObjectsByUnresolvedRefs";
	ИначеЕсли ОчиститьВсеСвязанныеОбъекты = Истина Тогда
		КомандаОбновления = КомандаОбновления + " -ClearUnresolvedRefs";
	КонецЕсли;
	
	Если ВывестиДваждыИзмененные = Истина Тогда
		КомандаОбновления = КомандаОбновления + " -DumpListOfTwiceChangedProperties";
	КонецЕсли;
	
	Если ИгнорироватьКонфликты = Истина Тогда
		КомандаОбновления = КомандаОбновления + " -force";
	КонецЕсли;
	
	Если ОбновлятьКонфигурациюБД = Истина Тогда
		Если НЕ ТипЗнч(НастройкиОбновленияБД) = Тип("Структура") Тогда
			НастройкиОбновленияБД = НастройкиОбновленияКонфигурацииИБ();
		КонецЕсли;
		
		КомандаОбновления = КомандаОбновления + " " + ПараметрыОбновленияКонфигурацииИБ(НастройкиОбновленияБД);
	КонецЕсли;
	
	Возврат КомандаОбновления;
КонецФункции

// Возвращает строку для записи результата работы в файл лога
//	/Out "ПутьКФайлу" –NoTruncate
//
// Параметры:
//	ПутьКФайлу - Строка
//
// Возвращаемое значение:
//   Строка
// 
Функция ПараметрыЛогированияПриложения(знач ПутьКФайлу = "") Экспорт
	Если НЕ ЗначениеЗаполнено(ПутьКФайлу) Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат СтрШаблон("/Out ""%1"" –NoTruncate", ПутьКФайлу);
КонецФункции

// Возвращает строку для записи результата работы в файл лога
//	/Out "ПутьКФайлу" –NoTruncate
//
// Параметры:
//	ПутьКФайлу - Строка
//
// Возвращаемое значение:
//   Строка
// 
Функция ПараметрыЗаписиРезультата(знач ПутьКФайлу = "") Экспорт
	Если НЕ ЗначениеЗаполнено(ПутьКФайлу) Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат СтрШаблон("/DumpResult ""%1""", ПутьКФайлу);
КонецФункции

// Возвращает строку для выгрузки конфигурации в файл *.cf, *.cfe
//	/DumpCfg "ПутьКФайлу"
//
// Параметры:
//	ПутьКФайлу		- Строка
//	ИмяРасширения	- Строка - имя расширения при необходимости
//
// Возвращаемое значение:
//   Строка
// 
Функция ПараметрыВыгрузкиКонфигурации(знач ПутьКФайлу = "", знач ИмяРасширения = "") Экспорт
	Если НЕ ЗначениеЗаполнено(ПутьКФайлу) Тогда
		Возврат "";
	КонецЕсли;
	
	СтрРасширение = ?(ПустаяСтрока(ИмяРасширения), "", " -Extension " + ИмяРасширения);
	
	Возврат СтрШаблон("/DumpCfg ""%1""%2",
		ПутьКФайлу,
		СтрРасширение);
КонецФункции

// Возвращает строку для выгрузки конфигурации в файлы
//
// Параметры:
//	Настройки - Структура - см. НастройкиВыгрузкиВФайлы
//
// Возвращаемое значение:
//   Строка
// 
Функция ПараметрыВыгрузкиКонфигурацииВФайлы(знач Настройки) Экспорт
	Если НЕ ТипЗнч(Настройки) = Тип("Структура") Тогда
		Возврат "";
	КонецЕсли;
	
	КаталогВыгрузки			= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Настройки, "КаталогВыгрузки", "");
	ВсеРасширения			= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Настройки, "ВсеРасширения", Ложь);
	ИмяРасширения			= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Настройки, "ИмяРасширения", "");
	ВыгружатьИзменения		= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Настройки, "ВыгружатьИзменения", Ложь);
	ФайлИзменений			= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Настройки, "ФайлИзменений", "");
	ФайлПредыдущейВерсии	= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Настройки, "ФайлПредыдущейВерсии", "");
	ВыгружатьПоСписку		= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Настройки, "ВыгружатьПоСписку", Ложь);
	ФайлСпискаВыгрузки		= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Настройки, "ФайлСпискаВыгрузки", "");
	ТолькоConfigDumpInfo	= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Настройки, "ТолькоConfigDumpInfo", Ложь);
	Иерархически			= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Настройки, "Иерархически", Истина);
	
	Если ПустаяСтрока(КаталогВыгрузки) Тогда
		Возврат "";
	КонецЕсли;
	
	СтрПараметры = "";
	
	Если ВсеРасширения = Истина Тогда
		СтрПараметры = СтрПараметры + " –AllExtensions";
	ИначеЕсли НЕ ПустаяСтрока(ИмяРасширения) Тогда
		СтрПараметры = СтрПараметры + " -Extension " + ИмяРасширения;
	КонецЕсли;
	
	Если ВыгружатьИзменения = Истина Тогда
		СтрПараметры = СтрПараметры + " -update -force";
		
		Если НЕ ПустаяСтрока(ФайлИзменений) Тогда
			СтрПараметры = СтрПараметры + "	-getChanges ""%ФайлИзменений%""";
			СтрПараметры = СтрЗаменить(СтрПараметры, "%ФайлИзменений%", ФайлИзменений);
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ФайлПредыдущейВерсии) Тогда
			СтрПараметры = СтрПараметры + " -configDumpInfoForChanges ""%ФайлПредыдущейВерсии%""";
			СтрПараметры = СтрЗаменить(СтрПараметры, "%ФайлПредыдущейВерсии%", ФайлПредыдущейВерсии);
		КонецЕсли;
	ИначеЕсли ВыгружатьПоСписку = Истина Тогда
		СтрПараметры = " -listFile ""%ФайлСпискаВыгрузки%""";
		СтрПараметры = СтрЗаменить(СтрПараметры, "%ФайлСпискаВыгрузки%", ФайлСпискаВыгрузки);
	КонецЕсли;
	
	Если ТолькоConfigDumpInfo = Истина Тогда
		СтрПараметры = СтрПараметры + " -configDumpInfoOnly";
	КонецЕсли;
	
	Если Иерархически = Ложь Тогда
		СтрФормат = " –Format Plain";
	Иначе
		СтрФормат = "";
	КонецЕсли;
	
	Возврат СтрШаблон("/DumpConfigToFiles ""%1""%2%3",
		КаталогВыгрузки,
		СтрФормат,
		СтрПараметры);
КонецФункции

// Возвращает строку для выгрузки конфигурации в файл *.epf, *.erf
//	/DumpCfg "ПутьКФайлу"
//
// Параметры:
//	Настройки - Структура - см. НастройкиВыгрузкиВФайлы
//
// Возвращаемое значение:
//   Строка
// 
Функция ПараметрыВыгрузкиОбработкиВФайлы(знач Настройки = "") Экспорт
	Если НЕ ТипЗнч(Настройки) = Тип("Структура") Тогда
		Возврат "";
	КонецЕсли;
	
	КаталогВыгрузки	= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Настройки, "КаталогВыгрузки", "");
	ФайлОбработки	= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Настройки, "ФайлОбработки", "");
	Иерархически	= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Настройки, "Иерархически", Истина);
	
	Если ПустаяСтрока(КаталогВыгрузки) ИЛИ ПустаяСтрока(ФайлОбработки) Тогда
		Возврат "";
	КонецЕсли;
	
	Если Иерархически = Ложь Тогда
		СтрФормат = " –Format Plain";
	Иначе
		СтрФормат = "";
	КонецЕсли;
	
	Возврат СтрШаблон("/DumpExternalDataProcessorOrReportToFiles ""%1"" ""%2""%3",
		КаталогВыгрузки,
		ФайлОбработки,
		СтрФормат);
КонецФункции

// Возвращает строку для выгрузки конфигурации из файлов
//
// Параметры:
//	Настройки - Структура - см. НастройкиЗагрузкиИзФайлов
//
// Возвращаемое значение:
//   Строка
// 
Функция ПараметрыЗагрузкиКонфигурацииИзФайлов(знач Настройки) Экспорт
	Если НЕ ТипЗнч(Настройки) = Тип("Структура") Тогда
		Возврат "";
	КонецЕсли;
	
	КаталогЗагрузки			= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Настройки, "КаталогЗагрузки", "");
	ВсеРасширения 			= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Настройки, "ВсеРасширения", Ложь);
	ИмяРасширения			= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Настройки, "ИмяРасширения", "");
	ФайлСпискаЗагрузки		= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Настройки, "ФайлСпискаЗагрузки", "");
	ОбновитьФайлВерсии		= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Настройки, "ОбновитьФайлВерсии", Ложь);
	ОбновлятьКонфигурациюБД	= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Настройки, "ОбновлятьКонфигурациюБД", Ложь);
	НастройкиОбновленияБД	= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Настройки, "НастройкиОбновленияБД", Ложь);
	Иерархически			= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Настройки, "Иерархически", Истина);
	
	Если ПустаяСтрока(КаталогЗагрузки) Тогда
		Возврат "";
	КонецЕсли;
	
	СтрПараметры = "";
	
	Если ВсеРасширения = Истина Тогда
		СтрПараметры = СтрПараметры + " –AllExtensions";
	ИначеЕсли НЕ ПустаяСтрока(ИмяРасширения) Тогда
		СтрПараметры = СтрПараметры + " -Extension " + ИмяРасширения;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ФайлСпискаЗагрузки) Тогда
		СтрПараметры = СтрПараметры + " -listFile ""%ФайлСпискаЗагрузки%""";
		СтрПараметры = СтрЗаменить(СтрПараметры, "%ФайлСпискаЗагрузки%", ФайлСпискаЗагрузки);
	КонецЕсли;
	
	Если ОбновитьФайлВерсии = Истина Тогда
		СтрПараметры = СтрПараметры + " -updateConfigDumpInfo";
	КонецЕсли;
	
	Если ОбновлятьКонфигурациюБД = Истина Тогда
		Если НЕ ТипЗнч(НастройкиОбновленияБД) = Тип("Структура") Тогда
			НастройкиОбновленияБД = НастройкиОбновленияКонфигурацииИБ();
		КонецЕсли;
		
		СтрПараметры = СтрПараметры + " " + ПараметрыОбновленияКонфигурацииИБ(НастройкиОбновленияБД);
	КонецЕсли;
	
	Если Иерархически = Ложь Тогда
		СтрФормат = " –Format Plain";
	Иначе
		СтрФормат = "";
	КонецЕсли;
	
	Возврат СтрШаблон("/LoadConfigFromFiles ""%1""%2%3",
		КаталогЗагрузки,
		СтрФормат,
		СтрПараметры);
КонецФункции

// Возвращает строку для выгрузки конфигурации в файл *.epf, *.erf
//	/LoadExternalDataProcessorOrReportFromFiles "ПутьККаталогу" "ПутьКФайлу"
//
// Параметры:
//	Настройки - Структура - см. НастройкиЗагрузкиИзФайлов
//
// Возвращаемое значение:
//   Строка
// 
Функция ПараметрыЗагрузкиОбработкиИзФайлов(знач Настройки = "") Экспорт
	Если НЕ ТипЗнч(Настройки) = Тип("Структура") Тогда
		Возврат "";
	КонецЕсли;
	
	КаталогЗагрузки	= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Настройки, "КаталогЗагрузки", "");
	ФайлОбработки	= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Настройки, "ФайлОбработки", "");
	
	Если ПустаяСтрока(КаталогЗагрузки) ИЛИ ПустаяСтрока(ФайлОбработки) Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат СтрШаблон("/LoadExternalDataProcessorOrReportFromFiles ""%1"" ""%2""",
		КаталогЗагрузки,
		ФайлОбработки);
КонецФункции

// Возвращает строку для запуска внешней обработки после открытия
//	/Execute "ПутьКФайлу"
//
// Параметры:
//	ПутьКФайлу - Строка
//
// Возвращаемое значение:
//   Строка
// 
Функция ПараметрыЗапускаВнешнейОбработки(знач ПутьКФайлу) Экспорт
	Если НЕ ЗначениеЗаполнено(ПутьКФайлу) Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат СтрШаблон("/Execute ""%1""", ПутьКФайлу);
КонецФункции

// Возвращает строку для запуска создания файла поставки
//	/CreateDistributionFiles
//
// Параметры:
//	Настройки - Структура - см. НастройкиСозданияДистрибутива
//
// Возвращаемое значение:
//   Строка
// 
Функция ПараметрыСозданияДистрибутива(знач Настройки) Экспорт
	Если НЕ ТипЗнч(Настройки) = Тип("Структура") Тогда
		Возврат "";
	КонецЕсли;
	
	ПутьКФайлуCF	= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Настройки, "ПутьКФайлуCF", "");
	ПутьКФайлуCFU	= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Настройки, "ПутьКФайлуCFU", "");
	Основания		= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Настройки, "Основания", Неопределено);
	
	Если ПустаяСтрока(ПутьКФайлуCF) И ПустаяСтрока(ПутьКФайлуCFU) Тогда
		Возврат "";
	КонецЕсли;
	
	ПараметрCF	= ?(ПустаяСтрока(ПутьКФайлуCF), "", " -cffile """ + ПутьКФайлуCF + """");
	ПараметрCFU	= ?(ПустаяСтрока(ПутьКФайлуCFU), "", " -cfufile """ + ПутьКФайлуCFU + """");
	
	ПараметрОбновления = "";
	Если ТипЗнч(Основания) = Тип("Массив") Тогда
		Для Каждого СтруктураОбновления Из Основания Цикл
			ПараметрОбновления = СтрШаблон("%1 -f ""%2""",
				ПараметрОбновления,
				СтруктураОбновления.ПутьКФайлу);
		КонецЦикла;
	КонецЕсли;
	
	Возврат СтрШаблон("/CreateDistributionFiles%1%2%3",
		ПараметрCF,
		ПараметрCFU,
		ПараметрОбновления);	
КонецФункции

// Возвращает строку для снятия конфигурации с поддержки
//	/ManageCfgSupport -disableSupport -force
//
// Параметры:
//	СнятьВЛюбомСлучае - Булево - управление ключом -force
//
// Возвращаемое значение:
//   Строка
// 
Функция ПараметрыСнятияСПоддержки(знач СнятьВЛюбомСлучае = Истина) Экспорт
	СтрФорсировать = ?(СнятьВЛюбомСлучае, " -force", "");
	Возврат СтрШаблон("/ManageCfgSupport -disableSupport%1",
		СтрФорсировать);
КонецФункции

// Возвращает строку для запуска создания базы данных
//	CREATEINFOBASE
//
// Параметры:
//	Настройки - Структура - см. НастройкиСозданияБазы
//
// Возвращаемое значение:
//   Строка
// 
Функция ПараметрыСозданияБазы(знач Настройки) Экспорт
	Если НЕ ТипЗнч(Настройки) = Тип("Структура") Тогда
		Возврат "";
	КонецЕсли;
	
	ТипБД = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Настройки, "ТипБД", Неопределено);
	Если НЕ (ТипБД = 0 ИЛИ ТипБД = 1) Тогда
		Возврат "";
	КонецЕсли;
	
	Если ТипБД = 1 Тогда
		СтрокаПараметры = ПараметрыСозданияБазы_Серверная(Настройки);
	Иначе 
		СтрокаПараметры = ПараметрыСозданияБазы_Файловая(Настройки);
	КонецЕсли;
	
	Возврат СтрокаПараметры;
КонецФункции

// Возвращает строку для определения вида режима запуска (тонкий, веб, толстый клиент)
//	/RunModeManagedApplication -ThinClient|-WebClient|-ThickClient
//	/AppAutoCheckMode
//
// Параметры:
//	ВидРежимаЗапуска - ПеречислениеСсылка.ВидыРежимовЗапуска
//
// Возвращаемое значение:
//   Строка
// 
Функция ПараметрыВидаРежимаЗапуска(знач ВидРежимаЗапуска = Неопределено) Экспорт
	Результат = " ";                                                     
	
	Если ВидРежимаЗапуска = ПредопределенноеЗначение("Перечисление.ВидыРежимовЗапуска.ТонкийКлиент") Тогда
		Результат = " /RunModeManagedApplication -ThinClient ";
	ИначеЕсли ВидРежимаЗапуска = ПредопределенноеЗначение("Перечисление.ВидыРежимовЗапуска.ВебКлиент") Тогда
		Результат = " /RunModeManagedApplication -WebClient ";
	ИначеЕсли ВидРежимаЗапуска = ПредопределенноеЗначение("Перечисление.ВидыРежимовЗапуска.ТолстыйКлиент") Тогда
		Результат = " /RunModeOrdinaryApplication -ThickClient ";
	ИначеЕсли ВидРежимаЗапуска = ПредопределенноеЗначение("Перечисление.ВидыРежимовЗапуска.ВыбиратьАвтоматически") Тогда
		Результат = " /AppAutoCheckMode ";
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Возвращает строку для запуска проверки модулей
//	/CheckModules
//
// Параметры:
//	Настройки - Структура - см. НастройкиПроверкиМодулей
//
// Возвращаемое значение:
//   Строка
// 
Функция ПараметрыПроверкиМодулей(знач Настройки) Экспорт
	Если НЕ ТипЗнч(Настройки) = Тип("Структура") Тогда
		Возврат "";
	КонецЕсли;
	
	ТонкийКлиент				= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Настройки, "ТонкийКлиент", Ложь);
	ВебКлиент					= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Настройки, "ВебКлиент", Ложь);
	МобильныйКлиент				= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Настройки, "МобильныйКлиент", Ложь);
	КлиентМобильногоПриложения	= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Настройки, "КлиентМобильногоПриложения", Ложь);
	Сервер						= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Настройки, "Сервер", Ложь);
	СерверМобильногоПриложения	= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Настройки, "СерверМобильногоПриложения", Ложь);
	ВнешнееСоединение			= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Настройки, "ВнешнееСоединение", Ложь);
	ТолстыйКлиент				= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Настройки, "ТолстыйКлиент", Ложь);
	РасширеннаяПроверка			= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Настройки, "РасширеннаяПроверка", Ложь);
	ВсеРасширения				= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Настройки, "ВсеРасширения", Ложь);
	ИмяРасширения				= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Настройки, "ИмяРасширения", "");
	
	СтрПараметры = "";
	
	Если ТонкийКлиент = Истина Тогда
		СтрПараметры = СтрПараметры + " –ThinClient";
	КонецЕсли;
	
	Если ВебКлиент = Истина Тогда
		СтрПараметры = СтрПараметры + " –WebClient";
	КонецЕсли;
	
	Если МобильныйКлиент = Истина Тогда
		СтрПараметры = СтрПараметры + " –MobileClient";
	КонецЕсли;
	
	Если КлиентМобильногоПриложения = Истина Тогда
		СтрПараметры = СтрПараметры + " –MobileAppClient";
	КонецЕсли;
	
	Если Сервер = Истина Тогда
		СтрПараметры = СтрПараметры + " –Server";
	КонецЕсли;
	
	Если СерверМобильногоПриложения = Истина Тогда
		СтрПараметры = СтрПараметры + " –MobileAppServer";
	КонецЕсли;
	
	Если ВнешнееСоединение = Истина Тогда
		СтрПараметры = СтрПараметры + " –ExternalConnection";
	КонецЕсли;
	
	Если ТолстыйКлиент = Истина Тогда
		СтрПараметры = СтрПараметры + " –ThickClientOrdinaryApplication";
	КонецЕсли;
	
	Если РасширеннаяПроверка = Истина Тогда
		СтрПараметры = СтрПараметры + " –ExtendedModulesCheck";
	КонецЕсли;
	
	Если ВсеРасширения = Истина Тогда
		СтрПараметры = СтрПараметры + " –AllExtensions";
	ИначеЕсли НЕ ПустаяСтрока(ИмяРасширения) Тогда
		СтрПараметры = СтрПараметры + " -Extension " + ИмяРасширения;
	КонецЕсли;
	
	Возврат СтрШаблон("/CheckModules%1",
		СтрПараметры);
КонецФункции

// Возвращает строку для запуска проверки модулей
//	/CheckConfig
//
// Параметры:
//	Настройки - Структура - см. НастройкиПроверкиКонфигурации
//
// Возвращаемое значение:
//   Строка
// 
Функция ПараметрыПроверкиКонфигурации(знач Настройки) Экспорт
	Если НЕ ТипЗнч(Настройки) = Тип("Структура") Тогда
		Возврат "";
	КонецЕсли;
	
	ПроверкаЛогическойЦелостностиКонфигурации		= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Настройки, "ПроверкаЛогическойЦелостностиКонфигурации", Ложь);
	ПоискНекорректныхСсылок							= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Настройки, "ПоискНекорректныхСсылок", Ложь);
	ТонкийКлиент									= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Настройки, "ТонкийКлиент", Ложь);
	ВебКлиент										= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Настройки, "ВебКлиент", Ложь);
	Сервер											= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Настройки, "Сервер", Ложь);
	ТолстыйКлиент									= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Настройки, "ТолстыйКлиент", Ложь);
	ТолстыйКлиентКлиентСервер						= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Настройки, "ТолстыйКлиентКлиентСервер", Ложь);
	МобильноеПриложениеКлиент						= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Настройки, "МобильноеПриложениеКлиент", Ложь);
	МобильноеПриложениеСервер						= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Настройки, "МобильноеПриложениеСервер", Ложь);
	ВнешнееСоединение								= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Настройки, "ВнешнееСоединение", Ложь);
	ВнешнееСоединениеКлиентСервер					= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Настройки, "ВнешнееСоединениеКлиентСервер", Ложь);
	МобильныйКлиент									= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Настройки, "МобильныйКлиент", Ложь);
	МобильныйКлиентАвтономныйРежим					= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Настройки, "МобильныйКлиентАвтономныйРежим", Ложь);
	ПоставкаБезИсходныхКодов						= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Настройки, "ПоставкаБезИсходныхКодов", Ложь);
	ТолстыйКлиентОбычноеПриложение					= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Настройки, "ТолстыйКлиентОбычноеПриложение", Ложь);
	ТолстыйКлиентОбычнойПриложениеКлиентСервер		= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Настройки, "ТолстыйКлиентОбычнойПриложениеКлиентСервер", Ложь);
	ПоискНеиспользуемыхМетодов						= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Настройки, "ПоискНеиспользуемыхМетодов", Ложь);
	ПроверкаСуществованияНазначенныхОбработчиков	= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Настройки, "ПроверкаСуществованияНазначенныхОбработчиков", Ложь);
	ПоискПустыхОбработчиков							= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Настройки, "ПоискПустыхОбработчиков", Ложь);
	РасширеннаяПроверка								= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Настройки, "РасширеннаяПроверка", Ложь);
	ПоискИспользованияМодальности					= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Настройки, "ПоискИспользованияМодальности", Ложь);
	ПоискИспользованияСинхронныхВызовов				= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Настройки, "ПоискИспользованияСинхронныхВызовов", Ложь);
	ПоискНеподдерживаемойФункциональности			= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Настройки, "ПоискНеподдерживаемойФункциональности", Ложь);
	ПроверкаПодписи									= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Настройки, "ПроверкаПодписи", Ложь);
	ВсеРасширения									= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Настройки, "ВсеРасширения", Ложь);
	ИмяРасширения									= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Настройки, "ИмяРасширения", "");

	СтрПараметры = "";
	
	Если ПроверкаЛогическойЦелостностиКонфигурации = Истина Тогда
		СтрПараметры = СтрПараметры + " –ConfigLogIntegrity";
	КонецЕсли;
	
	Если ПоискНекорректныхСсылок = Истина Тогда
		СтрПараметры = СтрПараметры + " –IncorrectReferences";
	КонецЕсли;
	
	Если ТонкийКлиент = Истина Тогда
		СтрПараметры = СтрПараметры + " –ThinClient";
	КонецЕсли;
	
	Если ВебКлиент = Истина Тогда
		СтрПараметры = СтрПараметры + " –WebClient";
	КонецЕсли;
	
	Если Сервер = Истина Тогда
		СтрПараметры = СтрПараметры + " –Server";
	КонецЕсли;
	
	Если ТолстыйКлиент = Истина Тогда
		СтрПараметры = СтрПараметры + " –ThickClientManagedApplication";
	КонецЕсли;
	
	Если ТолстыйКлиентКлиентСервер = Истина Тогда
		СтрПараметры = СтрПараметры + " –ThickClientServerManagedApplication";
	КонецЕсли;
	
	Если МобильноеПриложениеКлиент = Истина Тогда
		СтрПараметры = СтрПараметры + " –MobileAppClient";
	КонецЕсли;
	
	Если МобильноеПриложениеСервер = Истина Тогда
		СтрПараметры = СтрПараметры + " –MobileAppServer";
	КонецЕсли;
	
	Если ВнешнееСоединение = Истина Тогда
		СтрПараметры = СтрПараметры + " –ExternalConnection";
	КонецЕсли;
	
	Если ВнешнееСоединениеКлиентСервер = Истина Тогда
		СтрПараметры = СтрПараметры + " –ExternalConnectionServer";
	КонецЕсли;
	
	Если МобильныйКлиент = Истина Тогда
		СтрПараметры = СтрПараметры + " –MobileClient";
	КонецЕсли;
	
	Если МобильныйКлиентАвтономныйРежим = Истина Тогда
		СтрПараметры = СтрПараметры + " –MobileClientStandalone";
	КонецЕсли;
	
	Если ПоставкаБезИсходныхКодов = Истина Тогда
		СтрПараметры = СтрПараметры + " –DistributiveModules";
	КонецЕсли;
	
	Если ТолстыйКлиентОбычноеПриложение = Истина Тогда
		СтрПараметры = СтрПараметры + " –ThickClientOrdinaryApplication";
	КонецЕсли;
	
	Если ТолстыйКлиентОбычнойПриложениеКлиентСервер = Истина Тогда
		СтрПараметры = СтрПараметры + " –ThickClientServerOrdinaryApplication";
	КонецЕсли;
	
	Если ПоискНеиспользуемыхМетодов = Истина Тогда
		СтрПараметры = СтрПараметры + " –UnreferenceProcedures";
	КонецЕсли;
	
	Если ПроверкаСуществованияНазначенныхОбработчиков = Истина Тогда
		СтрПараметры = СтрПараметры + " –HandlersExistence";
	КонецЕсли;
	
	Если ПоискПустыхОбработчиков = Истина Тогда
		СтрПараметры = СтрПараметры + " –EmptyHandlers";
	КонецЕсли;
	
	Если РасширеннаяПроверка = Истина Тогда
		СтрПараметры = СтрПараметры + " –ExtendedModulesCheck";
		
		Если ПоискИспользованияМодальности = Истина Тогда
			СтрПараметры = СтрПараметры + " –CheckUseModality";
		КонецЕсли;
		
		Если ПоискИспользованияСинхронныхВызовов = Истина Тогда
			СтрПараметры = СтрПараметры + " –CheckUseSynchronousCalls";
		КонецЕсли;
	КонецЕсли;
	
	Если ПоискНеподдерживаемойФункциональности = Истина Тогда
		СтрПараметры = СтрПараметры + " –UnsupportedFunctional";
	КонецЕсли;
	
	Если ПроверкаПодписи = Истина Тогда
		СтрПараметры = СтрПараметры + " –MobileClientDigiSign";
	КонецЕсли;
	
	Если ВсеРасширения Тогда
		СтрПараметры = СтрПараметры + " –AllExtensions";
	ИначеЕсли НЕ ПустаяСтрока(ИмяРасширения) Тогда
		СтрПараметры = СтрПараметры + " -Extension " + ИмяРасширения;
	КонецЕсли;
	
	Возврат СтрШаблон("/CheckConfig%1",
		СтрПараметры);
КонецФункции

// Возвращает строку для запуска обновления из хранилища
//	/UpdateDBCfg
//
// Параметры:
//	Настройки - Структура - см. НастройкиОбновленияКонфигурацииИБ
//
// Возвращаемое значение:
//   Строка
// 
Функция ПараметрыОбновленияКонфигурацииИБ(знач Настройки) Экспорт
	Если НЕ ТипЗнч(Настройки) = Тип("Структура") Тогда
		Возврат "";
	КонецЕсли;
	
	ДинамическоеОбновление			= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Настройки, "ДинамическоеОбновление", Неопределено);
	ФоновоеОбновлениеСтарт			= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Настройки, "ФоновоеОбновлениеСтарт", Ложь);
	ФоновоеОбновлениеОтмена			= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Настройки, "ФоновоеОбновлениеОтмена", Ложь);
	ФоновоеОбновлениеЗавершить		= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Настройки, "ФоновоеОбновлениеЗавершить", Ложь);
	ФоновоеОбновлениеОстановить		= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Настройки, "ФоновоеОбновлениеОстановить", Ложь);
	ФоновоеОбновлениеПродолжить		= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Настройки, "ФоновоеОбновлениеПродолжить", Ложь);
	ПредупрежденияКакОшибки			= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Настройки, "ПредупрежденияКакОшибки", Ложь);
	ВыполнятьНаСервере				= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Настройки, "ВыполнятьНаСервере", Ложь);
	ВерсияМеханизмаРеструктуризации = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Настройки, "ВерсияМеханизмаРеструктуризации", 0);
	ИмяРасширения					= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Настройки, "ИмяРасширения", "");

	СтрПараметры = "";
	
	Если ДинамическоеОбновление = Истина Тогда
		СтрПараметры = СтрПараметры + " -Dynamic+";
	ИначеЕсли ДинамическоеОбновление = Ложь Тогда
		СтрПараметры = СтрПараметры + " -Dynamic-";
	КонецЕсли;
	
	Если ФоновоеОбновлениеСтарт = Истина Тогда
		СтрПараметры = СтрПараметры + " -BackgroundStart";
	КонецЕсли;
	
	Если ФоновоеОбновлениеОтмена = Истина Тогда
		СтрПараметры = СтрПараметры + " -BackgroundCancel";
	КонецЕсли;
	
	Если ФоновоеОбновлениеЗавершить = Истина Тогда
		СтрПараметры = СтрПараметры + " -BackgroundFinish";
	КонецЕсли;
	
	Если ФоновоеОбновлениеОстановить = Истина Тогда
		СтрПараметры = СтрПараметры + " -BackgroundSuspend";
	КонецЕсли;
	
	Если ФоновоеОбновлениеПродолжить = Истина Тогда
		СтрПараметры = СтрПараметры + " -BackgroundResume";
	КонецЕсли;
	
	Если ПредупрежденияКакОшибки = Истина Тогда
		СтрПараметры = СтрПараметры + " -WarningsAsErrors";
	КонецЕсли;
	
	Если ВыполнятьНаСервере = Истина Тогда
		СтрПараметры = СтрПараметры + " -Server";
	КонецЕсли;
	
	Если ВерсияМеханизмаРеструктуризации = 1 Тогда
		СтрПараметры = СтрПараметры + " -v1";
	ИначеЕсли ВерсияМеханизмаРеструктуризации = 1 Тогда
		СтрПараметры = СтрПараметры + " -v2";
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ИмяРасширения) Тогда
		СтрПараметры = СтрПараметры + " -Extension " + ИмяРасширения;
	КонецЕсли;
	
	Возврат СтрШаблон("/UpdateDBCfg%1",
		СтрПараметры);
КонецФункции

// Возвращает строку для запуска обновления из хранилища
//	/ConfigurationRepositoryUpdateCfg
//
// Параметры:
//	Настройки - Структура - см. НастройкиОбновленияИзХранилища
//
// Возвращаемое значение:
//   Строка
// 
Функция ПараметрыОбновленияИзХранилища(знач Настройки) Экспорт
	Если НЕ ТипЗнч(Настройки) = Тип("Структура") Тогда
		Возврат "";
	КонецЕсли;
	
	НомерВерсии 				= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Настройки, "НомерВерсии", "");
	ПолучатьЗахваченные			= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Настройки, "ПолучатьЗахваченные", Истина);
	ИгнорироватьКонфликты		= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Настройки, "ИгнорироватьКонфликты", Ложь);
	СписокОбъектов				= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Настройки, "СписокОбъектов", "");
	ИмяРасширения				= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Настройки, "ИмяРасширения", "");
	ОбновлятьКонфигурациюБД		= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Настройки, "ОбновлятьКонфигурациюБД", Ложь);
	НастройкиОбновленияБД		= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Настройки, "НастройкиОбновленияБД", Ложь);

	СтрПараметры = "";
	
	Если ЗначениеЗаполнено(НомерВерсии) Тогда
		СтрПараметры = СтрПараметры + " -v" + НомерВерсии;
	КонецЕсли;
	
	Если ПолучатьЗахваченные = Истина Тогда
		СтрПараметры = СтрПараметры + " -revised";
	КонецЕсли;
	
	Если ИгнорироватьКонфликты = Истина Тогда
		СтрПараметры = СтрПараметры + " -force";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СписокОбъектов) Тогда
		СтрПараметры = СтрПараметры + СтрШаблон(" -Objects ""%1""", СписокОбъектов);
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ИмяРасширения) Тогда
		СтрПараметры = СтрПараметры + " -Extension " + ИмяРасширения;
	КонецЕсли;
	
	Если ОбновлятьКонфигурациюБД = Истина Тогда
		Если НЕ ТипЗнч(НастройкиОбновленияБД) = Тип("Структура") Тогда
			НастройкиОбновленияБД = НастройкиОбновленияКонфигурацииИБ();
		КонецЕсли;
		
		СтрПараметры = СтрПараметры + " " + ПараметрыОбновленияКонфигурацииИБ(НастройкиОбновленияБД);
	КонецЕсли;
	
	Возврат СтрШаблон("/ConfigurationRepositoryUpdateCfg%1",
		СтрПараметры);
КонецФункции

#КонецОбласти 

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает параметры настройки выгрузки в файлы, см. методы:
//	- ПараметрыВыгрузкиКонфигурацииВФайлы
//	- ПараметрыВыгрузкиОбработкиВФайлы
//
// Параметры:
//	КаталогВыгрузки - Строка
//	ВидВыгрузки		- Число - набор параметров зависит от вида выгрузки
//		0 - конфигурация
//		1 - внешняя обработка, отчет
//		2 - расширение
//
// Возвращаемое значение:
//	Структура
//		КаталогВыгрузки			- Строка - (0, 1, 2)
//		Иерархически			- Булево - (0, 1, 2)
//		ТолькоConfigDumpInfo	- Булево - (0, 2) выполняет обновление файла ConfigDumpInfo.xml
//			Данный признак используется только совместно с настройкой "Иерархически"
//			Выгрузка конфигурации в файлы при этом не выполняется
//		ВыгружатьИзменения		- Булево - (0, 2) 
//		ФайлИзменений			- Строка - (0, 2) файл для выгрузки изменений (ВыгружатьИзменения = ИСТИНА)
//		ФайлПредыдущейВерсии	- Строка - (0, 2) путь к ConfigDumpInfo.xml
//		ВыгружатьПоСписку		- Булево - (0, 2) 
//		ФайлСпискаВыгрузки		- Строка - (0, 2) путь к списку файлов выгрузки (ВыгружатьПоСписку = ИСТИНА)
//		ФайлОбработки			- Строка - (1) путь к файлу внешней обработки (отчета)
//		ИмяРасширения			- Строка - (2) имя расширения для выгрузки
//		ВсеРасширения			- Булево - (2) признак выгрузки всех расширений (ИмяРасширения игнорируется)
// 
Функция НастройкиВыгрузкиВФайлы(знач КаталогВыгрузки = "", знач ВидВыгрузки = 0) Экспорт
	Настройки = Новый Структура;
	Настройки.Вставить("КаталогВыгрузки"	, КаталогВыгрузки);
	Настройки.Вставить("Иерархически"		, Истина);
	
	Если ВидВыгрузки = 0 ИЛИ ВидВыгрузки = 2 Тогда
		Настройки.Вставить("ТолькоConfigDumpInfo"	, Ложь);
		Настройки.Вставить("ВыгружатьИзменения"		, Ложь);
		Настройки.Вставить("ФайлИзменений"			, "");
		Настройки.Вставить("ФайлПредыдущейВерсии"	, "");
		Настройки.Вставить("ВыгружатьПоСписку"		, Ложь);
		Настройки.Вставить("ФайлСпискаВыгрузки"		, "");
		Настройки.Вставить("ФайлРезультата"			, "");
	ИначеЕсли ВидВыгрузки = 1 Тогда
		Настройки.Вставить("ФайлОбработки"			, "");
	КонецЕсли;
	
	Если ВидВыгрузки = 2 Тогда
		Настройки.Вставить("ИмяРасширения"	, "");
		Настройки.Вставить("ВсеРасширения"	, Ложь);
	КонецЕсли;
	
	Возврат Настройки;
КонецФункции

// Возвращает параметры настройки загрузки из файлов
//
// Параметры:
//	КаталогЗагрузки - Строка
//	ВидЗагрузки		- Число - набор параметров зависит от вида выгрузки
//		0 - конфигурация
//		1 - внешняя обработка, отчет
//		2 - расширение
//
// Возвращаемое значение:
//	Структура
//		КаталогЗагрузки			- Строка - (0, 1, 2)
//		Иерархически			- Булево - (0, 2)
//		ФайлСпискаЗагрузки		- Строка - (0, 2) путь к списку файлов загрузки
//		ОбновитьФайлВерсии		- Булево - (0, 2) флаг -updateConfigDumpInfo
//		ОбновлятьКонфигурациюБД	- Булево - (0, 2) выполнять обновление конфигурации базы данных
//		НастройкиОбновленияБД	- Структура - (0, 2) настройки обновления конфигурации базы данных
//		ФайлОбработки			- Строка - (1) путь к файлу внешней обработки (отчета)
//		ИмяРасширения			- Строка - (2) имя расширения для загрузки
//		ВсеРасширения			- Булево - (2) признак загрузки всех расширений (ИмяРасширения игнорируется)
// 
Функция НастройкиЗагрузкиИзФайлов(знач КаталогЗагрузки = "", знач ВидЗагрузки = 0) Экспорт
	Настройки = Новый Структура;
	Настройки.Вставить("КаталогЗагрузки", КаталогЗагрузки);
	
	Если ВидЗагрузки = 0 ИЛИ ВидЗагрузки = 2 Тогда
		НастройкиОбновленияБД = НастройкиОбновленияКонфигурацииИБ();
		НастройкиОбновленияБД.ДинамическоеОбновление = Истина;
		
		Настройки.Вставить("Иерархически"			, Истина);
		Настройки.Вставить("ФайлСпискаЗагрузки"		, "");
		Настройки.Вставить("ОбновитьФайлВерсии"		, Ложь);
		Настройки.Вставить("ОбновлятьКонфигурациюБД", Истина);
		Настройки.Вставить("НастройкиОбновленияБД"	, НастройкиОбновленияБД);
	ИначеЕсли ВидЗагрузки = 1 Тогда
		Настройки.Вставить("ФайлОбработки"			, "");
	КонецЕсли;
	
	Если ВидЗагрузки = 2 Тогда
		Настройки.Вставить("ИмяРасширения"	, "");
		Настройки.Вставить("ВсеРасширения"	, Ложь);
	КонецЕсли;
	
	Возврат Настройки;
КонецФункции

// Возвращает параметры настройки обновления конфигурации из файла
//
// Возвращаемое значение:
//   Структура
//		СпособОбновления				- Число - по умолчанию 0
//			0 - обновление	/UpdateCfg
//			1 - сравнение	/MergeCfg
//			2 - загрузка	/LoadCfg
//		ФайлОбновления					- Строка - путь к файлу *.cf, *.cfu
//		ФайлПравилОбъединения			- Строка - не обязательный
//		ИмяРасширения					- Строка - имя расширения, если обновление выполняется для него
//		ОбъединитьВсеСвязанныеОбъекты	- Булево - помечать все связанные объекты (IncludeObjectsByUnresolvedRefs)
//		ОчиститьВсеСвязанныеОбъекты		- Булево - ссылки на объекты, не включенные в список объединяемых объектов, очищаются
//		ВывестиДваждыИзмененные			- Булеов - вывести в файл лога все дважды измененные объекты
//		ИгнорироватьКонфликты			- Булево - проводить объединение в случае наличия
//			- предупреждений об удаляемых объектах, на которые есть ссылки в объектах, не
//				участвующих в объединении (такие объекты будут исключены из объединения).
//			- предупреждений о наличии дважды измененных свойств, для которых не был выбран
//				режим объединения (такие свойства будут объединены с настройками по умолчанию).
//			- объектов, изменение которых запрещено правилами поддержки (такие объекты будут
//				исключены из объединения).
//			- предупреждений о применении настроек
//		ОбновлятьКонфигурациюБД			- Булево - по умолчанию Истина
//		НастройкиОбновленияБД			- Структура - настройки обновления конфигурации базы данных
// 
Функция НастройкиОбновленияИзФайла() Экспорт
	НастройкиОбновленияБД = НастройкиОбновленияКонфигурацииИБ();
	НастройкиОбновленияБД.ДинамическоеОбновление = Истина;
	
	Настройки = Новый Структура;
	Настройки.Вставить("СпособОбновления"				, 0);
	Настройки.Вставить("ФайлОбновления"					, "");
	Настройки.Вставить("ФайлПравилОбъединения"			, "");
	Настройки.Вставить("ИмяРасширения"					, "");
	Настройки.Вставить("ОбъединитьВсеСвязанныеОбъекты"	, Истина);
	Настройки.Вставить("ОчиститьВсеСвязанныеОбъекты"	, Ложь);
	Настройки.Вставить("ВывестиДваждыИзмененные"		, Ложь);
	Настройки.Вставить("ИгнорироватьКонфликты"			, Ложь);
	Настройки.Вставить("ОбновлятьКонфигурациюБД"		, Истина);
	Настройки.Вставить("НастройкиОбновленияБД"			, НастройкиОбновленияБД);
	
	Возврат Настройки;
КонецФункции

// Возвращает параметры настройки создания дистрибутива конфигурации
//
// Параметры:
//	ПутьКФайлуCF - Строка
//
// Возвращаемое значение:
//	ПутьКФайлуCF	- Строка
//	ПутьКФайлуCFU	- Строка
//	Основания		- Массив - значение массива Структура
//		ПутьКФайлу	- Строка
//		НомерРелиза	- Строка
//
Функция НастройкиСозданияДистрибутива(знач ПутьКФайлуCF) Экспорт
	Настройки = Новый Структура;
	Настройки.Вставить("ПутьКФайлуCF"	, ПутьКФайлуCF);
	Настройки.Вставить("ПутьКФайлуCFU"	, "");
	Настройки.Вставить("Основания"		, Новый Массив);
	
	Возврат Настройки;
КонецФункции

// Возвращает параметры настройки создания базы данных
//
// Параметры:
//	ТипБД - Число
//		0 - файловая
//		1 - серверная
//
// Возвращаемое значение:
//   Структура
//		Файловая база данных:
//			ПутьККаталогу		- Строка - путь к каталогу базы данных
//			Язык				- Строка - не обязательный, как в функции Формат()
//			ФорматБД			- Строка - не обязательный, 8.2.14 и 8.3.8
//			РазмерСтраницыБД	- Строка - не обязательный, 4096 или 4k, 8192 или 8k, 16384 или 16k, 32768 или 32k, 65536 или 64k
//		Серверная база данных
//			ИмяСервера				- Строка - имя сервера «1С:Предприятия» в формате: [<протокол>://]<адрес>[:<порт>]
//			ИмяНаСервере1С			- Строка - имя базы данных на сервере 1С
//			ТипСервераБД			- Строка - MSSQLServer (по умолчанию), PostgreSQL, IBMDB2, OracleDatabase
//			ИмяСервераБД			- Строка - имя сервера базы данных
//			ИмяНаСервереБД			- Строка - имя базы данных на сервере БД, не обязательный, по умолчанию = ИмяНаСервере1С
//			ПользовательСервераБД	- Структура
//				Имя		- Строка
//				Пароль	- Строка
//			СмещениеДат				- Число - 0 или 2000 (по умолчанию). Только для ТипСервераБД = MSSQLServer
//			Язык					- Строка - не обязательный, как в функции Формат()
//			СоздатьБД				- Булево - создать базу данных в случае ее отсутствия. Ложь (по умолчанию)
//			ОтключитьРеглЗадания	- Булево - запретить выполнение регламентных созданий. Ложь (по умолчанию)
//			АдминистраторКластера	- Структура - не обязательный. Имя администратора кластера
//				Имя		- Строка
//				Пароль	- Строка
// 
Функция НастройкиСозданияБазы(знач ТипБД) Экспорт 
	Настройки = Новый Структура;
	Настройки.Вставить("ТипБД", ТипБД);
	
	Если ТипБД = 1 Тогда
		Настройки.Вставить("ИмяСервера"				, "");
		Настройки.Вставить("ИмяНаСервере1С"			, "");
		Настройки.Вставить("ТипСервераБД"			, "MSSQLServer");
		Настройки.Вставить("ИмяСервераБД"			, "");
		Настройки.Вставить("ИмяНаСервереБД"			, "");
		Настройки.Вставить("ПользовательСервераБД"	, Новый Структура("Имя, Пароль", "", ""));
		Настройки.Вставить("СмещениеДат"			, 2000);
		Настройки.Вставить("СоздатьБД"				, Ложь);
		Настройки.Вставить("ОтключитьРеглЗадания"	, Ложь);
		Настройки.Вставить("АдминистраторКластера"	, Новый Структура("Имя, Пароль", "", ""));
	Иначе
		Настройки.Вставить("ПутьККаталогу"		, "");
		Настройки.Вставить("ФорматБД"			, "");
		Настройки.Вставить("РазмерСтраницыБД"	, "");
	КонецЕсли;
	
	Настройки.Вставить("Язык", "");
	
	Возврат Настройки;
КонецФункции

// Возвращает параметры настройки проверки модулей
//
// Возвращаемое значение:
//   Структура
//		ТонкийКлиент				- проверка в режиме работы тонкого клиента;
//		ВебКлиент					- проверка в режиме работы веб-клиента;
//		МобильныйКлиент				- проверка в режиме работы мобильного клиента;
//		КлиентМобильногоПриложения	- проверка в режиме работы клиента мобильного приложения;
//		Сервер						- проверка в режиме работы сервера «1С:Предприятия»;
//		СерверМобильногоПриложения	- проверка в режиме работы сервера мобильного приложения;
//		ВнешнееСоединение			- проверка в режиме работы внешнего соединения;
//		ТолстыйКлиент				- проверка в режиме работы клиентского приложения;
//		РасширеннаяПроверка			- проверка обращений к методам и свойствам объектов «через точку»
//			(для ограниченного набора типов); проверка правильности строковых литералов ‑ параметров
//			некоторых функций, таких как ПолучитьФорму().
//		ИмяРасширения				- выполнить заданные проверки для указанного расширения.
//		ВсеРасширения				- выполнить заданные проверки для всех расширений.
// 
Функция НастройкиПроверкиМодулей() Экспорт 
	Настройки = Новый Структура;
	Настройки.Вставить("ТонкийКлиент"				, Ложь);
	Настройки.Вставить("ВебКлиент"					, Ложь);
	Настройки.Вставить("МобильныйКлиент"			, Ложь);
	Настройки.Вставить("КлиентМобильногоПриложения"	, Ложь);
	Настройки.Вставить("Сервер"						, Истина);
	Настройки.Вставить("СерверМобильногоПриложения"	, Ложь);
	Настройки.Вставить("ВнешнееСоединение"			, Ложь);
	Настройки.Вставить("ТолстыйКлиент"				, Ложь);
	Настройки.Вставить("РасширеннаяПроверка"		, Ложь);
	Настройки.Вставить("ВсеРасширения"				, Ложь);
	Настройки.Вставить("ИмяРасширения"				, "");
	
	Возврат Настройки; 
КонецФункции

// Возвращает параметры настройки проверки конфигурации
//
// Возвращаемое значение:
//   Структура
//		ПроверкаЛогическойЦелостностиКонфигурации	- проверка логической целостности конфигурации. Стандартная проверка,
//			обычно выполняемая перед обновлением базы данных
//		ПоискНекорректныхСсылок						- поиск некорректных ссылок. Поиск ссылок на удаленные объекты.
//			Выполняется по всей конфигурации, включая права, формы, макеты, интерфейсы и т. д. Также осуществляется
//			поиск логически неправильных ссылок;
//
//		Синтаксический контроль модулей
//			ТонкийКлиент					- синтаксический контроль модулей для режима эмуляции среды управляемого приложения
//				(тонкий клиент), выполняемого в файловом режиме;
//			ВебКлиент						- синтаксический контроль модулей в режиме эмуляции среды веб-клиента;
//			МобильныйКлиент					- синтаксический контроль модулей в режиме эмуляции среды мобильного клиента;
//			Сервер							- синтаксический контроль модулей в режиме эмуляции среды сервера «1С:Предприятия»;
//			ВнешнееСоединение				- синтаксический контроль модулей в режиме эмуляции среды внешнего соединения,
//				выполняемого в файловом режиме;
//			ВнешнееСоединениеКлиентСервер	- синтаксический контроль модулей в режиме эмуляции среды внешнего соединения,
//				выполняемого в клиент-серверном режиме;
//			МобильноеПриложениеКлиент		- синтаксический контроль модулей в режиме эмуляции среды мобильной платформы,
//				выполняемой в клиентском режиме запуска;
//			МобильноеПриложениеСервер		- синтаксический контроль модулей в режиме эмуляции среды мобильной платформы,
//				выполняемой в серверном режиме запуска;
//			МобильныйКлиентАвтономныйРежим 	- синтаксический контроль модулей в режиме эмуляции среды мобильного клиента,
//				работающего в автономном режиме;
//			ТолстыйКлиент					- синтаксический контроль модулей в режиме эмуляции среды управляемого приложения
//				(толстый клиент), выполняемого в файловом режиме;
//			ТолстыйКлиентКлиентСервер		- синтаксический контроль модулей в режиме эмуляции среды управляемого приложения
//				(толстый клиент), выполняемого в клиент-серверном режиме;
//			ПоставкаБезИсходныхКодов		- поставка модулей без исходных текстов. В случае если в настройках поставки конфигурации
//				для некоторых модулей указана поставка без исходных текстов, проверяется возможность генерации образов этих модулей;
//			ТолстыйКлиентОбычноеПриложение				- синтаксический контроль модулей в режиме эмуляции среды обычного приложения
//				(толстый клиент), выполняемого в файловом режиме;
//			ТолстыйКлиентОбычнойПриложениеКлиентСервер	- синтаксический контроль модулей в режиме эмуляции среды обычного приложения
//				(толстый клиент), выполняемого в клиент-серверном режиме;
//
//		Логическая проверка модулей
//			ПоискНеиспользуемыхМетодов						- поиск неиспользуемых процедур и функций. Поиск локальных (не экспортных)
//				процедур и функций, на которые отсутствуют ссылки. В том числе осуществляется поиск неиспользуемых обработчиков событий;
//			ПроверкаСуществованияНазначенныхОбработчиков	- проверка существования назначенных обработчиков. Проверка существования
//				обработчиков событий интерфейсов, форм и элементов управления;
//			ПоискПустыхОбработчиков							- поиск пустых обработчиков. Поиск назначенных обработчиков событий, в которых
//				не выполняется никаких действий. Существование таких обработчиков может привести к снижению производительности системы;
//			РасширеннаяПроверка								- проверка обращений к методам и свойствам объектов «через точку» (для
//				ограниченного набора типов); проверка правильности строковых литералов ‑ параметров некоторых функций, таких как ПолучитьФорму();
//			ПоискИспользованияМодальности					- режим поиска использования в модулях методов, связанных с модальностью.
//				Параметр используется только вместе с параметром РасширеннаяПроверка.
//			ПоискИспользованияСинхронныхВызовов				- режим поиска использования в модулях синхронных методов. Параметр используется
//				только вместе с параметром РасширеннаяПроверка.
//
//		Проверка мобильного приложения
//			ПоискНеподдерживаемойФункциональности - выполняется поиск функциональности, которая не может быть выполнена в приложении для
//				мобильного устройства. Проверка в этом режиме показывает: 
//				- наличие в конфигурации метаданных, классы которых не реализованы на мобильной платформе;
//				- наличие в конфигурации планов обмена, у которых установлено свойство Распределенная информационная база;
//				- использование типов, которые не реализованы на мобильной платформе:
//					- в свойствах Тип реквизитов метаданных, констант, параметров сеанса;
//					- в свойстве Тип параметра команды объекта конфигурации Команда;
//					- в свойстве Тип реквизитов и колонок реквизита формы;
//				- наличие форм с типом формы Обычная;
//				- наличие в форме элементов управления, которые не реализованы на мобильной платформе. Проверка не выполняется для форм,
//				у которых свойство Назначения использования не предполагает использование на мобильном устройстве;
//				- сложный состав рабочего стола (использование более чем одной формы).
//
//		Проверка мобильного клиента
//			ПроверкаПодписи - выполняет проверку цифровой подписи конфигурации для мобильного клиента;
//
//		ВсеРасширения	- выполнить заданные проверки для указанного расширения.
//		ИмяРасширения	- выполнить заданные проверки для всех расширений.
// 
Функция НастройкиПроверкиКонфигурации() Экспорт
	Настройки = Новый Структура;
	
	Настройки.Вставить("ПроверкаЛогическойЦелостностиКонфигурации"	, Ложь);
	Настройки.Вставить("ПоискНекорректныхСсылок"					, Ложь);
	
	Настройки.Вставить("ТонкийКлиент"					, Ложь);
	Настройки.Вставить("Сервер"							, Истина);
	Настройки.Вставить("ВебКлиент"						, Ложь);
	Настройки.Вставить("ТолстыйКлиент"					, Ложь);
	Настройки.Вставить("ТолстыйКлиентКлиентСервер"		, Ложь);
	Настройки.Вставить("МобильноеПриложениеКлиент"		, Ложь);
	Настройки.Вставить("МобильноеПриложениеСервер"		, Ложь);
	Настройки.Вставить("ВнешнееСоединениеКлиентСервер"	, Ложь);
	Настройки.Вставить("ВнешнееСоединение"				, Ложь);
	Настройки.Вставить("МобильныйКлиентАвтономныйРежим"	, Ложь);
	Настройки.Вставить("МобильныйКлиент"				, Ложь);
	Настройки.Вставить("ПоставкаБезИсходныхКодов"		, Ложь);
	
	Настройки.Вставить("ТолстыйКлиентОбычноеПриложение"				, Ложь);
	Настройки.Вставить("ТолстыйКлиентОбычнойПриложениеКлиентСервер"	, Ложь);
	
	Настройки.Вставить("ПоискНеиспользуемыхМетодов"						, Ложь);
	Настройки.Вставить("ПроверкаСуществованияНазначенныхОбработчиков"	, Ложь);
	Настройки.Вставить("ПоискПустыхОбработчиков"						, Ложь);
	Настройки.Вставить("РасширеннаяПроверка"							, Ложь);
	Настройки.Вставить("ПоискИспользованияМодальности"					, Ложь);
	Настройки.Вставить("ПоискИспользованияСинхронныхВызовов"			, Ложь);
	
	Настройки.Вставить("ПоискНеподдерживаемойФункциональности", Ложь);
	
	Настройки.Вставить("ПроверкаПодписи", Ложь);
	
	Настройки.Вставить("ВсеРасширения"	, Ложь);
	Настройки.Вставить("ИмяРасширения"	, "");
	
	Возврат Настройки; 
КонецФункции

// Возвращает параметры настройки обновления информационной базы
//
// Возвращаемое значение:
//   Структура
//		ДинамическоеОбновление			- Булево, Неопределено - настройка параметра Dynamic(+/-)
//			Ложь 			- явно указывает на запрет динамического обновления (-)
//			Истина			- разрешает динамическое обновление (+)
//			Неопределено	- параметр не указывается
//		ФоновоеОбновлениеСтарт			- Булево - запускает фоновое обновление конфигурации базы данных и завершает работу
//		ФоновоеОбновлениеОтмена			- Булево - отменяет ранее запущенное фоновое обновление конфигурации базы данных
//		ФоновоеОбновлениеЗавершить		- Булево - завершает фоновое обновление конфигурации базы данных
//		ФоновоеОбновлениеОстановить		- Булево - приостанавливает фоновое обновление конфигурации базы данных
//		ФоновоеОбновлениеПродолжить		- Булево - продолжает фоновое обновление конфигурации базы данных, приостановленное ранее
//		ПредупрежденияКакОшибки			- Булево - все предупредительные сообщения будут трактоваться как ошибки
//		ВыполнятьНаСервере				- Булево - обновление будет выполняться на сервере
//		ВерсияМеханизмаРеструктуризации	- Число - определяет используемый механизм реструктуризации
//			0 - будет использоваться механизм реструктуризации той версии, которая указана в файле conf.cfg
//			1 - обычный механизм реструктуризации. Единственный вариант реструктуризации в «1С:Предприятии» версии 8.3.10 и младше.
//			2 - оптимизированный механизм реструктуризации. Подробнее см. ИТС про файл conf.cfg и параметр UpdateDBCfg
//		ИмяРасширения	- выполнить заданные проверки для всех расширений.
// 
Функция НастройкиОбновленияКонфигурацииИБ() Экспорт
	Настройки = Новый Структура;
	
	Настройки.Вставить("ДинамическоеОбновление"	, Неопределено);
	
	Настройки.Вставить("ФоновоеОбновлениеСтарт"			, Ложь);
	Настройки.Вставить("ФоновоеОбновлениеОтмена"		, Ложь);
	Настройки.Вставить("ФоновоеОбновлениеЗавершить"		, Ложь);
	Настройки.Вставить("ФоновоеОбновлениеОстановить"	, Ложь);
	Настройки.Вставить("ФоновоеОбновлениеПродолжить"	, Ложь);
	
	Настройки.Вставить("ПредупрежденияКакОшибки", Ложь);
	
	Настройки.Вставить("ВыполнятьНаСервере", Ложь);
	
	Настройки.Вставить("ВерсияМеханизмаРеструктуризации", 0);
	
	Настройки.Вставить("ИмяРасширения", "");
	
	Возврат Настройки; 
КонецФункции

// Возвращает параметры настройки обновления из хранилища
//
// Возвращаемое значение:
//   Структура
//		НомерВерсии				- Строка - номер версии в хранилище конфигурации. В том случае, если конфигурация подключена
//			к хранилищу, то номер версии (если он указан) игнорируется и будет получена актуальная версия конфигурации хранилища.
//			Если конфигурация не подключена к хранилищу, то выполняется получение указанной версии, а если версия не указана
//			(или значение равно -1) - будет получена актуальная версия конфигурации
//		ПолучатьЗахваченные		- Булево - получать захваченные объекты, если потребуется. Если конфигурация не подключена к
//			хранилищу, то параметр игнорируется
//		ИгнорироватьКонфликты	- Булево - если при пакетном обновлении конфигурации из хранилища должны быть получены новые
//			объекты конфигурации или удалиться существующие, указание этого параметра свидетельствует о подтверждении 
//			пользователем описанных выше операций
//		СписокОбъектов			- Строка - путь к файлу со списком объектов, которые будут участвовать в операции.
//			Если файл указан ‑ в операции участвуют только указанные в файле объекты, в противном случае участвует вся
//			конфигурация. Описание формата файла на ИТС (https://its.1c.ru/db/v8316doc#bookmark:adm:TI000000419)
//		ИмяРасширения			- Строка - имя расширения, если обновление выполняется для него
//		ОбновлятьКонфигурациюБД	- Булево - по умолчанию Истина
//		НастройкиОбновленияБД	- Структура - настройки обновления конфигурации базы данных, по умолчанию Динамически
//			
// 
Функция НастройкиОбновленияИзХранилища() Экспорт
	НастройкиОбновленияБД = НастройкиОбновленияКонфигурацииИБ();
	НастройкиОбновленияБД.ДинамическоеОбновление = Истина;
	
	Настройки = Новый Структура;
	Настройки.Вставить("НомерВерсии"				, "");
	Настройки.Вставить("ПолучатьЗахваченные"		, Истина);
	Настройки.Вставить("ИгнорироватьКонфликты"		, Ложь);
	Настройки.Вставить("СписокОбъектов"				, "");
	Настройки.Вставить("ИмяРасширения"				, "");
	Настройки.Вставить("ОбновлятьКонфигурациюБД"	, Истина);
	Настройки.Вставить("НастройкиОбновленияБД"		, НастройкиОбновленияБД);
	
	Возврат Настройки;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПараметрыСозданияБазы_Файловая(знач Настройки)
	ЗначLocale		= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Настройки, "Язык", "");
	ЗначDBFormat	= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Настройки, "ФорматБД", "");
	ЗначDBPageSize	= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Настройки, "РазмерСтраницыБД", "");
	
	СтрокаПараметры = "";
	
	Если НЕ ПустаяСтрока(ЗначLocale) Тогда
		СтрокаПараметры = СтрокаПараметры + СтрШаблон(";Locale=%1", ЗначLocale);
	КонецЕсли;
	Если НЕ ПустаяСтрока(ЗначDBFormat) Тогда
		СтрокаПараметры = СтрокаПараметры + СтрШаблон(";DBFormat=%1", ЗначDBFormat);
	КонецЕсли;
	Если НЕ ПустаяСтрока(ЗначDBPageSize) Тогда
		СтрокаПараметры = СтрокаПараметры + СтрШаблон(";DBPageSize=%1", ЗначDBPageSize);
	КонецЕсли;
	
	Возврат СтрШаблон("File=""%1""%2",
		Настройки.ПутьККаталогу,
		СтрокаПараметры);
КонецФункции

Функция ПараметрыСозданияБазы_Серверная(знач Настройки)
	ЗначDBSrvr		= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Настройки, "ИмяСервераБД", "");
	ЗначDB			= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Настройки, "ИмяНаСервереБД", "");
	ЗначDBUID_Pwd	= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Настройки, "ПользовательСервераБД", Новый Структура("Имя, Пароль", "", ""));
	ЗначSQLYOffs	= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Настройки, "СмещениеДат", 2000);
	ЗначLocale		= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Настройки, "Язык", "");
	ЗначCrSQLDB		= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Настройки, "СоздатьБД", Ложь);
	ЗначSchJobDn	= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Настройки, "ОтключитьРеглЗадания", Ложь);
	ЗначSUsr_Pwd	= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Настройки, "АдминистраторКластера", Новый Структура("Имя, Пароль", "", ""));
	
	СтрокаПараметры = "";
	
	Если НЕ ПустаяСтрока(ЗначDBSrvr) Тогда
		СтрокаПараметры = СтрокаПараметры + СтрШаблон(";DBSrvr=""%1""", ЗначDBSrvr);
	КонецЕсли;
	Если НЕ ПустаяСтрока(ЗначDB) Тогда
		СтрокаПараметры = СтрокаПараметры + СтрШаблон(";DB=""%1""", ЗначDB);
	КонецЕсли;
	Если НЕ ПустаяСтрока(ЗначDBUID_Pwd.Имя) Тогда
		СтрокаПараметры = СтрокаПараметры + СтрШаблон(";DBUID=""%1""", ЗначDBUID_Pwd.Имя);
		
		Если НЕ ПустаяСтрока(ЗначDBUID_Pwd.Пароль) Тогда
			СтрокаПараметры = СтрокаПараметры + СтрШаблон(";DBPwd=""%1""", ЗначDBUID_Pwd.Пароль);
		КонецЕсли;
	КонецЕсли;
	Если НРег(Настройки.ТипСервераБД) = "mssqlserver" И (ЗначSQLYOffs = 0 ИЛИ ЗначSQLYOffs = 2000) Тогда
		СтрокаПараметры = СтрокаПараметры + СтрШаблон(";SQLYOffs=%1", Формат(ЗначSQLYOffs, "ЧН=0; ЧГ="));
	КонецЕсли;
	Если НЕ ПустаяСтрока(ЗначLocale) Тогда
		СтрокаПараметры = СтрокаПараметры + СтрШаблон(";Locale=%1", ЗначLocale);
	КонецЕсли;
	Если ЗначCrSQLDB = Истина Тогда
		СтрокаПараметры = СтрокаПараметры + ";CrSQLDB=Y";
	КонецЕсли;
	Если ЗначSchJobDn = Истина Тогда
		СтрокаПараметры = СтрокаПараметры + ";SchJobDn=Y";
	КонецЕсли;
	Если НЕ ПустаяСтрока(ЗначSUsr_Pwd.Имя) Тогда
		СтрокаПараметры = СтрокаПараметры + СтрШаблон(";SUsr=""%1""", ЗначSUsr_Pwd.Имя);
		
		Если НЕ ПустаяСтрока(ЗначSUsr_Pwd.Пароль) Тогда
			СтрокаПараметры = СтрокаПараметры + СтрШаблон(";SPwd=""%1""", ЗначSUsr_Pwd.Пароль);
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтрШаблон("Srvr=""%1"";Ref=""%2"";DBMS=""%3""%4",
		Настройки.ИмяСервера,
		Настройки.ИмяНаСервере1С,
		Настройки.ТипСервераБД,
		СтрокаПараметры);
КонецФункции

#КонецОбласти
