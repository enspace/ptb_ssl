// Общее описание механизма подготовки и вывода макетов печатных форм
//
// Для формирования печатных форм необходимо объявить переменную для хранения данных
// заполнения области. Переменная должна иметь тип Структура. Она используется для
// передачи в методы как параметр Области. В конечном виде структура будет иметь ключи:
//	Параметры				- Структура - см. ДобавитьПараметрыОбласти
//	Представления			- Структура - см. ДобавитьПолеПредставления
//		Поля представлений формируются используя 3 необходимых параметра:
//			Реквизиты	- Строка - перечень полных путей параметров в порядке вывода
//			Префиксы	- Структура - префиксы подстановки к значениям
//				Установка выполняется с учетом пути к реквизитам.
//			Форматы		- Структура - форматы применяемые к значениям
//				Установка выполняется с учетом пути к реквизитам.
//		Ключ		- Строка - имя переменной
//		Значение	- Структура - см. КоллекцияПредставление
//	ПользовательскиеПоля	- Структура - см. ДобавитьПользовательскоеПоле
//
   
#Область ПараметрыОбласти

// Применяет параметры макета к настройкам для вывода области
//
// Параметры:
//	Области			- Структура  
//	ПараметрыМакета - Структура
//
Процедура ПрименитьПараметрыМакетаКДаннымОбластей(знач Области, знач ПараметрыМакета) Экспорт
	Если НЕ ТипЗнч(ПараметрыМакета) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого КлючиРазделы Из ПараметрыМакета Цикл                             
		ИмяРаздела				= КлючиРазделы.Ключ;
		Представления			= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(КлючиРазделы.Значение, "Представления", Новый Структура);
		ПользовательскиеПоля	= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(КлючиРазделы.Значение, "ПользовательскиеПоля", Новый Структура);
		
		Для Каждого КлючИЗначение Из Представления Цикл
			ОбщегоНазначенияПТБКлиентСервер.УстановитьСвойствоСтруктуры(Области, ИмяРаздела + ".Представления." + КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
		Для Каждого КлючИЗначение Из ПользовательскиеПоля Цикл
			ОбщегоНазначенияПТБКлиентСервер.УстановитьСвойствоСтруктуры(Области, ИмяРаздела + ".ПользовательскиеПоля." + КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

// Добавляет параметры заполнения области макета в коллекцию настройки вывода области
//
// Параметры:
//	Области		- Структура - структура для хранения настроек области макета
//	ИмяОбласти	- Строка - имя области макета
//	Параметры	- Структура - настройка параметров для вывода области
//	ИмяСвойства	- Строка - дополнительное имя вложенной структуры, иначе оно устанавливается в корень
//
Процедура ДобавитьПараметрыОбласти(знач Области, знач ИмяОбласти, знач Параметры, знач ИмяСвойства = "") Экспорт
	ПолныйПуть = ИмяОбласти + ".Параметры" + ?(НЕ ЗначениеЗаполнено(ИмяСвойства), "", "." + ИмяСвойства);
	ОбщегоНазначенияПТБКлиентСервер.УстановитьСвойствоСтруктуры(Области, ПолныйПуть, Параметры);
КонецПроцедуры

// Добавляет настройку поля представления для формирования и добавления в коллекцию заполнения
//
// Параметры:
//	Области		- Структура - структура для хранения настроек области макета
//	ИмяОбласти	- Строка - имя области макета
//	ИмяПоля		- Строка - имя параметра представления
//	Коллекция	- Структура - см. КоллекцияПредставление
//
Процедура ДобавитьПолеПредставления(знач Области, знач ИмяОбласти, знач ИмяПоля, знач Коллекция) Экспорт
	Если НЕ ЗначениеЗаполнено(Коллекция.Реквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияПТБКлиентСервер.УстановитьСвойствоСтруктуры(Области, ИмяОбласти + ".Представления." + ИмяПоля, Коллекция);
КонецПроцедуры

// Добавляет настройку пользовательского поля для формирования и добавления в коллекцию заполнения
//
// Параметры:
//	Области		- Структура - структура для хранения настроек области макета
//	ИмяОбласти	- Строка - имя области макета
//	ИмяПоля		- Строка - имя параметра представления
//	Формула		- Строка - текст формулы для расчета через метод Вычислить
//		В качестве параметров используются строки [ПолныйПуть]
//
Процедура ДобавитьПользовательскоеПоле(знач Области, знач ИмяОбласти, знач ИмяПоля, знач Формула) Экспорт
	Если НЕ ЗначениеЗаполнено(Формула) Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияПТБКлиентСервер.УстановитьСвойствоСтруктуры(Области, ИмяОбласти + ".ПользовательскиеПоля." + ИмяПоля, Формула);
КонецПроцедуры

// Возвращает структуру коллекции для поля представления
//
// Параметры:
//	Реквизиты			- Строка	- перечень реквизитов в порядке подстановки. Полный путь через "."
//	Префиксы			- Структура - префиксы для подстановки перед значением, если оно заполнено
//	Форматы				- Структура - формат для применения к значений, если оно заполнено
//	Предопределенный	- Булево - признак что данное представление предопределенное
//
// Возвращаемое значение:
//   Структура
//		Ключи соответствуют параметрам метода
//
Функция КоллекцияПредставление(знач Реквизиты, знач Префиксы = Неопределено, знач Форматы = Неопределено, знач Предопределенный = Ложь) Экспорт
	Возврат Новый Структура("Реквизиты,Префиксы,Форматы,Предопределенный",
		Реквизиты,
		Префиксы,
		Форматы,
		Предопределенный)
КонецФункции

#КонецОбласти

#Область ПараметрыЗаполнения

// Выполняет вычисление полей представления и добавляет результат в коллекцию Заполнение
//	В качестве параметров области может быть массив или структура
//	Структура полностью заполняется в коллекцию Заполнение, из нее считываются данные путей к реквизитам
//	Если в качестве параметров области будет массив, существует два варианта расчета
//		1. Если параметр Индекс >= 0, расчет будет выполнен по элементу по переданному индексу
//		2. Если параметр Индекс не входит в границы массива, тогда для каждого элемента массива
//		будет выполнен расчет, а результат будет соединен в общую строку через "; "
//
// Параметры:
//	Заполнение	- Структура
//	Области		- Структура
//	ИмяОбласти	- Строка
//	Индекс		- Число
//
Процедура ВычислитьПоляПредставленияОбласти(знач Заполнение, знач Области, знач ИмяОбласти, знач Индекс = -1) Экспорт
	Параметры		= ОбщегоНазначенияПТБКлиентСервер.СвойствоСтруктуры(Области, ИмяОбласти + ".Параметры", Новый Структура);
	Представления	= ОбщегоНазначенияПТБКлиентСервер.СвойствоСтруктуры(Области, ИмяОбласти + ".Представления", Новый Структура);
	
	Если ТипЗнч(Параметры) = Тип("Массив") И Индекс >= 0 Тогда
		Если Индекс > Параметры.ВГраница() Тогда
			Возврат;
		КонецЕсли;
		
		ИсточникДанных = Параметры[Индекс];
	Иначе 
		ИсточникДанных = Параметры;
	КонецЕсли;
	
	ОбщегоНазначенияПТБКлиентСервер.ДополнитьСтруктуру(Заполнение, ИсточникДанных);
	
	Для Каждого КлючИЗначение Из Представления Цикл
		ИтогоПредставление = ЗначениеПоляПредставленияОбластиСлужебный(ИсточникДанных, Представления, КлючИЗначение.Ключ);
		
		Если ЗначениеЗаполнено(ИтогоПредставление) Тогда
			Заполнение.Вставить(КлючИЗначение.Ключ, ИтогоПредставление);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Выполняет вычисление пользовательских полей по переданным параметрам
//	В качестве параметров области может быть массив или структура
//	Если в качестве параметров области будет массив, существует два варианта расчета
//		1. Если параметр Индекс >= 0, расчет будет выполнен по элементу по переданному индексу
//		2. Если параметр Индекс не входит в границы массива, тогда для каждого элемента массива
//		будет выполнен расчет, а результат будет соединен в общую строку через "; "
//	Расчет выполняется с применением метода Вычислить. Параметры могут быть из коллекции Заполнение.
//	Для указания параметра используется конструкция "[ПолныйПуть]"
//
// Параметры:
//	Заполнение	- Структура
//	Области		- Структура
//	ИмяОбласти	- Строка
//	Индекс		- Число
//
Процедура ВычислитьПользовательскиеПоляОбласти(знач Заполнение, знач Области, знач ИмяОбласти, знач Индекс = -1) Экспорт
	Параметры		= ОбщегоНазначенияПТБКлиентСервер.СвойствоСтруктуры(Области, ИмяОбласти + ".Параметры", Новый Структура);
	ВычисляемыеПоля	= ОбщегоНазначенияПТБКлиентСервер.СвойствоСтруктуры(Области, ИмяОбласти + ".ПользовательскиеПоля", Новый Структура);
	
	Если ТипЗнч(Параметры) = Тип("Массив") И Индекс >= 0 Тогда
		Если Индекс > Параметры.ВГраница() Тогда
			Возврат;
		КонецЕсли;
		
		ИсточникДанных = Параметры[Индекс];
	Иначе 
		ИсточникДанных = Параметры;
	КонецЕсли;
	
	ИменаПараметров = Новый Структура;
	Для Каждого КлючИЗначение Из ВычисляемыеПоля Цикл
		ТекстФормулы = КлючИЗначение.Значение;
		Если НЕ ЗначениеЗаполнено(ТекстФормулы) Тогда
			Продолжить;
		КонецЕсли;
			
		НачПеременной = СтрНайти(ТекстФормулы, "[");
		Пока НачПеременной > 0 Цикл
			КонПеременной	= СтрНайти(ТекстФормулы, "]",, НачПеременной + 1);
			ИмяПеременной	= Сред(ТекстФормулы, НачПеременной + 1, КонПеременной - НачПеременной - 1);
			
			ИмяПараметра = "П_" + Формат(ИменаПараметров.Количество(), "ЧН=0; ЧГ=");
			ИменаПараметров.Вставить(ИмяПараметра, ИмяПеременной);
			
			ТекстФормулы = СтрЗаменить(ТекстФормулы, "[" + ИмяПеременной + "]", "Параметры." + ИмяПараметра);
			НачПеременной = СтрНайти(ТекстФормулы, "[",, НачПеременной + 1);
		КонецЦикла;
		
		МассивПредставлений = Новый Массив;
		Если ТипЗнч(ИсточникДанных) = Тип("Массив") Тогда
			Для Каждого ЭлементМассива Из ИсточникДанных Цикл
				Представление = ОбработатьИВычислитьЗначениеПоФормуле(ТекстФормулы, ИменаПараметров, ЭлементМассива);
				Если ЗначениеЗаполнено(Представление) Тогда
					МассивПредставлений.Добавить(Представление);
				КонецЕсли;
			КонецЦикла;
		Иначе 
			Представление = ОбработатьИВычислитьЗначениеПоФормуле(ТекстФормулы, ИменаПараметров, ИсточникДанных);
			Если ЗначениеЗаполнено(Представление) Тогда
				МассивПредставлений.Добавить(Представление);
			КонецЕсли;
		КонецЕсли;

		ИтоговоеПредставление = СтрСоединить(МассивПредставлений, "; ");
		Если ЗначениеЗаполнено(ИтоговоеПредставление) Тогда
			Заполнение.Вставить(КлючИЗначение.Ключ, ИтоговоеПредставление);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Возвращает значение представления из области по имени переменной
// Метод работает аналогично ВычислитьПоляПредставленияОбласти, но вычисляет одно конкретное значение
//
// Параметры:
//	Области				- Структура
//	ИмяОбласти			- Строка
//	ИмяПредставления	- Строка
//	Индекс				- Число
//
// Возвращаемое значение:
//   Строка
//
Функция ПолучитьПолеПредставленияОбласти(знач Области, знач ИмяОбласти, знач ИмяПредставления, знач Индекс = -1) Экспорт
	Параметры		= ОбщегоНазначенияПТБКлиентСервер.СвойствоСтруктуры(Области, ИмяОбласти + ".Параметры", Новый Структура);
	Представления	= ОбщегоНазначенияПТБКлиентСервер.СвойствоСтруктуры(Области, ИмяОбласти + ".Представления", Новый Структура);
	
	Если ТипЗнч(Параметры) = Тип("Массив") И Индекс >= 0 Тогда
		Если Индекс > Параметры.ВГраница() Тогда
			Возврат "";
		КонецЕсли;
		
		ИсточникДанных = Параметры[Индекс];
	Иначе 
		ИсточникДанных = Параметры;
	КонецЕсли;
	
	Возврат ЗначениеПоляПредставленияОбластиСлужебный(ИсточникДанных, Представления, ИмяПредставления);
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЗначениеПоляПредставленияОбластиСлужебный(знач ИсточникДанных, знач Представления, знач ИмяПредставления) Экспорт
	ДанныеПредставления = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Представления, ИмяПредставления, Неопределено);
	
	ТипЗначения = ТипЗнч(ДанныеПредставления);
	Если ТипЗначения = Тип("Структура") Тогда
		Реквизиты	= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеПредставления, "Реквизиты", "");
		Префиксы	= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеПредставления, "Префиксы", Неопределено);
		Форматы		= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеПредставления, "Форматы", Неопределено);
	ИначеЕсли ТипЗначения = Тип("Строка") Тогда
		Реквизиты	= ДанныеПредставления;
		Префиксы	= Неопределено;
		Форматы		= Неопределено;
	Иначе 
		Возврат "";
	КонецЕсли;
	
	МассивПредставлений = Новый Массив;
	Если ТипЗнч(ИсточникДанных) = Тип("Массив") Тогда
		Для Каждого ЭлементМассива Из ИсточникДанных Цикл
			Представление = ОбщегоНазначенияПТБКлиентСервер.СформироватьПредставлениеПоСтруктуре(ЭлементМассива, Реквизиты, Префиксы, Форматы);
			Если ЗначениеЗаполнено(Представление) Тогда
				МассивПредставлений.Добавить(Представление);
			КонецЕсли;
		КонецЦикла;
	Иначе 
		Представление = ОбщегоНазначенияПТБКлиентСервер.СформироватьПредставлениеПоСтруктуре(ИсточникДанных, Реквизиты, Префиксы, Форматы);
		Если ЗначениеЗаполнено(Представление) Тогда
			МассивПредставлений.Добавить(Представление);
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтрСоединить(МассивПредставлений, "; ");
КонецФункции

Функция ОбработатьИВычислитьЗначениеПоФормуле(знач ТекстФормулы, знач ИменаПараметров, знач ИсточникДанных)
	Параметры = Новый Структура;
	Для Каждого КлючИЗначение Из ИменаПараметров Цикл
		ЗначПеременной = ОбщегоНазначенияПТБКлиентСервер.СвойствоСтруктуры(ИсточникДанных, КлючИЗначение.Значение, Неопределено);
		Параметры.Вставить(КлючИЗначение.Ключ, ЗначПеременной);
	КонецЦикла;
	
	Попытка
		Представление = Вычислить(ТекстФормулы);
	Исключение
		Представление = "";
	КонецПопытки;
	
	Возврат Представление;
КонецФункции

#КонецОбласти


