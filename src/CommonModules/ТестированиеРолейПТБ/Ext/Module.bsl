
#Область ПрограммныйИнтерфейс

// Добавляет в соответствие "ПравилаТестирования" данные по определенному формату
// Используется совместно с методом ТестированиеРолейПТБПереопределяемый.ПолучитьПравилаТестированияРолейОбъекта
//
// Параметры:
//	ПравилаТестирования - Соответствие
//	ИмяРеквизита		- Строка
//	ОписаниеТипов		- ОписаниеТипов
//	Проверка			- ПроверкаЗаполнения
// 
Процедура ДобавитьНастройкуРеквизита(ПравилаТестирования, знач ИмяРеквизита, знач ОписаниеТипов, знач Проверка) Экспорт 
	ПравилаТестирования.Вставить(ИмяРеквизита,
		Новый Структура("Тип, ПроверкаЗаполнения",
			ОписаниеТипов,
			Проверка));
КонецПроцедуры

// Формирует таблицу пересечения прав и объектов метаданных
//
// Возвращаемое значение:
//   ТаблицаЗначений - с полной структурой можно ознакомится в методе ПолучитьШаблонТаблицыПрав
//		ОбъектМетаданных	- Строка - полное имя объекта метаданных
//		ИмяРоли				- Строка - имя роли
//		[ИмяПрава]			- Булево - колонки с именами прав и значением настройки доступа
// 
Функция ПолучитьТаблицуПрав() Экспорт
	Перем Кэш;
	
	ЭтоПлатформа8_3 = ЭтоПлатформа8_3();
	
	МассивМета	= ТестированиеРолейПТБКлиентСервер.ПолучитьМассивМетаданных();
	МассивРоли	= ПолучитьМассивРолей();
	ТаблицаПрав = ПолучитьШаблонТаблицыПрав();
	
	Для Каждого ИмяМетаКоллекции Из МассивМета Цикл
		МассивПрав = ТестированиеРолейПТБКлиентСервер.ПолучитьПраваДляОпроса(ИмяМетаКоллекции, ЭтоПлатформа8_3);
		
		Для Каждого МетаРоль Из МассивРоли Цикл
			Для Каждого ИмяПрава Из МассивПрав Цикл
				Если ИмяМетаКоллекции = "Метаданные" Тогда
					ЗначениеПрава = ПравоДоступа(ИмяПрава, Метаданные, МетаРоль);
					ДобавитьВТаблицуПрав(ТаблицаПрав, ИмяМетаКоллекции, МетаРоль.Имя, ИмяПрава, ЗначениеПрава, Кэш);
				Иначе 
					Для Каждого МетаОбъект Из Метаданные[ИмяМетаКоллекции] Цикл
						ЗначениеПрава = ПравоДоступа(ИмяПрава, МетаОбъект, МетаРоль);
						ДобавитьВТаблицуПрав(ТаблицаПрав, МетаОбъект.ПолноеИмя(), МетаРоль.Имя, ИмяПрава, ЗначениеПрава, Кэш);
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ТаблицаПрав;
КонецФункции

// Формирует таблицу пересечения ролей и профилей групп доступа
// За основу используется таблица ролей см. ПолучитьТаблицуПрав
//
// Возвращаемое значение:
//   ТаблицаЗначений - с полной структурой можно ознакомится в методе ПолучитьШаблонТаблицыПрав
//		ПрофильГруппыДоступа	- СправочникСсылка.ПрофилиГруппДоступа
//		НастройкиРолей			- Массив - элемент массива Структура, ключи = колонкам таблицы прав
//		ОбъектМетаданных		- Строка - полное имя объекта метаданных
//		ИмяРоли					- Строка - имя профиля группы доступа
//		[ИмяПрава]				- Булево - колонки с именами прав и значением настройки доступа
// 
Функция ПолучитьТаблицуПравПоПрофилям(знач ТаблицаПрав) Экспорт
	
	// исходные колонки таблицы прав
	//	ОбъектМетаданных	- Строка - полное имя объекта метаданных
	//	ИмяРоли				- Строка - имя роли
	//	[ИмяПрава]			- Булево - колонки с именами прав и значением настройки доступа
	// составим пересечение профилей и таблицы
	
	КопияТаблицаПрав = ТаблицаПрав.СкопироватьКолонки();
	КопияТаблицаПрав.Колонки.Добавить("ПрофильГруппыДоступа", Новый ОписаниеТипов("СправочникСсылка.ПрофилиГруппДоступа"));
	КопияТаблицаПрав.Колонки.Добавить("НастройкиРолей");
	КопияТаблицаПрав.Индексы.Добавить("ПрофильГруппыДоступа, ОбъектМетаданных");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПрофилиГруппДоступаРоли.Ссылка КАК ПрофильСсылка,
	|	ПрофилиГруппДоступаРоли.Ссылка.Наименование КАК ПрофильПредставление,
	|	ПрофилиГруппДоступаРоли.Роль.Имя КАК РольИмя
	|ИЗ
	|	Справочник.ПрофилиГруппДоступа.Роли КАК ПрофилиГруппДоступаРоли";
	
	ТаблицаПрофили = Запрос.Выполнить().Выгрузить();
	ТаблицаПрофили.Индексы.Добавить("РольИмя");
	
	Для Каждого СтрокаПрав Из ТаблицаПрав Цикл
		МассивПрофили = ТаблицаПрофили.НайтиСтроки(Новый Структура("РольИмя", СтрокаПрав.ИмяРоли));
		Для Каждого СтрокаПрофиля Из МассивПрофили Цикл
			СтруктураОтбора = Новый Структура("ПрофильГруппыДоступа, ОбъектМетаданных",
				СтрокаПрофиля.ПрофильСсылка,
				СтрокаПрав.ОбъектМетаданных);
				
			// проверим наличие строки профиля с объектом метаданных
			МассивСтрокиПрав = КопияТаблицаПрав.НайтиСтроки(СтруктураОтбора);
			Если МассивСтрокиПрав.Количество() = 0 Тогда
				СтрокаКопии = КопияТаблицаПрав.Добавить();
				СтрокаКопии.ПрофильГруппыДоступа	= СтрокаПрофиля.ПрофильСсылка;
				СтрокаКопии.ИмяРоли					= СтрокаПрофиля.ПрофильПредставление;
				СтрокаКопии.ОбъектМетаданных		= СтрокаПрав.ОбъектМетаданных;
				СтрокаКопии.НастройкиРолей			= Новый Массив;
			Иначе 
				СтрокаКопии = МассивСтрокиПрав[0];
			КонецЕсли;
			
			// устанавливаем настройки прав для строки
			Для Каждого Колонка Из ТаблицаПрав.Колонки Цикл
				Если Колонка.Имя = "ОбъектМетаданных" ИЛИ Колонка.Имя = "ИмяРоли" Тогда
					Продолжить;
				КонецЕсли;
				
				Если СтрокаПрав[Колонка.Имя] Тогда
					СтрокаКопии[Колонка.Имя] = Истина;
				КонецЕсли;
			КонецЦикла;
			
			// добавляем данные строки прав в массив
			СтрокаКопии.НастройкиРолей.Добавить(ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаПрав))
		КонецЦикла;
	КонецЦикла;
	
	Возврат КопияТаблицаПрав;
	
КонецФункции

// Формирует таблицу пересечения ролей и профилей групп доступа
// За основу используется таблица ролей см. ПолучитьТаблицуПрав
//
// Возвращаемое значение:
//   ТаблицаЗначений - с полной структурой можно ознакомится в методе ПолучитьШаблонТаблицыПрав
//		ПрофильГруппыДоступа	- СправочникСсылка.ПрофилиГруппДоступа
//		НастройкиРолей			- Массив - элемент массива Структура, ключи = колонкам таблицы прав
//		ОбъектМетаданных		- Строка - полное имя объекта метаданных
//		ИмяРоли					- Строка - имя профиля группы доступа
//		[ИмяПрава]				- Булево - колонки с именами прав и значением настройки доступа
// 
Функция ПолучитьТаблицуПравПоПользователям(знач ТаблицаПрав) Экспорт
	
	// исходные колонки таблицы прав
	//	ОбъектМетаданных	- Строка - полное имя объекта метаданных
	//	ИмяРоли				- Строка - имя роли
	//	[ИмяПрава]			- Булево - колонки с именами прав и значением настройки доступа
	// составим пересечение профилей и таблицы
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Пользователи.Ссылка КАК ПользовательСсылка,
	|	Пользователи.Наименование КАК ПользовательПредставление,
	|	Пользователи.ИдентификаторПользователяИБ
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	НЕ Пользователи.ПометкаУдаления
	|	И НЕ Пользователи.Недействителен
	|	И НЕ Пользователи.Служебный";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаПользователи = Новый ТаблицаЗначений;
	ТаблицаПользователи.Колонки.Добавить("ПользовательСсылка"			, Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	ТаблицаПользователи.Колонки.Добавить("ПользовательПредставление"	, ОбщегоНазначения.ОписаниеТипаСтрока(1024));
	ТаблицаПользователи.Колонки.Добавить("РольИмя"						, ОбщегоНазначения.ОписаниеТипаСтрока(512));
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Выборка.ИдентификаторПользователяИБ);
		Если ПользовательИБ = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого МетаРоль Из ПользовательИБ.Роли Цикл
			СтрокаПользователь = ТаблицаПользователи.Добавить();
			СтрокаПользователь.Пользователь	= Выборка.Ссылка;
			СтрокаПользователь.ИмяРоли		= МетаРоль.Имя;
		КонецЦикла;
	КонецЦикла;  
	
	КопияТаблицаПрав = ТаблицаПрав.СкопироватьКолонки();
	КопияТаблицаПрав.Колонки.Добавить("Пользователь", Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	КопияТаблицаПрав.Колонки.Добавить("НастройкиРолей");
	КопияТаблицаПрав.Индексы.Добавить("Пользователь, ОбъектМетаданных");
	
	Для Каждого СтрокаПрав Из ТаблицаПрав Цикл
		МассивПользователи = ТаблицаПользователи.НайтиСтроки(Новый Структура("РольИмя", СтрокаПрав.ИмяРоли));
		Для Каждого СтрокаПользователя Из МассивПользователи Цикл
			СтруктураОтбора = Новый Структура("Пользователь, ОбъектМетаданных",
				СтрокаПользователя.ПользовательСсылка,
				СтрокаПрав.ОбъектМетаданных);
				
			// проверим наличие строки профиля с объектом метаданных
			МассивСтрокиПрав = КопияТаблицаПрав.НайтиСтроки(СтруктураОтбора);
			Если МассивСтрокиПрав.Количество() = 0 Тогда
				СтрокаКопии = КопияТаблицаПрав.Добавить();
				СтрокаКопии.Пользователь		= СтрокаПользователя.ПользовательСсылка;
				СтрокаКопии.ИмяРоли				= СтрокаПользователя.ПользовательПредставление;
				СтрокаКопии.ОбъектМетаданных	= СтрокаПрав.ОбъектМетаданных;
				СтрокаКопии.НастройкиРолей		= Новый Массив;
			Иначе 
				СтрокаКопии = МассивСтрокиПрав[0];
			КонецЕсли;
			
			// устанавливаем настройки прав для строки
			Для Каждого Колонка Из ТаблицаПрав.Колонки Цикл
				Если Колонка.Имя = "ОбъектМетаданных" ИЛИ Колонка.Имя = "ИмяРоли" Тогда
					Продолжить;
				КонецЕсли;
				
				Если СтрокаПрав[Колонка.Имя] Тогда
					СтрокаКопии[Колонка.Имя] = Истина;
				КонецЕсли;
			КонецЦикла;
			
			// добавляем данные строки прав в массив
			СтрокаКопии.НастройкиРолей.Добавить(ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаПрав))
		КонецЦикла;
	КонецЦикла;
	
	Возврат КопияТаблицаПрав;
	
КонецФункции

// Возвращаем массив полных имен объектов метаданных по указанному типу
// Объекты метаданных с именем "Удалить..." игнорируются
//
// Параметры:
//	ОписаниеТипов - ОписаниеТипов - объект для анализа входящих типов
//
// Возвращаемое значение:
//   Массив[Строка]
//		В качестве значения выступает полное имя объекта метаданных
// 
Функция ПолучитьОбъектыПоОписаниюТипов(знач ОписаниеТипов) Экспорт
	МассивОбъектов = Новый Массив;
	
	Для Каждого Тип Из ОписаниеТипов.Типы() Цикл
		Если НЕ ОбщегоНазначения.ЭтоСсылка(тип) Тогда 
			Продолжить;
		КонецЕсли;
		
		МетаОбъект = Метаданные.НайтиПоТипу(Тип);
		Если ОбщегоНазначения.ЭтоПеречисление(МетаОбъект) Тогда
			Продолжить;
		КонецЕсли;
		
		Если НРег(Лев(МетаОбъект.Имя, 7)) = "удалить" Тогда
			Продолжить;
		КонецЕсли;
		
		МассивОбъектов.Добавить(МетаОбъект.ПолноеИмя())
	КонецЦикла;
	
	Возврат МассивОбъектов;
КонецФункции

// Формирует данные о связи ролей и объектов метаданных через реквизиты объекта метаданных
//
// Анализ происходит следующим образом:
//	Для реквизитов объекта, общих реквизитов, реквизитов таб. частей объекты записываются в ЧтениеПросмотр
//	Для документов регистры движений записываются в ЧтениеИзменение
//	Для отчетов источники данных основной схемы компоновки записываются в Чтение
//	Для макетов указанных в переопределяемых модулях анализируются источники данных и записываются в Чтение
//
// Дополнительно, программист может дополнить данные для анализа в методах:
//	1. ЧтениеПросмотр
//		- ТестированиеРолейПТБПереопределяемый.ПолучитьПравилаТестированияРолейРеквизитов
//		- [МодульМенеджераОбъекта].ПолучитьПравилаТестированияРолейРеквизитов
//	2. ЧтениеИзменение
//		- ТестированиеРолейПТБПереопределяемый.ПолучитьПравилаТестированияРолейДвижений
//		- [МодульМенеджераОбъекта].ПолучитьПравилаТестированияРолейДвижений
//	3. Чтение
//		- ТестированиеРолейПТБПереопределяемый.ПолучитьПравилаТестированияРолейМакетовСКД
//		- [МодульМенеджераОбъекта].ПолучитьПравилаТестированияРолейМакетовСКД
//
// Параметры:
//	ТаблицаПрав			- ТаблицаЗначений - см. ПолучитьТаблицуПрав
//	МетаданныеОбъекта	- Метаданные - объект метаданных для анализа
//
// Возвращаемое значение:
//   Структура
//		Ключи:
//			Чтение				- Массив - значение: полное имя объекта метаданных
//			ЧтениеПросмотр		- Массив - значение: полное имя объекта метаданных
//			ЧтениеИзменение		- Массив - значение: полное имя объекта метаданных
//			ОбъектыРеквизиты	- Соответствие
//				Ключ		- Строка - полное имя объекта метаданных
//				Значение	- Массив - имя реквизита или другого объекта, при анализе которого получен объект
// 
Функция ПолучитьСвязьРолейОбъектовПоРеквизитамОбъекта(знач ТаблицаПрав, знач МетаданныеОбъекта) Экспорт 
	
	ОбъектыЧтение			= Новый Массив;
	ОбъектыЧтениеПросмотр	= Новый Массив;
	ОбъектыЧтениеИзменение	= Новый Массив;
	ОбъектыПоРеквизитам		= Новый Соответствие;

	ЭтоДокумент		= Метаданные.Документы.Содержит(МетаданныеОбъекта);
	ЭтоОтчет		= Метаданные.Отчеты.Содержит(МетаданныеОбъекта);
	
	ЕстьТабЧасти = (Метаданные.Справочники.Содержит(МетаданныеОбъекта)
		ИЛИ ЭтоДокумент
		ИЛИ ЭтоОтчет
		ИЛИ Метаданные.Обработки.Содержит(МетаданныеОбъекта)
		ИЛИ Метаданные.Задачи.Содержит(МетаданныеОбъекта)
		ИЛИ Метаданные.БизнесПроцессы.Содержит(МетаданныеОбъекта));
	
	// получим особые настройки по определенным документам
	НастройкиРеквизитов = ПолучитьПравилаТестированияРолейРеквизитов(МетаданныеОбъекта);
	МассивДопДвижений	= ПолучитьПравилаТестированияРолейДвижений(МетаданныеОбъекта);
	МакетыЗаполнения	= ПолучитьПравилаТестированияРолейМакетовСКД(МетаданныеОбъекта);
	
	// составляем перечень объектов метаданных для проверки прав Чтение+Просмотр
	Для Каждого МетаРеквизит Из Метаданные.ОбщиеРеквизиты Цикл
		Если МетаРеквизит.Состав.Найти(МетаданныеОбъекта) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Настройка = НастройкиРеквизита(МетаРеквизит, НастройкиРеквизитов);
		Если Настройка.ПроверкаЗаполнения = ПроверкаЗаполнения.НеПроверять Тогда
			Продолжить;
		КонецЕсли;
		
		ОбъектыРеквизита = ПолучитьОбъектыПоОписаниюТипов(Настройка.Тип);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОбъектыЧтениеПросмотр, ОбъектыРеквизита, Истина);
		
		Для Каждого ПолноеИмяОбъекта Из ОбъектыРеквизита Цикл
			ДобавитьСвязьОбъектМетаданныхРеквизит(ОбъектыПоРеквизитам, ПолноеИмяОбъекта, "ОбщиеРеквизиты." + МетаРеквизит.Имя);
		КонецЦикла;
	КонецЦикла;
	Для Каждого МетаРеквизит Из МетаданныеОбъекта.Реквизиты Цикл
		Настройка = НастройкиРеквизита(МетаРеквизит, НастройкиРеквизитов);
		Если Настройка.ПроверкаЗаполнения = ПроверкаЗаполнения.НеПроверять Тогда
			Продолжить;
		КонецЕсли;
		
		ОбъектыРеквизита = ПолучитьОбъектыПоОписаниюТипов(Настройка.Тип);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОбъектыЧтениеПросмотр, ОбъектыРеквизита, Истина);
		
		Для Каждого ПолноеИмяОбъекта Из ОбъектыРеквизита Цикл
			ДобавитьСвязьОбъектМетаданныхРеквизит(ОбъектыПоРеквизитам, ПолноеИмяОбъекта, МетаРеквизит.Имя);
		КонецЦикла;
	КонецЦикла;
	Если ЕстьТабЧасти Тогда
		Для Каждого МетаТабЧасть Из МетаданныеОбъекта.ТабличныеЧасти Цикл
			Настройка = НастройкиРеквизитов.Получить(МетаТабЧасть.Имя);
			Если ТипЗнч(Настройка) = Тип("Структура") И Настройка.ПроверкаЗаполнения = ПроверкаЗаполнения.НеПроверять Тогда
				Продолжить;
			КонецЕсли;
			
			Для Каждого МетаРеквизит Из МетаТабЧасть.Реквизиты Цикл
				Настройка = НастройкиРеквизита(МетаРеквизит, НастройкиРеквизитов, МетаТабЧасть);
				Если Настройка.ПроверкаЗаполнения = ПроверкаЗаполнения.НеПроверять Тогда
					Продолжить;
				КонецЕсли;
				
				ОбъектыРеквизита = ПолучитьОбъектыПоОписаниюТипов(Настройка.Тип);
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОбъектыЧтениеПросмотр, ОбъектыРеквизита, Истина);
				
				Для Каждого ПолноеИмяОбъекта Из ОбъектыРеквизита Цикл
					ДобавитьСвязьОбъектМетаданныхРеквизит(ОбъектыПоРеквизитам, ПолноеИмяОбъекта, МетаТабЧасть.Имя + "." + МетаРеквизит.Имя);
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	// составляем перечень объектов метаданных для проверки прав Чтение+Изменение
	Если ЭтоДокумент Тогда
		Для Каждого МетаРегистр Из МетаданныеОбъекта.Движения Цикл
			ПолноеИмяОбъекта = МетаРегистр.ПолноеИмя();
			Если НРег(Лев(МетаРегистр.Имя, 7)) = "удалить" Тогда
				Продолжить;
			КонецЕсли;
			ОбъектыЧтениеИзменение.Добавить(ПолноеИмяОбъекта);
			ДобавитьСвязьОбъектМетаданныхРеквизит(ОбъектыПоРеквизитам, ПолноеИмяОбъекта, "Движения");
		КонецЦикла;
	КонецЕсли;
	Для Каждого ПолноеИмяОбъекта Из МассивДопДвижений Цикл
		ОбъектыЧтениеИзменение.Добавить(ПолноеИмяОбъекта);
		ДобавитьСвязьОбъектМетаданныхРеквизит(ОбъектыПоРеквизитам, ПолноеИмяОбъекта, "СкрытыеДвижения");
	КонецЦикла;
	
	// составляем перечень объектов метаданных для проверки прав Чтение
	Если ЭтоОтчет Тогда
		ОсновнаяСхема = МетаданныеОбъекта.ОсновнаяСхемаКомпоновкиДанных;
		Если ТипЗнч(ОсновнаяСхема) = Тип("ОбъектМетаданных") Тогда
			ПереченьИсточников = ПолучитьИсточникиДанныхЗапросовМакетовСКД(ОсновнаяСхема.Имя, МетаданныеОбъекта);
			Для Каждого ПолноеИмяОбъекта Из ПереченьИсточников Цикл
				ОбъектыЧтение.Добавить(ПолноеИмяОбъекта);
				ДобавитьСвязьОбъектМетаданныхРеквизит(ОбъектыПоРеквизитам, ПолноеИмяОбъекта, "Макет." + ОсновнаяСхема.Имя);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	Для Каждого ИмяМакета Из МакетыЗаполнения Цикл
		ПереченьИсточников = ПолучитьИсточникиДанныхЗапросовМакетовСКД(ИмяМакета, МетаданныеОбъекта);
		Для Каждого ПолноеИмяОбъекта Из ПереченьИсточников Цикл
			ОбъектыЧтение.Добавить(ПолноеИмяОбъекта);
			ДобавитьСвязьОбъектМетаданныхРеквизит(ОбъектыПоРеквизитам, ПолноеИмяОбъекта, "Макет." + ИмяМакета);
		КонецЦикла;
	КонецЦикла;
	
	Возврат Новый Структура("Чтение, ЧтениеПросмотр, ЧтениеИзменение, ОбъектыРеквизиты", 
		ОбъектыЧтение,
		ОбъектыЧтениеПросмотр,
		ОбъектыЧтениеИзменение,
		ОбъектыПоРеквизитам);
	
КонецФункции

// Выполняет проверку установки прав по объекту, роли и правам
//	ВНИМАНИЕ: перечень ролей всегда исчерпывающий
//	Если для объекта существуют другие роли - это будет считаться ошибкой
//
// Параметры:
//	ТаблицаПрав			- ТаблицаЗначений
//	ПолноеИмяОбъекта	- Строка - полное имя объекта метаданных
//	ОбъектПредставление	- Строка
//	РолиПрава			- Структура - настройка проверки ролей и прав по объекту
//		Ключ		- Строка - имя роли
//		Значение	- Строка, Структура
//			Строка
//				Если задано значение "Строка" тогда программа будет считать это минимальным необходимым набором прав
//				При этом настройка остальных прав будет проигнорирована. Символ "*" означает "все права" доступные для объекта
//			Структура
//				Минимум		- Строка - перечень минимально достаточных прав
//					Например: Чтение, Просмотр. В таком случае, остальные права не проверяются
//				Максимум	- Строка - перечень максимально доступных прав. "*" - все права
//					Например: Чтение, Просмотр. В таком случае, наличие остальных прав будет считаться ошибкой
//
// Возвращаемое значение:
//	Структура
//		ЕстьОшибки	- Булево
//		Данные		- ТаблицаЗначений
//	 		ОбъектМетаданных	- Строка - полное имя объекта метаданных
// 			ОбъектПредставление	- Строка
//			ИмяРоли				- Строка
//			НедопустимаяРоль	- Булево
//			РолиНеЗаданы		- Булево
//			ПраваНеЗаданы		- Булево
//			ПравилоКонтроля		- Структура, Неопределено - не заполнено если НедопустимаяРоль, РолиНеЗаданы
//			НастройкаПрав		- Структура, Неопределено - не заполнено если НедопустимаяРоль, РолиНеЗаданы, ПраваНеЗаданы
//			ПраваСОшибками		- Структура, Неопределено - не заполнено если НедопустимаяРоль, РолиНеЗаданы, ПраваНеЗаданы
//
// Пример структуры РолиПрава (пример на одном ключе и значении)
//	1. ("ДобавлениеИзменениеФинДокументов", "*")
//		Все права доступные для указанного объекта метаданных, у роли "ДобавлениеИзменениеФинДокументов" должны быть ИСТИНА
//	2. ("ДобавлениеИзменениеФинДокументов", "Чтение, Просмотр")
//		Права "Чтение,Просмотр", у роли "ДобавлениеИзменениеФинДокументов" должны быть ИСТИНА, остальные не важно
//	3. ("ДобавлениеИзменениеФинДокументов", Новый Структура("Минимум", "Чтение, Просмотр"))
//		Аналогично настройка п.2
//	4. ("ДобавлениеИзменениеФинДокументов", Новый Структура("Максимум", "Чтение, Просмотр"))
//		Права "Чтение,Просмотр", у роли "ДобавлениеИзменениеФинДокументов" должны быть ИСТИНА, остальные ЛОЖЬ
//
Функция ТестированиеПоОбъектуМетаданных(знач ТаблицаПрав, знач ПолноеИмяОбъекта, знач ОбъектПредставление = "", знач РолиПрава) Экспорт 
	
	Если НЕ ЗначениеЗаполнено(ОбъектПредставление) Тогда
		ОбъектПредставление = ПолноеИмяОбъекта;
	КонецЕсли;
	
	ДанныеПроверки = Новый ТаблицаЗначений;
	ДанныеПроверки.Колонки.Добавить("ОбъектМетаданных"		, ОбщегоНазначения.ОписаниеТипаСтрока(1024));
	ДанныеПроверки.Колонки.Добавить("ОбъектПредставление"	, ОбщегоНазначения.ОписаниеТипаСтрока(1024));
	ДанныеПроверки.Колонки.Добавить("ИмяРоли"				, ОбщегоНазначения.ОписаниеТипаСтрока(200));
	ДанныеПроверки.Колонки.Добавить("НедопустимаяРоль"		, новый ОписаниеТипов("Булево"));
	ДанныеПроверки.Колонки.Добавить("РолиНеЗаданы"			, Новый ОписаниеТипов("Булево"));
	ДанныеПроверки.Колонки.Добавить("ПраваНеЗаданы"			, Новый ОписаниеТипов("Булево"));
	ДанныеПроверки.Колонки.Добавить("НастройкаПрав");
	ДанныеПроверки.Колонки.Добавить("ПравилоКонтроля");
	ДанныеПроверки.Колонки.Добавить("ПраваСОшибками");
	ДанныеПроверки.Колонки.Добавить("КоличествоОшибок"		, ОбщегоНазначения.ОписаниеТипаЧисло(10));
	
	РезультатПроверки = Новый Структура("ЕстьОшибки, Данные", Ложь, ДанныеПроверки);
	
	СтрокаПроверки = ДанныеПроверки.Добавить();
	СтрокаПроверки.ОбъектМетаданных		= ПолноеИмяОбъекта;
	СтрокаПроверки.ОбъектПредставление	= ОбъектПредставление;
	
	СтрокиРолей = ТаблицаПрав.Скопировать(Новый Структура("ОбъектМетаданных", ПолноеИмяОбъекта));
	Если СтрокиРолей.Количество() = 0 Тогда
		СтрокаПроверки.РолиНеЗаданы = Истина;
		РезультатПроверки.ЕстьОшибки = Истина;
		Возврат РезультатПроверки;
	КонецЕсли;
	
	ЕстьОшибки = Ложь;
	
	СтрокиРолей.Колонки.Добавить("Обработано", Новый ОписаниеТипов("Булево"));
	СтрокиРолей.Индексы.Добавить("ИмяРоли");
	Для Каждого КлючИЗначение Из РолиПрава Цикл
		ИмяРоли			= КлючИЗначение.Ключ;
		НастройкаПрав	= КлючИЗначение.Значение;
		
		Если НЕ ПустаяСтрока(СтрокаПроверки.ИмяРоли) Тогда
			СтрокаПроверки = ДанныеПроверки.Добавить();
			СтрокаПроверки.ОбъектМетаданных		= ПолноеИмяОбъекта;
			СтрокаПроверки.ОбъектПредставление	= ОбъектПредставление;
		КонецЕсли;
		СтрокаПроверки.ИмяРоли			= ИмяРоли;
		СтрокаПроверки.НастройкаПрав	= Новый Структура;
		СтрокаПроверки.ПравилоКонтроля	= Новый Структура;
		СтрокаПроверки.ПраваСОшибками	= Новый Структура;
		
		// нормализация настройки прав
		СтрокаПроверки.ПравилоКонтроля = ПолучитьПравилаКонтроляПравПоОбъекту(ПолноеИмяОбъекта, НастройкаПрав);
		
		// если строка по имени роли не найдена, значит прав недостаточно
		СтрокаРоли = СтрокиРолей.Найти(ИмяРоли, "ИмяРоли");
		Если СтрокаРоли = Неопределено Тогда
			СтрокаПроверки.ПраваНеЗаданы = Истина;
			ЕстьОшибки = Истина;
			Продолжить;
		КонецЕсли;
		
		// если строка найдена, проверяем наличие достаточных прав
		Для Каждого ПравоЗначение Из СтрокаПроверки.ПравилоКонтроля Цикл
			СтрокаПроверки.НастройкаПрав.Вставить(ПравоЗначение.Ключ, СтрокаРоли[ПравоЗначение.Ключ]);
			
			Если ПравоЗначение.Значение = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если ПравоЗначение.Значение <> СтрокаРоли[ПравоЗначение.Ключ] Тогда
				СтрокаПроверки.ПраваСОшибками.Вставить(ПравоЗначение.Ключ, СтрокаРоли[ПравоЗначение.Ключ]);
				ЕстьОшибки = Истина;
			КонецЕсли;
		КонецЦикла;
		СтрокаПроверки.КоличествоОшибок = СтрокаПроверки.ПраваСОшибками.Количество();
		
		СтрокаРоли.Обработано = Истина;
	КонецЦикла;

	НеУказанныеРоли = СтрокиРолей.НайтиСтроки(Новый Структура("Обработано", Ложь));
	Для Каждого СтрокаРоли Из НеУказанныеРоли Цикл
		СтрокаПроверки = ДанныеПроверки.Добавить();
		СтрокаПроверки.ОбъектМетаданных		= ПолноеИмяОбъекта;
		СтрокаПроверки.ОбъектПредставление	= ОбъектПредставление;
		СтрокаПроверки.ИмяРоли				= ИмяРоли;
		СтрокаПроверки.НедопустимаяРоль		= Истина;
		
		ЕстьОшибки = Истина;
	КонецЦикла;
	
	РезультатПроверки.ЕстьОшибки = ЕстьОшибки;
	Возврат РезультатПроверки;

КонецФункции

// Выполняет проверку установки прав по объекту, роли и правам
//	ВНИМАНИЕ: перечень объектов НЕ является исчерпывающим
//	Если для роли существуют права для других объектов - это НЕ будет считаться ошибкой
//
// Параметры:
//	ТаблицаПрав				- ТаблицаЗначений
//	ИмяРоли					- Строка - имя роли
//	ПредставлениеОбъектов	- Соответствие - не обязательно
//		Ключ  		- Строка - полное имя объекта
//		Значение	- Строка - представление объекта
//	ОбъектыИПрава			- Соответствие - настройка проверки объектов и прав
//		Ключ		- Строка - полное имя объекта метаданных
//		Значение	- Строка, Структура
//			Строка
//				Если задано значение "Строка" тогда программа будет считать это минимальным необходимым набором прав
//				При этом настройка остальных прав будет проигнорирована. Символ "*" означает "все права" доступные для объекта
//			Структура
//				Минимум		- Строка - перечень минимально достаточных прав
//					Например: Чтение, Просмотр. В таком случае, остальные права не проверяются
//				Максимум	- Строка - перечень максимально доступных прав. "*" - все права
//					Например: Чтение, Просмотр. В таком случае, наличие остальных прав будет считаться ошибкой
//	ТекстЛога	- Строка - строка для логирования
//
// Возвращаемое значение:
//	Структура
//		ЕстьОшибки	- Булево
//		Данные		- ТаблицаЗначений
//			ИмяРоли				- Строка
//	 		ОбъектМетаданных	- Строка - полное имя объекта метаданных
// 			ОбъектПредставление	- Строка
//			ОбъектыНеЗаданы		- Булево
//			ПраваНеЗаданы		- Булево
//			ПравилоКонтроля		- Структура, Неопределено - не заполнено если НедопустимаяРоль, ОбъектыНеЗаданы
//			НастройкаПрав		- Структура, Неопределено - не заполнено если НедопустимаяРоль, ОбъектыНеЗаданы, ПраваНеЗаданы
//			ПраваСОшибками		- Структура, Неопределено - не заполнено если НедопустимаяРоль, ОбъектыНеЗаданы, ПраваНеЗаданы
//
// Пример структуры ОбъектыИПрава (пример на одном ключе и значении)
//	1. ("Справочник.Контрагенты", "*")
//		Все права, доступные для объекта метаданных "Справочник.Контрагенты" должны быть ИСТИНА
//	2. ("Справочник.Контрагенты", "Чтение, Просмотр")
//		Права "Чтение,Просмотр", для объекта метаданных "Справочник.Контрагенты" должны быть ИСТИНА, остальные не важно
//	3. ("Справочник.Контрагенты", Новый Структура("Минимум", "Чтение, Просмотр"))
//		Аналогично настройка п.2
//	4. ("Справочник.Контрагенты", Новый Структура("Максимум", "Чтение, Просмотр"))
//		Права "Чтение,Просмотр", для объекта метаданных "Справочник.Контрагенты" должны быть ИСТИНА, остальные ЛОЖЬ
//
Функция ТестированиеПоРоли(знач ТаблицаПрав, знач ИмяРоли, знач ПредставлениеОбъектов = Неопределено, знач ОбъектыПрава) Экспорт
	
	Если НЕ ТипЗнч(ПредставлениеОбъектов) = Тип("Соответствие") Тогда
		ПредставлениеОбъектов = Новый Соответствие;
	КонецЕсли;
	
	ДанныеПроверки = Новый ТаблицаЗначений;
	ДанныеПроверки.Колонки.Добавить("ИмяРоли"				, ОбщегоНазначения.ОписаниеТипаСтрока(200));
	ДанныеПроверки.Колонки.Добавить("ОбъектМетаданных"		, ОбщегоНазначения.ОписаниеТипаСтрока(1024));
	ДанныеПроверки.Колонки.Добавить("ОбъектПредставление"	, ОбщегоНазначения.ОписаниеТипаСтрока(1024));
	ДанныеПроверки.Колонки.Добавить("ОбъектыНеЗаданы"		, Новый ОписаниеТипов("Булево"));
	ДанныеПроверки.Колонки.Добавить("ПраваНеЗаданы"			, Новый ОписаниеТипов("Булево"));
	ДанныеПроверки.Колонки.Добавить("НастройкаПрав");
	ДанныеПроверки.Колонки.Добавить("ПравилоКонтроля");
	ДанныеПроверки.Колонки.Добавить("ПраваСОшибками");
	ДанныеПроверки.Колонки.Добавить("КоличествоОшибок"		, ОбщегоНазначения.ОписаниеТипаЧисло(10));
	
	РезультатПроверки = Новый Структура("ЕстьОшибки, Данные", Ложь, ДанныеПроверки);
	
	СтрокаПроверки = ДанныеПроверки.Добавить();
	СтрокаПроверки.ИмяРоли = ИмяРоли;
	
	СтрокиОбъектов = ТаблицаПрав.Скопировать(Новый Структура("ИмяРоли", ИмяРоли));
	Если СтрокиОбъектов.Количество() = 0 Тогда
		СтрокаПроверки.ОбъектыНеЗаданы	= Истина;
		РезультатПроверки.ЕстьОшибки	= Истина;
		Возврат РезультатПроверки;
	КонецЕсли;
	
	ЕстьОшибки = Ложь;
	
	СтрокиОбъектов.Колонки.Добавить("Обработано", Новый ОписаниеТипов("Булево"));
	СтрокиОбъектов.Индексы.Добавить("ОбъектМетаданных");
	Для Каждого КлючИЗначение Из ОбъектыПрава Цикл
		ПолноеИмяОбъекта		= КлючИЗначение.Ключ;
		НастройкаПрав			= КлючИЗначение.Значение;
		ОбъектПредставление		= ?(ПредставлениеОбъектов.Получить(ПолноеИмяОбъекта) = Неопределено, ПолноеИмяОбъекта, ПредставлениеОбъектов.Получить(ПолноеИмяОбъекта));
		
		Если НЕ ПустаяСтрока(СтрокаПроверки.ОбъектМетаданных) Тогда
			СтрокаПроверки = ДанныеПроверки.Добавить();
			СтрокаПроверки.ИмяРоли = ИмяРоли;
		КонецЕсли;
		СтрокаПроверки.ОбъектМетаданных		= ПолноеИмяОбъекта;
		СтрокаПроверки.ОбъектПредставление	= ОбъектПредставление;
		СтрокаПроверки.НастройкаПрав		= Новый Структура;
		СтрокаПроверки.ПравилоКонтроля		= Новый Структура;
		СтрокаПроверки.ПраваСОшибками		= Новый Структура;
		
		// нормализация настройки прав
		СтрокаПроверки.ПравилоКонтроля = ПолучитьПравилаКонтроляПравПоОбъекту(ПолноеИмяОбъекта, НастройкаПрав);
		
		// если строка по имени роли не найдена, значит прав недостаточно
		СтрокаОбъекта = СтрокиОбъектов.Найти(ПолноеИмяОбъекта, "ОбъектМетаданных");
		Если СтрокаОбъекта = Неопределено Тогда
			СтрокаПроверки.ПраваНеЗаданы = Истина;
			ЕстьОшибки = Истина;
			Продолжить;
		КонецЕсли;
		
		// если строка найдена, проверяем наличие достаточных прав
		Для Каждого ПравоЗначение Из СтрокаПроверки.ПравилоКонтроля Цикл
			СтрокаПроверки.НастройкаПрав.Вставить(ПравоЗначение.Ключ, СтрокаОбъекта[ПравоЗначение.Ключ]);
			
			Если ПравоЗначение.Значение = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если ПравоЗначение.Значение <> СтрокаОбъекта[ПравоЗначение.Ключ] Тогда
				СтрокаПроверки.ПраваСОшибками.Вставить(ПравоЗначение.Ключ, СтрокаОбъекта[ПравоЗначение.Ключ]);
				ЕстьОшибки = Истина;
			КонецЕсли;
		КонецЦикла;
		СтрокаПроверки.КоличествоОшибок = СтрокаПроверки.ПраваСОшибками.Количество();
		
		СтрокаОбъекта.Обработано = Истина;
	КонецЦикла;
	
	РезультатПроверки.ЕстьОшибки = ЕстьОшибки;
	Возврат РезультатПроверки;
	
КонецФункции

// Преобразовывает настройку правила проверки в структуру
// Примеры:
//	1. "*"
//		Все права доступные для указанного объекта метаданных = ИСТИНА
//	2. "Чтение, Просмотр"
//		Права "Чтение,Просмотр" = ИСТИНА, остальные = НЕОПРЕДЕЛЕНО
//	3. Структура("Минимум", "Чтение, Просмотр")
//		Аналогично настройка п.2
//	4. Структура("Максимум", "Чтение, Просмотр")
//		Права "Чтение,Просмотр" = ИСТИНА, остальные = ЛОЖЬ
//
// Параметры:
//	ПолноеИмяОбъекта - Строка - полное имя объекта метаданных
//	НастройкаПрав - Строка, Структура
//		Возможные значения:
//			*			- все права = ИСТИНА
//			Строка		- перечень прав через "," = ИСТИНА, остальные НЕОПРЕДЕЛЕНО
//			Структура	- Ключи: Минимум, Максимум. Значения: список прав через ","
//				Минимум - список прав = ИСТИНА, остальные = НЕОПРЕДЕЛЕНО
//				Максимум - список прав = ИСТИНА, остальные = ЛОЖЬ
//
// Возвращаемое значение:
//   Структура
//		Ключ		- Строка - право (Чтение, Изменение, Просмотр и пр.)
//		Значение	- Булево, Неопределено - значение для анализа
//			Истина, Ложь - контрольные значения, Неопределено - не проверять
// 
Функция ПолучитьПравилаКонтроляПравПоОбъекту(знач ПолноеИмяОбъекта, знач НастройкаПрав) Экспорт
	Платформа8_3 = ЭтоПлатформа8_3();
	
	НастройкаПравил = Новый Структура;
	
	Если ПолноеИмяОбъекта = "Метаданные" Тогда
		ИмяВидаМетаданных = ПолноеИмяОбъекта;
	Иначе 
		МетаОбъект = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъекта);
		ИмяВидаМетаданных = ОбщегоНазначения.ИмяБазовогоТипаПоОбъектуМетаданных(МетаОбъект);
	КонецЕсли;
	
	ВсеПраваПоОбъекту = ТестированиеРолейПТБКлиентСервер.ПолучитьПраваДляОпроса(ИмяВидаМетаданных, Платформа8_3);
	
	Если ТипЗнч(НастройкаПрав) = Тип("Строка") Тогда
		НастройкаПрав = Новый Структура("Минимум", НастройкаПрав);
	КонецЕсли;
	
	Если НастройкаПрав.Свойство("Максимум") И НЕ ПустаяСтрока(НастройкаПрав.Максимум) Тогда
		Если НастройкаПрав.Максимум = "*" Тогда
			ПраваПоОбъекту = ВсеПраваПоОбъекту;
		Иначе 
			ПраваПоОбъекту = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(НастройкаПрав.Максимум, ",", Истина, Истина);
		КонецЕсли;
		
		Для Каждого ИмяПрава Из ВсеПраваПоОбъекту Цикл
			НастройкаПравил.Вставить(ИмяПрава, НЕ (ПраваПоОбъекту.Найти(ИмяПрава) = Неопределено));
		КонецЦикла;
	ИначеЕсли НастройкаПрав.Свойство("Минимум") И НЕ ПустаяСтрока(НастройкаПрав.Минимум) Тогда
		Если НастройкаПрав.Минимум = "*" Тогда
			ПраваПоОбъекту = ВсеПраваПоОбъекту;
		Иначе 
			ПраваПоОбъекту = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(НастройкаПрав.Минимум, ",", Истина, Истина);
		КонецЕсли;
		
		Для Каждого ИмяПрава Из ВсеПраваПоОбъекту Цикл
			НастройкаПравил.Вставить(ИмяПрава, ?(ПраваПоОбъекту.Найти(ИмяПрава) = Неопределено, Неопределено, Истина));
		КонецЦикла;
	КонецЕсли;
	
	Возврат НастройкаПравил;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ДобавитьВТаблицуПрав(ТаблицаПрав, ПолноеИмяОбъекта, ИмяРоли, ИмяПрава, ЗначениеПрава, Кэш = Неопределено)
	Если НЕ ТипЗнч(Кэш) = Тип("Соответствие") Тогда
		Кэш = Новый Соответствие;
	КонецЕсли;
	
	Если ТаблицаПрав.Колонки.Найти(ИмяПрава) = Неопределено Тогда
		ТаблицаПрав.Колонки.Добавить(ИмяПрава, Новый ОписаниеТипов("Булево"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Добавлено: '") + ПолноеИмяОбъекта + ", " + ИмяПрава);
	КонецЕсли;
	
	Если НЕ ЗначениеПрава Тогда
		Возврат;
	КонецЕсли;
	
	КлючКэша = ПолноеИмяОбъекта + "_" + ИмяРоли;
	
	ИндексСтроки = Кэш.Получить(КлючКэша);
	Если ИндексСтроки = Неопределено Тогда
		СтрокаТаблицы = ТаблицаПрав.Добавить();
		СтрокаТаблицы.ОбъектМетаданных	= ПолноеИмяОбъекта;
		СтрокаТаблицы.ИмяРоли			= ИмяРоли;
		
		ИндексСтроки = ТаблицаПрав.Индекс(СтрокаТаблицы);
		Кэш.Вставить(КлючКэша, ИндексСтроки);
	Иначе 
		СтрокаТаблицы = ТаблицаПрав[ИндексСтроки];
	КонецЕсли;
	
	СтрокаТаблицы[ИмяПрава] = ЗначениеПрава;	
КонецПроцедуры

Процедура ДобавитьСвязьОбъектМетаданныхРеквизит(ОбъектыПоРеквизитам, ПолноеИмяОбъекта, ИмяРеквизита)
	МассивРеквизитов = ОбъектыПоРеквизитам.Получить(ПолноеИмяОбъекта);
	Если МассивРеквизитов = Неопределено Тогда
		МассивРеквизитов = Новый Массив;
		ОбъектыПоРеквизитам.Вставить(ПолноеИмяОбъекта, МассивРеквизитов);
	КонецЕсли;
	МассивРеквизитов.Добавить(ИмяРеквизита);
КонецПроцедуры

Функция ЭтоПлатформа8_3()
	СистИнфо = Новый СистемнаяИнформация;
	Возврат (ОбщегоНазначенияКлиентСервер.СравнитьВерсии(СистИнфо.ВерсияПриложения, "8.3.0.0") > 1);
КонецФункции

Функция ПолучитьМассивРолей()
	МассивРолей = Новый Массив;
	Для каждого Роль Из Метаданные.Роли Цикл
		МассивРолей.Добавить(Роль);
	КонецЦикла;
	Возврат МассивРолей;
КонецФункции

Функция ПолучитьШаблонТаблицыПрав()
	
	ТаблицаПрав = Новый ТаблицаЗначений;
	ТаблицаПрав.Колонки.Добавить("ОбъектМетаданных"											, ОбщегоНазначения.ОписаниеТипаСтрока(1024));
	ТаблицаПрав.Колонки.Добавить("ИмяРоли"													, ОбщегоНазначения.ОписаниеТипаСтрока(200));
	ТаблицаПрав.Колонки.Добавить("Чтение"													, Новый ОписаниеТипов("Булево"));
	ТаблицаПрав.Колонки.Добавить("Добавление"												, Новый ОписаниеТипов("Булево"));
	ТаблицаПрав.Колонки.Добавить("Изменение"												, Новый ОписаниеТипов("Булево"));
	ТаблицаПрав.Колонки.Добавить("Удаление"													, Новый ОписаниеТипов("Булево"));
	ТаблицаПрав.Колонки.Добавить("Проведение"												, Новый ОписаниеТипов("Булево"));
	ТаблицаПрав.Колонки.Добавить("ОтменаПроведения"											, Новый ОписаниеТипов("Булево"));
	ТаблицаПрав.Колонки.Добавить("Просмотр"													, Новый ОписаниеТипов("Булево"));
	ТаблицаПрав.Колонки.Добавить("ИнтерактивноеДобавление"									, Новый ОписаниеТипов("Булево"));
	ТаблицаПрав.Колонки.Добавить("Редактирование"											, Новый ОписаниеТипов("Булево"));
	ТаблицаПрав.Колонки.Добавить("ИнтерактивнаяПометкаУдаления"								, Новый ОписаниеТипов("Булево"));
	ТаблицаПрав.Колонки.Добавить("ИнтерактивноеСнятиеПометкиУдаления"						, Новый ОписаниеТипов("Булево"));
	ТаблицаПрав.Колонки.Добавить("ИнтерактивноеУдалениеПомеченных"							, Новый ОписаниеТипов("Булево"));
	ТаблицаПрав.Колонки.Добавить("ИнтерактивноеПроведение"									, Новый ОписаниеТипов("Булево"));
	ТаблицаПрав.Колонки.Добавить("ИнтерактивноеПроведениеНеОперативное"						, Новый ОписаниеТипов("Булево"));
	ТаблицаПрав.Колонки.Добавить("ИнтерактивнаяОтменаПроведения"							, Новый ОписаниеТипов("Булево"));
	ТаблицаПрав.Колонки.Добавить("ИнтерактивноеИзменениеПроведенных"						, Новый ОписаниеТипов("Булево"));
	ТаблицаПрав.Колонки.Добавить("ВводПоСтроке"												, Новый ОписаниеТипов("Булево"));
	ТаблицаПрав.Колонки.Добавить("УправлениеИтогами"										, Новый ОписаниеТипов("Булево"));
	ТаблицаПрав.Колонки.Добавить("Использование"											, Новый ОписаниеТипов("Булево"));
	ТаблицаПрав.Колонки.Добавить("ИнтерактивноеУдаление"									, Новый ОписаниеТипов("Булево"));
	ТаблицаПрав.Колонки.Добавить("Администрирование"										, Новый ОписаниеТипов("Булево"));
	ТаблицаПрав.Колонки.Добавить("АдминистрированиеДанных"									, Новый ОписаниеТипов("Булево"));
	ТаблицаПрав.Колонки.Добавить("МонопольныйРежим"											, Новый ОписаниеТипов("Булево"));
	ТаблицаПрав.Колонки.Добавить("АктивныеПользователи"										, Новый ОписаниеТипов("Булево"));
	ТаблицаПрав.Колонки.Добавить("ЖурналРегистрации"										, Новый ОписаниеТипов("Булево"));
	ТаблицаПрав.Колонки.Добавить("ВнешнееСоединение"										, Новый ОписаниеТипов("Булево"));
	ТаблицаПрав.Колонки.Добавить("Automation"												, Новый ОписаниеТипов("Булево"));
	ТаблицаПрав.Колонки.Добавить("ИнтерактивноеОткрытиеВнешнихОбработок"					, Новый ОписаниеТипов("Булево"));
	ТаблицаПрав.Колонки.Добавить("ИнтерактивноеОткрытиеВнешнихОтчетов"						, Новый ОписаниеТипов("Булево"));
	ТаблицаПрав.Колонки.Добавить("Получение"												, Новый ОписаниеТипов("Булево"));
	ТаблицаПрав.Колонки.Добавить("Установка"												, Новый ОписаниеТипов("Булево"));
	ТаблицаПрав.Колонки.Добавить("ИнтерактивнаяАктивация"									, Новый ОписаниеТипов("Булево"));
	ТаблицаПрав.Колонки.Добавить("Старт"													, Новый ОписаниеТипов("Булево"));
	ТаблицаПрав.Колонки.Добавить("ИнтерактивныйСтарт"										, Новый ОписаниеТипов("Булево"));
	ТаблицаПрав.Колонки.Добавить("Выполнение"												, Новый ОписаниеТипов("Булево"));
	ТаблицаПрав.Колонки.Добавить("ИнтерактивноеВыполнение"									, Новый ОписаниеТипов("Булево"));
	ТаблицаПрав.Колонки.Добавить("Вывод"													, Новый ОписаниеТипов("Булево"));
	ТаблицаПрав.Колонки.Добавить("ОбновлениеКонфигурацииБазыДанных"							, Новый ОписаниеТипов("Булево"));
	ТаблицаПрав.Колонки.Добавить("ТонкийКлиент"												, Новый ОписаниеТипов("Булево"));
	ТаблицаПрав.Колонки.Добавить("ВебКлиент"												, Новый ОписаниеТипов("Булево"));
	ТаблицаПрав.Колонки.Добавить("ТолстыйКлиент"											, Новый ОписаниеТипов("Булево"));
	ТаблицаПрав.Колонки.Добавить("РежимВсеФункции"											, Новый ОписаниеТипов("Булево"));
	ТаблицаПрав.Колонки.Добавить("СохранениеДанныхПользователя"								, Новый ОписаниеТипов("Булево"));
	ТаблицаПрав.Колонки.Добавить("ИзменениеСтандартнойАутентификации"						, Новый ОписаниеТипов("Булево"));
	ТаблицаПрав.Колонки.Добавить("ИзменениеСтандартнойАутентификацииСеанса"					, Новый ОписаниеТипов("Булево"));
	ТаблицаПрав.Колонки.Добавить("ИзменениеАутентификацииОССеанса"							, Новый ОписаниеТипов("Булево"));
	ТаблицаПрав.Колонки.Добавить("ИнтерактивноеУдалениеПредопределенныхДанных"				, Новый ОписаниеТипов("Булево"));
	ТаблицаПрав.Колонки.Добавить("ИнтерактивнаяПометкаУдаленияПредопределенныхДанных"		, Новый ОписаниеТипов("Булево"));
	ТаблицаПрав.Колонки.Добавить("ИнтерактивноеСнятиеПометкиУдаленияПредопределенных"		, Новый ОписаниеТипов("Булево"));
	ТаблицаПрав.Колонки.Добавить("ИнтерактивноеСнятиеПометкиУдаленияПредопределенныхДанных"	, Новый ОписаниеТипов("Булево"));
	ТаблицаПрав.Колонки.Добавить("ИнтерактивноеУдалениеПомеченныхПредопределенныхДан"		, Новый ОписаниеТипов("Булево"));
	ТаблицаПрав.Колонки.Добавить("АдминистрированиеРасширенийКонфигурации"					, Новый ОписаниеТипов("Булево"));
	ТаблицаПрав.Колонки.Добавить("ЧтениеИсторииДанных"										, Новый ОписаниеТипов("Булево"));
	ТаблицаПрав.Колонки.Добавить("ЧтениеИсторииОтсутствующихДанных"							, Новый ОписаниеТипов("Булево"));
	ТаблицаПрав.Колонки.Добавить("ИзменениеИсторииДанных"									, Новый ОписаниеТипов("Булево"));
	ТаблицаПрав.Колонки.Добавить("ИзменениеИсторииОтсутствующихДанных"						, Новый ОписаниеТипов("Булево"));
	ТаблицаПрав.Колонки.Добавить("ИзменениеНастроекИсторииДанных"							, Новый ОписаниеТипов("Булево"));
	ТаблицаПрав.Колонки.Добавить("ИзменениеКомментарияИсторииДанных"						, Новый ОписаниеТипов("Булево"));
	ТаблицаПрав.Колонки.Добавить("РегистрацияИнформационнойБазыСистемыВзаимодействия"		, Новый ОписаниеТипов("Булево"));
	
	ТаблицаПрав.Индексы.Добавить("ОбъектМетаданных, ИмяРоли");
	ТаблицаПрав.Индексы.Добавить("ИмяРоли");
	
 	Возврат ТаблицаПрав;
	
КонецФункции

Функция НастройкиРеквизита(знач МетаРеквизит, знач НастройкиРеквизитов, знач МетаТабЧасть = Неопределено)
	ИмяРеквизита = ?(МетаТабЧасть = Неопределено, "", МетаТабЧасть.Имя + ".") + МетаРеквизит.Имя;
	
	Структура = Новый Структура("Тип, ПроверкаЗаполнения");
	Настройка = НастройкиРеквизитов.Получить(ИмяРеквизита);
	Если ТипЗнч(Настройка) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(Структура, Настройка);
		Если Настройка.Тип = Неопределено Тогда
			Структура.Тип = МетаРеквизит.Тип;
		КонецЕсли;
	Иначе  
		ЗаполнитьЗначенияСвойств(Структура, МетаРеквизит);
	КонецЕсли;
	Возврат Структура;
КонецФункции

Функция ПолучитьПравилаТестированияРолейРеквизитов(знач ОбъектМетаданных)
	ПравилаТестирования = Новый Соответствие;
	ТестированиеРолейПТБПереопределяемый.ПолучитьПравилаТестированияРолейРеквизитов(ПравилаТестирования, ОбъектМетаданных);

	Попытка
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ОбъектМетаданных.ПолноеИмя());
		МенеджерОбъекта.ПолучитьПравилаТестированияРолейРеквизитов(ПравилаТестирования);
	Исключение
	КонецПопытки;

	Возврат ПравилаТестирования; 
КонецФункции

Функция ПолучитьПравилаТестированияРолейДвижений(знач ОбъектМетаданных)
	МассивОбъектов = Новый Массив;
	ТестированиеРолейПТБПереопределяемый.ПолучитьПравилаТестированияРолейДвижений(МассивОбъектов, ОбъектМетаданных);

	Попытка
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ОбъектМетаданных.ПолноеИмя());
		МенеджерОбъекта.ПолучитьПравилаТестированияРолейДвижений(МассивОбъектов);
	Исключение
	КонецПопытки;

	Возврат МассивОбъектов; 
КонецФункции

Функция ПолучитьПравилаТестированияРолейМакетовСКД(знач ОбъектМетаданных)
	МассивМакетов = Новый Массив;
	ТестированиеРолейПТБПереопределяемый.ПолучитьПравилаТестированияРолейМакетовСКД(МассивМакетов, ОбъектМетаданных);

	Попытка
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ОбъектМетаданных.ПолноеИмя());
		МенеджерОбъекта.ПолучитьПравилаТестированияРолейМакетовСКД(МассивМакетов);
	Исключение
	КонецПопытки;

	Возврат МассивМакетов; 
КонецФункции

Функция ПолучитьИсточникиДанныхЗапросовМакетовСКД(знач ИмяМакета, знач ОбъектМетаданных)
	
	Попытка
		МодульМенеджера = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ОбъектМетаданных.ПолноеИмя());
		СхемаКомпоновкиДанных = МодульМенеджера.ПолучитьМакет(ИмяМакета);
	Исключение
		СхемаКомпоновкиДанных = Неопределено;
	КонецПопытки;
	
	Если НЕ ТипЗнч(СхемаКомпоновкиДанных) = Тип("СхемаКомпоновкиДанных") Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	МассивЗапросов		= ПолучитьВсеТекстыЗапросовСКДРекурсивно(СхемаКомпоновкиДанных.НаборыДанных);
	МассивИсточников	= Новый Массив;
	
	Для Каждого ТекстЗапроса Из МассивЗапросов Цикл
		СхемаЗапроса = Новый СхемаЗапроса;
		СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
		Для Каждого ПакетЗапроса Из СхемаЗапроса.ПакетЗапросов Цикл
			Если НЕ ТипЗнч(ПакетЗапроса) = Тип("ЗапросВыбораСхемыЗапроса") Тогда
				Продолжить;
			КонецЕсли;
			
			ВложенныеИсточники = ПолучитьВсеИсточникиЗапросаРекурсивно(ПакетЗапроса);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивИсточников, ВложенныеИсточники, Истина);
		КонецЦикла;
	КонецЦикла;
	
	Возврат МассивИсточников;
	
КонецФункции

Функция ПолучитьВсеТекстыЗапросовСКДРекурсивно(КоллекцияНаборов)
	МассивЗапросов = Новый Массив;
	
	Для Каждого НаборДанных Из КоллекцияНаборов Цикл
		ТипНабораДанных = ТипЗнч(НаборДанных);
		Если ТипНабораДанных = Тип("НаборДанныхОбъектСхемыКомпоновкиДанных") Тогда
			Продолжить;
		ИначеЕсли ТипНабораДанных = Тип("НаборДанныхОбъединениеСхемыКомпоновкиДанных") Тогда
			ВложенныеЗапросы = ПолучитьВсеТекстыЗапросовСКДРекурсивно(НаборДанных.Элементы);
			Для Каждого ТекстЗапроса Из ВложенныеЗапросы Цикл
				МассивЗапросов.Добавить(ТекстЗапроса);
			КонецЦикла;
		ИначеЕсли ТипНабораДанных = Тип("НаборДанныхЗапросСхемыКомпоновкиДанных") Тогда
			МассивЗапросов.Добавить(НаборДанных.Запрос);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивЗапросов;
КонецФункции

Функция ПолучитьВсеИсточникиЗапросаРекурсивно(ПакетЗапроса)
	МассивИсточников = Новый Массив;
	
	Для Каждого ОператорСхемы Из ПакетЗапроса.Операторы Цикл
		Для Каждого ИсточникСхемы Из ОператорСхемы.Источники Цикл
			ИсточникДанных = ИсточникСхемы.Источник;
			Если ТипЗнч(ИсточникДанных) = Тип("ТаблицаСхемыЗапроса") Тогда 
				ИмяТаблицы = ИсточникДанных.ИмяТаблицы;
				Если СтрЧислоВхождений(ИмяТаблицы, ".") > 1 Тогда
					Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяТаблицы, ".", Истина, Истина);
					ИмяТаблицы = Подстроки[0] + "." + Подстроки[1];
				КонецЕсли;
				
				Если СтрНайти(ИмяТаблицы, ".") > 0 Тогда
					МассивИсточников.Добавить(ИмяТаблицы);
				КонецЕсли;
			ИначеЕсли ТипЗнч(ИсточникДанных) = Тип("ВложенныйЗапросСхемыЗапроса") Тогда
				ВложенныеИсточники = ПолучитьВсеИсточникиЗапросаРекурсивно(ИсточникДанных.Запрос);
				Для Каждого ИмяТаблицы Из ВложенныеИсточники Цикл
					МассивИсточников.Добавить(ИмяТаблицы);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат МассивИсточников;
КонецФункции

#КонецОбласти
 
 