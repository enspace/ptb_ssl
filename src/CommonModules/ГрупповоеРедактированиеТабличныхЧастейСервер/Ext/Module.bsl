// Copyright (c) 2023, ООО ПрогТехБизнес
// Лицензия Attribution 4.0 International (CC BY 4.0)

#Область ПрограммныйИнтерфейс

// Процедура собирает сведения о ВСЕХ реквизитах формы с типом = "ТаблицаФормы" 
// 		и сохраняет в реквизит формы "_Служебный_ОписаниеТаблицДляГрупповогоРедактирования_"(см. ГрупповоеРедактированиеТабличныхЧастейКлиентСервер.ИмяРеквизитаНастроекГрупповогоРедактирования()). 
//
// Источником таблицы формы могут быть реквизиты формы ("ТаблицаЗначений", "ДеревоЗначений), так и табличные части объекта.
// 
// Параметры:
//	Форма							- УправляемаяФорма 	- произвольная форма справочника, документа, обработки, содержащая таблицы формы. 
//	Настройки						- Структура 		- см. ГрупповоеРедактированиеТабличныхЧастейСервер.НастройкиИнициализации()
//	ДобавитьКнопкуПриФормировании	- Булево 			- добавить команду в командную панель таблицы при выполнении процедуры.
//
// ВНИМАНИЕ! Колонки таблицы невидимые или недоступные пользователю указывать не нужно, они групповой обработкой не редактируются. 	
//	ОтображениеСуммыВыделенныхСтрок - Соответствие - Ключ - Имя ТаблицыФормы (для которой вычисляем суммы), Значение - Имя ГруппаФормы(в которой создаем реквизиты расчета)
//
Процедура СформироватьОписаниеТабличныхЧастейФормы(Форма, знач Настройки, знач ДобавитьКнопкуПриФормировании = Истина) Экспорт
		
	МассивДобавляемыхРеквизитов = Новый Массив;
	
	ИмяРеквизитаОписанияТаблицФормы = ГрупповоеРедактированиеТабличныхЧастейКлиентСервер.ИмяРеквизитаНастроекГрупповогоРедактирования();
	
	ДобавитьРеквизитХраненияОписанияТаблицФормы(Форма, МассивДобавляемыхРеквизитов, ИмяРеквизитаОписанияТаблицФормы);
	
	ЭлементыФормы = Форма.Элементы;
	
	СоответствиеДоступныхПолейФормы = ПолучитьДоступныеПоляФормыПоНастройкам(Форма, Настройки);
	
	Если СоответствиеДоступныхПолейФормы.Количество() = 0 Тогда
		Возврат;	
	КонецЕсли;
	
	ОписаниеТаблиц = Новый Соответствие;
		
	Для Каждого КлючИЗначение Из СоответствиеДоступныхПолейФормы Цикл  
		
		ИмяТаблицы 			= КлючИЗначение.Ключ;
		ДоступныеПоляФормы 	= КлючИЗначение.Значение;
		
		ЭлементТаблица = ЭлементыФормы.Найти(ИмяТаблицы);
		Если ЭлементТаблица = Неопределено Тогда
			Продолжить;				
		КонецЕсли; 
		
		Если ТипЗнч(ЭлементТаблица) <> Тип("ТаблицаФормы") Тогда
			Продолжить;
		КонецЕсли;
		
		//Добавим данные по колонке в ОписаниеТаблиц
		ТаблицаИмяЭлемента = ЭлементТаблица.Имя;
		ТаблицаПутьКДанным = ЭлементТаблица.ПутьКДанным;
		
		//Исключаем динамический список
		КоллекцияДанныхФормы = ГрупповоеРедактированиеТабличныхЧастейКлиентСервер.ПолучитьКоллекциюДанныхФормыПоПутиКДанным(Форма, ТаблицаПутьКДанным);
		
		ЭтоДопустимаяКоллекцияДанных = ГрупповоеРедактированиеТабличныхЧастейКлиентСервер.ЭтоДопустимаяКоллекцияДанныхФормы(КоллекцияДанныхФормы);         

		Если НЕ ЭтоДопустимаяКоллекцияДанных Тогда
			Продолжить;			
		КонецЕсли;     
		
		// Получаем только те колонки таблиц, которые добавлены на форму в качестве элементов и не являются исключенными
		СоответствиеКолонокНаФорме 	= Новый Соответствие;
		ЕстьДоступныеКолонки 		= Ложь;
		
		Для Каждого ПолеФормы Из ДоступныеПоляФормы Цикл
			// Отсекаем ПоляФормы, ПутьКДанным которых получен через точку: пример Дерево.Ссылка.Наименование, исключение составляют таблицы находящиеся в Объекте
			ИмяКолонки = СтрЗаменить(ПолеФормы.ПутьКДанным, ТаблицаПутьКДанным + ".","");
			Если СтрЧислоВхождений(ИмяКолонки,".") = 0 Тогда
				СоответствиеКолонокНаФорме.Вставить(ИмяКолонки, ПолеФормы.Имя);
				ЕстьДоступныеКолонки = Истина;			
			КонецЕсли;
		КонецЦикла;
		
		// Формируем описание колонок таблицы
		МассивКолонокТаблицы = Форма.ПолучитьРеквизиты(ТаблицаПутьКДанным);
		
		ПорядокКолонки = 0;
		
		СоответствиеКолонокТаблицы = Новый Соответствие;
		Для каждого КолонкаТаблицы Из МассивКолонокТаблицы Цикл
		    НайденныйЭлемент = СоответствиеКолонокНаФорме.Получить(КолонкаТаблицы.Имя);
			
			Если НайденныйЭлемент = Неопределено Тогда
				Продолжить;
			КонецЕсли; 
			
			СтруктураКолонки = ПолучитьСтруктуруОписанияКолонки();
			СтруктураКолонки.Имя			= КолонкаТаблицы.Имя;	
			СтруктураКолонки.Путь			= КолонкаТаблицы.Путь;
			СтруктураКолонки.Заголовок		= КолонкаТаблицы.Заголовок;
			СтруктураКолонки.ТипЗначения	= КолонкаТаблицы.ТипЗначения;
			СтруктураКолонки.ИмяЭлемента	= НайденныйЭлемент;
			СтруктураКолонки.Порядок		= ПорядокКолонки;
		
			СоответствиеКолонокТаблицы.Вставить(НайденныйЭлемент, СтруктураКолонки);
			
			ПорядокКолонки = ПорядокКолонки + 1;
		КонецЦикла;
		
		СтруктураТаблицы = ПолучитьСтруктуруОписанияТаблицы();
		СтруктураТаблицы.ТаблицаИмяЭлемента	= ТаблицаИмяЭлемента;
		СтруктураТаблицы.ТаблицаПутьКДанным	= ТаблицаПутьКДанным;
		СтруктураТаблицы.ОписаниеКолонок	= СоответствиеКолонокТаблицы;
		
		ОписаниеТаблиц.Вставить(ТаблицаИмяЭлемента, СтруктураТаблицы);
 	   		
		//ЕстьДоступныеКолонки - Если у таблицы есть хотя бы одна доступная колонка, то добавляем команду
		Если ЕстьДоступныеКолонки И ДобавитьКнопкуПриФормировании Тогда
			ДобавитьКнопкуВКоманднуюПанельТаблицы(Форма, ЭлементТаблица, Настройки.НастройкиРазмещения);			
		КонецЕсли; 
	КонецЦикла;

	Форма.ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);

	Форма[ИмяРеквизитаОписанияТаблицФормы] = Новый ФиксированноеСоответствие(ОписаниеТаблиц);
	
КонецПроцедуры

// Процедура собирает сведения о ВСЕХ реквизитах формы с типом = "ТаблицаФормы" 
// 		и сохраняет в реквизит формы "_Служебный_ОписаниеТаблицДляГрупповогоРедактирования_"(см. ГрупповоеРедактированиеТабличныхЧастейКлиентСервер.ИмяРеквизитаНастроекГрупповогоРедактирования()). 
//
// Источником таблицы формы могут быть реквизиты формы ("ТаблицаЗначений", "ДеревоЗначений), так и табличные части объекта.
// 
// Параметры:
//	Форма				- УправляемаяФорма - произвольная форма справочника, документа, обработки, содержащая таблицы формы.
// 	ИсключаемыеТаблицы 	- Строка - Имена элементов формы с типом "ТаблицаФормы" для которых запрещается использование групповой обработки. Например "ТаблицаНоменклатуры, ДеревоМатериалов". 
// 	ИсключаемыеКолонки 	- Строка - Имена элементов формы с типом "ПолеФормы" или "ГруппаФормы" (колонки или группы колонок таблицыФормы) для которых запрещается использование групповой обработки. Например "Цена, НомерСтроки".
//ВНИМАНИЕ! Колонки таблицы невидимые или недоступные пользователю указывать не нужно, они групповой обработкой не редактируются. 	
//	ОтображениеСуммыВыделенныхСтрок - Соответствие - Ключ - Имя ТаблицыФормы (для которой вычисляем суммы), Значение - Имя ГруппаФормы(в которой создаем реквизиты расчета)
//
Процедура ОписаниеТабличныхЧастейДляСуммированияСтрок(Форма, знач Настройки, ДобавлятьКнопкиВКоманднуюПанельТаблицыФормы = Истина, ОтображениеСуммыВыделенныхСтрок = Неопределено)  Экспорт
	
	МассивДобавляемыхРеквизитов = Новый Массив;
	
	ИмяРеквизитаОписанияТаблицФормы = ГрупповоеРедактированиеТабличныхЧастейКлиентСервер.ИмяРеквизитаНастроекСуммирования();
	
	ДобавитьРеквизитХраненияОписанияТаблицФормы(Форма, МассивДобавляемыхРеквизитов, ИмяРеквизитаОписанияТаблицФормы);

	ЭлементыФормы = Форма.Элементы;
	
	СоответствиеДоступныхПолейФормы = ПолучитьДоступныеПоляФормыПоНастройкам(Форма, Настройки);
	
	Если СоответствиеДоступныхПолейФормы.Количество() = 0 Тогда
		Возврат;	
	КонецЕсли;

	ОписаниеТаблиц = Новый Соответствие;
		
	Для Каждого КлючИЗначение Из СоответствиеДоступныхПолейФормы Цикл  
		
		ИмяТаблицы 			= КлючИЗначение.Ключ;
		ДоступныеПоляФормы 	= КлючИЗначение.Значение;
		
		ЭлементТаблица = ЭлементыФормы.Найти(ИмяТаблицы);
		Если ЭлементТаблица = Неопределено Тогда
			Продолжить;				
		КонецЕсли; 
		
		Если ТипЗнч(ЭлементТаблица) <> Тип("ТаблицаФормы") Тогда
			Продолжить;
		КонецЕсли;
		
		//Добавим данные по колонке в ОписаниеТаблиц
		ТаблицаИмяЭлемента = ЭлементТаблица.Имя;
		ТаблицаПутьКДанным = ЭлементТаблица.ПутьКДанным;
		
		// Получаем только те колонки таблиц, которые добавлены на форму в качестве элементов и не являются исключенными
		СоответствиеКолонокНаФорме 	= Новый Соответствие;
		ЕстьДоступныеКолонки 		= Ложь;
		
		Для Каждого ПолеФормы Из ДоступныеПоляФормы Цикл
			ИмяКолонки = СтрЗаменить(ПолеФормы.ПутьКДанным, ТаблицаПутьКДанным + ".","");
			СоответствиеКолонокНаФорме.Вставить(ИмяКолонки, ПолеФормы.Имя);
		КонецЦикла;
		
		// Формируем описание колонок таблицы
		МассивКолонокТаблицы = Форма.ПолучитьРеквизиты(ТаблицаПутьКДанным);

		СоответствиеКолонокТаблицы = Новый Соответствие;
		Для каждого КолонкаТаблицы Из МассивКолонокТаблицы Цикл
		    НайденныйЭлемент = СоответствиеКолонокНаФорме.Получить(КолонкаТаблицы.Имя);
			
			Если НайденныйЭлемент = Неопределено Тогда
				Продолжить;
			КонецЕсли; 
			
			СтруктураКолонки = ПолучитьСтруктуруОписанияКолонки();
			СтруктураКолонки.Имя			= КолонкаТаблицы.Имя;	
			СтруктураКолонки.Путь			= КолонкаТаблицы.Путь;
			СтруктураКолонки.Заголовок		= КолонкаТаблицы.Заголовок;
			СтруктураКолонки.ТипЗначения	= КолонкаТаблицы.ТипЗначения;
			СтруктураКолонки.ИмяЭлемента	= НайденныйЭлемент;
			
			СоответствиеКолонокТаблицы.Вставить(НайденныйЭлемент, СтруктураКолонки)
		КонецЦикла;
		
		СтруктураТаблицы = ПолучитьСтруктуруОписанияТаблицы();
		СтруктураТаблицы.ТаблицаИмяЭлемента	= ТаблицаИмяЭлемента;
		СтруктураТаблицы.ТаблицаПутьКДанным	= ТаблицаПутьКДанным;
		СтруктураТаблицы.ОписаниеКолонок	= СоответствиеКолонокТаблицы;
		
		ОписаниеТаблиц.Вставить(ТаблицаИмяЭлемента, СтруктураТаблицы);
		
		ИмяРеквизитаСуммаСтрок 					= ГрупповоеРедактированиеТабличныхЧастейКлиентСервер.ИмяРеквизитаСуммыВыделенныхСтрок(ТаблицаИмяЭлемента);
		ИмяРеквизитаКоличествоВыделенныхСтрок 	= ГрупповоеРедактированиеТабличныхЧастейКлиентСервер.ИмяРеквизитаКоличествоВыделенныхСтрок(ТаблицаИмяЭлемента);
		
		РеквизитСуществует = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, ИмяРеквизитаСуммаСтрок);
	
		Если НЕ РеквизитСуществует Тогда
			РеквизитСуммаСтрок 					= Новый РеквизитФормы(ИмяРеквизитаСуммаСтрок, ОбщегоНазначения.ОписаниеТипаЧисло(20,4));
 			РеквизитКоличествоВЫделенныхСтрок 	= Новый РеквизитФормы(ИмяРеквизитаКоличествоВыделенныхСтрок, ОбщегоНазначения.ОписаниеТипаЧисло(7));

			МассивДобавляемыхРеквизитов.Добавить(РеквизитСуммаСтрок);		
			МассивДобавляемыхРеквизитов.Добавить(РеквизитКоличествоВЫделенныхСтрок);		
		КонецЕсли;

	КонецЦикла;

	Форма.ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
	
	Для Каждого ОписаниеТаблицы Из ОписаниеТаблиц Цикл
	
		//Добавим элементы формы для отображения суммы выделенных строк
		ИмяРодителяГруппыРасчета = Настройки.НастройкиРазмещения.Получить(ОписаниеТаблицы.Ключ);
		Если ИмяРодителяГруппыРасчета = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		РодительГруппыРасчета = ЭлементыФормы[ИмяРодителяГруппыРасчета];
		Если ТипЗнч(РодительГруппыРасчета) <> Тип("ГруппаФормы") Тогда
			Продолжить;
		КонецЕсли;                
		
		ДобавитьЭлементыРасчетаСуммыСтрок(Форма, ОписаниеТаблицы.Ключ, РодительГруппыРасчета);
		
	КонецЦикла;
	
	Форма[ИмяРеквизитаОписанияТаблицФормы] = Новый ФиксированноеСоответствие(ОписаниеТаблиц);
	
КонецПроцедуры

// Функция Элемент родитель в который будет добавлена команда группового редактирования строк
// Соответствие Элементов Ключ: Имя элемента с типом "ТаблицаФормы", Значение: Имя элемента с типом "ФормаКлиентскогоПриложения", "ГруппаФормы" или "ГруппаКоманд" (в котором создаем команду вызова группового редактирования)
//ПРИМЕР:
//Соответствие.Вставить("ТаблицаОбъекта", "ТаблицаГруппаКоманд1");
//Соответствие.Вставить("Дерево6"		, "ДеревоГруппа2");
//
Функция НастройкиИнициализации() Экспорт
                 
	Настройки = Новый Структура;
	
	Настройки.Вставить("ДоступныеТаблицы"	, Новый Массив);
	Настройки.Вставить("ДоступныеКолонки"	, Новый Массив);
	Настройки.Вставить("НедоступныеКолонки"	, Новый Массив);   
	Настройки.Вставить("НастройкиРазмещения", Новый Соответствие);   

	Возврат Настройки;
	
КонецФункции
	
// Элемент родитель в который будет добавлена элемент для отображения суммы выделенных строк
// Соответствие Элементов Ключ: Имя элемента с типом "ТаблицаФормы", Значение: Имя элемента с типом "ГруппаФормы" (в котором создаем элемент для отображения суммы выделенных строк)
//ПРИМЕР:
//Соответствие.Вставить("ТаблицаОбъекта"	, "ТаблицаГруппа1");
//Соответствие.Вставить("Дерево6"			, "ДеревоГруппа2");
//
Функция НастройкиИнициализацииСуммыВыделенныхСтрок() Экспорт
	
	Настройки = Новый Структура;
	
	Настройки.Вставить("ДоступныеТаблицы"	, Новый Массив);
	Настройки.Вставить("ДоступныеКолонки"	, Новый Массив);
	Настройки.Вставить("НедоступныеКолонки"	, Новый Массив);   
	Настройки.Вставить("НастройкиРазмещения", Новый Соответствие);   

	Возврат Настройки;
	
КонецФункции

Процедура ПриЧтенииНаСервере(Форма, знач НастройкиИнициализации) Экспорт
		
	СформироватьОписаниеТабличныхЧастейФормы(Форма, НастройкиИнициализации);	
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ПолучитьДоступныеПоляФормыПоНастройкам(знач Форма, знач Настройки)

	ОписаниеТаблиц = Новый Соответствие;
	
	ДоступныеТаблицы = Настройки.ДоступныеТаблицы;
	ДоступныеКолонки = Настройки.ДоступныеКолонки;
	НедоступныеКолонки = Настройки.НедоступныеКолонки;
	
	Если ДоступныеТаблицы.Количество() = 0 Тогда
		Возврат ОписаниеТаблиц;	
	КонецЕсли;
	
	ЭлементыФормы = Форма.Элементы;
	
	СоответствиеДоступныхКолонок = Новый Соответствие;
	
	//Обходим доступные колонки 
	Для Каждого ИмяКолонки Из ДоступныеКолонки Цикл 
		// Если элемент есть в недоступных колонках - его исключаем
		Если НедоступныеКолонки.Найти(ИмяКолонки) <> Неопределено Тогда
			Продолжить;			                                                          	
		КонецЕсли;  
		
		ЭлементКолонка = ЭлементыФормы.Найти(ИмяКолонки);
		Если ЭлементКолонка = Неопределено Тогда
			Продолжить;				
		КонецЕсли;          
		
		ЭлементТаблица = ПолучитьТаблицуРодительКолонки(ЭлементКолонка);
		
		Если ЭлементТаблица = Неопределено Тогда
			Продолжить;				
		КонецЕсли; 
		
		Если ДоступныеТаблицы.Найти(ЭлементТаблица.Имя) = Неопределено Тогда
			Продолжить;			                                                          	
		КонецЕсли;                                                    

		МассивКолонок = СоответствиеДоступныхКолонок.Получить(ЭлементТаблица.Имя);
		Если МассивКолонок = Неопределено Тогда                     
			МассивКолонок = Новый Массив;                                          
		КонецЕсли;
	
		ПолучитьДоступныеКолонкиРекурсивно(ЭлементКолонка, НедоступныеКолонки, МассивКолонок);
		
		СоответствиеДоступныхКолонок.Вставить(ЭлементТаблица.Имя, МассивКолонок);
	КонецЦикла;
	
	//Обходим доступные таблицы, исключая таблицы обработанные при цикле доступных колонок	
	Для Каждого ИмяТаблицы Из ДоступныеТаблицы Цикл 
		Если СоответствиеДоступныхКолонок.Получить(ИмяТаблицы) <> Неопределено Тогда
			Продолжить;			
		КонецЕсли;
		
		ЭлементТаблица = ЭлементыФормы.Найти(ИмяТаблицы);
		Если ЭлементТаблица = Неопределено Тогда
			Продолжить;				
		КонецЕсли; 
		
		Если ТипЗнч(ЭлементТаблица) <> Тип("ТаблицаФормы") Тогда
			Продолжить;
		КонецЕсли;
		
		МассивКолонок = СоответствиеДоступныхКолонок.Получить(ЭлементТаблица.Имя);
		Если МассивКолонок = Неопределено Тогда                     
			МассивКолонок = Новый Массив;                                          
		КонецЕсли;
	
		ПолучитьДоступныеКолонкиРекурсивно(ЭлементТаблица, НедоступныеКолонки, МассивКолонок);
		
		СоответствиеДоступныхКолонок.Вставить(ЭлементТаблица.Имя, МассивКолонок)
	КонецЦикла;
	
	Возврат СоответствиеДоступныхКолонок;
	
КонецФункции

Процедура ПолучитьДоступныеКолонкиРекурсивно(знач ЭлементКолонка, знач НедоступныеКолонки, МассивКолонок)
	
	Если НедоступныеКолонки.Найти(ЭлементКолонка.Имя) <> Неопределено Тогда
		Возврат;			                                                          	
	КонецЕсли;                     
	
	Если ТипЗнч(ЭлементКолонка) = Тип("ПолеФормы") Тогда
		МассивКолонок.Добавить(ЭлементКолонка);
	ИначеЕсли ТипЗнч(ЭлементКолонка) = Тип("ГруппаФормы") ИЛИ ТипЗнч(ЭлементКолонка) = Тип("ТаблицаФормы") Тогда  
		Для Каждого ПодчиненныйЭлемент Из ЭлементКолонка.ПодчиненныеЭлементы Цикл
			ПолучитьДоступныеКолонкиРекурсивно(ПодчиненныйЭлемент, НедоступныеКолонки, МассивКолонок);
		КонецЦикла;
	КонецЕсли; 
	
КонецПроцедуры

Функция ПолучитьСоответствиеСуществующихЭлементовФормы(знач Форма, знач ПутьКРодительскомуРеквизиту = "")
	
	МассивСуществующихРеквизитов = Форма.ПолучитьРеквизиты(ПутьКРодительскомуРеквизиту);    
	
	СуществующиеРеквизиты = Новый Соответствие;
	
	Для Каждого Реквизит Из МассивСуществующихРеквизитов Цикл
		СуществующиеРеквизиты.Вставить(Реквизит.Имя, Реквизит);		
	КонецЦикла;

	Возврат СуществующиеРеквизиты;
	
КонецФункции

Функция ПолучитьТаблицуРодительКолонки(знач ЭлементКолонка) 
	
	Если ТипЗнч(ЭлементКолонка) = Тип("ФормаКлиентскогоПриложения") Тогда
		Возврат Неопределено;		
	КонецЕсли;               

	Если ТипЗнч(ЭлементКолонка.Родитель) = Тип("ТаблицаФормы") Тогда
		Возврат ЭлементКолонка.Родитель;
	Иначе
		Возврат ПолучитьТаблицуРодительКолонки(ЭлементКолонка.Родитель)		
	КонецЕсли;                         
			
КонецФункции

Функция ПолучитьСтруктуруОписанияТаблицы()

	СтруктураТаблицы = Новый Структура;
	СтруктураТаблицы.Вставить("ТаблицаИмяЭлемента"	, "");
	СтруктураТаблицы.Вставить("ТаблицаПутьКДанным"	, "");
	СтруктураТаблицы.Вставить("ОписаниеКолонок"		, Новый Соответствие);

	Возврат СтруктураТаблицы;
	
КонецФункции

Функция ПолучитьСтруктуруОписанияКолонки()
	
	СтруктураКолонки = Новый Структура;
	СтруктураКолонки.Вставить("Имя" 		, "");	
	СтруктураКолонки.Вставить("Путь"		, "");
	СтруктураКолонки.Вставить("Заголовок"   , "");
	СтруктураКолонки.Вставить("ТипЗначения" , Неопределено);
	СтруктураКолонки.Вставить("ИмяЭлемента" , "");
	СтруктураКолонки.Вставить("Порядок" 	, 0);
	
	Возврат СтруктураКолонки;
	
КонецФункции

// Создает служебный реквизит для хранения описания таблиц формы
//
// Параметры:
//	Форма - УправляемаяФорма - форма по данным которой надо получить значения реквизитов
//
//Заполнение реквизита "_Служебный_ОписаниеТаблицДляГрупповогоРедактирования_" (см. ГрупповоеРедактированиеТабличныхЧастейКлиентСервер.ИмяРеквизитаНастроекГрупповогоРедактирования()) 
//	- ФиксированноеСоответствие - Ключ: ТаблицаИмяЭлемента формы, Значение: Структура
//СтруктураТаблиц.ТаблицаИмяЭлемента- Строка
//СтруктураТаблиц.ПутьКДанным		- Строка
//СтруктураТаблиц.ОписаниеКолонок	- Соответствие - Описание доступных колонок таблицы (Имя, Заголовок, Путь, ТипЗначения)
//
Процедура ДобавитьРеквизитХраненияОписанияТаблицФормы(Форма, МассивДобавляемыхРеквизитов, ИмяРеквизитаОписанияТаблицФормы)
	
	РеквизитСуществует = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, ИмяРеквизитаОписанияТаблицФормы);
	
	Если РеквизитСуществует Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитОписаниеТаблицДляГрупповогоРедактирования = Новый РеквизитФормы(ИмяРеквизитаОписанияТаблицФормы, Новый ОписаниеТипов("Неопределено"));
	
	МассивДобавляемыхРеквизитов.Добавить(РеквизитОписаниеТаблицДляГрупповогоРедактирования);
	
КонецПроцедуры

Процедура ДобавитьКнопкуВКоманднуюПанельТаблицы(Форма, ЭлементТаблица, НастройкиРазмещения)
	
	ТаблицаИмяЭлемента = ЭлементТаблица.Имя; 
	
	ИмяКоманды = ТаблицаИмяЭлемента + "_ГрупповоеРедактированиеСтрок_";
	
	КомандаТаблицы = Форма.Команды.Найти(ИмяКоманды);
	Если КомандаТаблицы = Неопределено Тогда
		КомандаТаблицы = Форма.Команды.Добавить(ИмяКоманды);
		
		КомандаТаблицы.Заголовок  	= "Групповое редактирование строк"; 	
		КомандаТаблицы.Подсказка  	= "Групповое редактирование выделенных строк таблицы";
		КомандаТаблицы.Действие   	= "Подключаемый_ГрупповоеРедактированиеСтрок"; 
		КомандаТаблицы.Картинка		= БиблиотекаКартинок.ТабличныйДокументТолькоПросмотр;
		КомандаТаблицы.Отображение	= ОтображениеКнопки.Картинка;   

		КомандаТаблицы.ИзменяетСохраняемыеДанные = Истина;
	КонецЕсли; 
	
	ИмяКнопки = ТаблицаИмяЭлемента + "_ГрупповоеРедактированиеСтрок_";
	
	КнопкаТаблицы = Форма.Элементы.Найти(ИмяКнопки);
	Если КнопкаТаблицы <> Неопределено Тогда 
		Возврат;
	КонецЕсли; 
	
	ИмяРодителяКнопки = НастройкиРазмещения.Получить(ТаблицаИмяЭлемента);
	Если ИмяРодителяКнопки <> Неопределено Тогда
		РодительКнопки = Форма.Элементы.Найти(ИмяРодителяКнопки); 
	Иначе
		РодительКнопки = ЭлементТаблица.КоманднаяПанель;
	КонецЕсли;
	
	ЭтоДопустимоеРазмещениеКнопки = ТипЗнч(РодительКнопки) = Тип("КоманднаяПанельФормы")
		ИЛИ ТипЗнч(РодительКнопки) = Тип("ГруппаКнопокФормы")
		ИЛИ ТипЗнч(РодительКнопки) = Тип("ГруппаФормы");
		
	Если НЕ ЭтоДопустимоеРазмещениеКнопки Тогда 
		Возврат;
	КонецЕсли;		

	КнопкаТаблицы = Форма.Элементы.Добавить(ИмяКнопки, Тип("КнопкаФормы"), ЭлементТаблица.КоманднаяПанель);
	
	КнопкаТаблицы.Вид    		= ВидКнопкиФормы.КнопкаКоманднойПанели;
	КнопкаТаблицы.Заголовок  	= "Групповое редактирование строк";
	КнопкаТаблицы.ИмяКоманды 	= ИмяКоманды;

	КнопкаТаблицы.Видимость 	= ЭлементТаблица.Видимость;
	КнопкаТаблицы.Доступность	= ЭлементТаблица.Доступность И НЕ ЭлементТаблица.ТолькоПросмотр;
	
КонецПроцедуры

Процедура ДобавитьЭлементыРасчетаСуммыСтрок(Форма, ТаблицаИмяЭлемента, РодительГруппыРасчета)
	
	СуществующиеРеквизитыФормы = Форма.ПолучитьРеквизиты(); 
	
	ИмяРеквизитаСуммаСтрок 					= ГрупповоеРедактированиеТабличныхЧастейКлиентСервер.ИмяРеквизитаСуммыВыделенныхСтрок(ТаблицаИмяЭлемента);
	ИмяРеквизитаКоличествоВыделенныхСтрок 	= ГрупповоеРедактированиеТабличныхЧастейКлиентСервер.ИмяРеквизитаКоличествоВыделенныхСтрок(ТаблицаИмяЭлемента);

	РеквизитСуществует = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, ИмяРеквизитаСуммаСтрок);
	
	Если НЕ РеквизитСуществует Тогда
		Возврат;
	КонецЕсли;
	
	ИмяГруппы = ТаблицаИмяЭлемента + "_ГруппаВыделенныхСтрок";
	ГруппаСуммы = Форма.Элементы.Найти(ИмяГруппы);
	
	Если ГруппаСуммы = Неопределено Тогда
		ГруппаСуммы = Форма.Элементы.Добавить(ИмяГруппы, Тип("ГруппаФормы"), РодительГруппыРасчета);
		ГруппаСуммы.Заголовок  				= "Сумма выделенных строк"; 	
		ГруппаСуммы.Вид						= ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаСуммы.Группировка 			= ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		ГруппаСуммы.ОтображатьЗаголовок 	= Ложь;
		ГруппаСуммы.Отображение				= ОтображениеОбычнойГруппы.Нет;
		ГруппаСуммы.РастягиватьПоГоризонтали = Ложь;
		ГруппаСуммы.РастягиватьПоВертикали 	= Ложь;
		ГруппаСуммы.ЦветФона				= ЦветаСтиля.ФонУправляющегоПоля;
	КонецЕсли;

	ИмяДекорации = ТаблицаИмяЭлемента + "_ДекорацияРасчетСуммыСтрок_";
	ДекорацияСумма = Форма.Элементы.Найти(ИмяДекорации);
	
	Если ДекорацияСумма = Неопределено Тогда
		ДекорацияСумма = Форма.Элементы.Добавить(ИмяДекорации, Тип("ДекорацияФормы"), ГруппаСуммы);
		ДекорацияСумма.Заголовок  	= "Сумма выделенных строк"; 
		ДекорацияСумма.Вид			= ВидДекорацииФормы.Картинка;
		ДекорацияСумма.Картинка		= БиблиотекаКартинок.Сумма;
		ДекорацияСумма.Высота		= 1;
		ДекорацияСумма.Ширина		= 2;
	КонецЕсли;
		
	ПолеСуммы = Форма.Элементы.Найти(ИмяРеквизитаСуммаСтрок);
	
	Если ПолеСуммы = Неопределено  Тогда
		ПолеСуммы = Форма.Элементы.Добавить(ИмяРеквизитаСуммаСтрок, Тип("ПолеФормы"), ГруппаСуммы);
		ПолеСуммы.ОтображениеПодсказки  	= ОтображениеПодсказки.Кнопка;
		ПолеСуммы.ПоложениеЗаголовка		= ПоложениеЗаголовкаЭлементаФормы.Нет;
		ПолеСуммы.Подсказка  				= "Сумма выделенных строк текущей колонки таблицы. Не работает при выделении всех строк комбинацией клавиш Ctrl+A";
		ПолеСуммы.ПутьКДанным  				= ИмяРеквизитаСуммаСтрок;
		ПолеСуммы.Вид						= ВидПоляФормы.ПолеВвода;
		ПолеСуммы.ТолькоПросмотр 			= Истина;
		ПолеСуммы.Ширина					= 20;
	КонецЕсли;
	
	ПолеКоличество = Форма.Элементы.Найти(ИмяРеквизитаКоличествоВыделенныхСтрок);
	
	Если ПолеКоличество = Неопределено  Тогда
		ПолеКоличество = Форма.Элементы.Добавить(ИмяРеквизитаКоличествоВыделенныхСтрок, Тип("ПолеФормы"), ГруппаСуммы);
		ПолеКоличество.ОтображениеПодсказки  	= ОтображениеПодсказки.Всплывающая;
		ПолеКоличество.ПоложениеЗаголовка		= ПоложениеЗаголовкаЭлементаФормы.Нет;
		ПолеКоличество.Подсказка  				= "Количество выделенных строк текущей колонки таблицы. Не работает при выделении всех строк комбинацией клавиш Ctrl+A";
		ПолеКоличество.ПутьКДанным  			= ИмяРеквизитаКоличествоВыделенныхСтрок;
		ПолеКоличество.Вид						= ВидПоляФормы.ПолеНадписи;
		ПолеКоличество.Формат					= "ЧФ=(Ч)";
		ПолеКоличество.ТолькоПросмотр 			= Истина;
		ПолеКоличество.ГоризонтальноеПоложение	= ГоризонтальноеПоложениеЭлемента.Лево;
		ПолеКоличество.РастягиватьПоГоризонтали = Ложь;
		ПолеКоличество.Ширина					= 5;
	КонецЕсли;
	
КонецПроцедуры

// Получаем колонки таблиц формы, исключаем нередактируемые колонки, формируем соответствие доступных колонок с их описанием.
// В соответствие попадают в том числе невидимые и недоступные колонки, так как эти свойства могут измениться.
// НедоступныеКолонки - Имена колонок реквизита Таблицы
//Исключаем колонки указанные в параметре НедоступныеКолонки, это может быть колонка или группа колонок
Процедура ПроверитьКолонкуТаблицы(Форма, ТаблицаПутьКДанным, ЭлементКолонка, СоответствиеКолонокНаФорме, ДоступныеКолонки, НедоступныеКолонки, ЕстьДоступныеКолонки, ИгнорироватьСвойстваДоступности = Ложь)
	
	// исключаем недоступную группу полностью
	Если НедоступныеКолонки.Найти(ЭлементКолонка.Имя) <> Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ЭлементКолонка) = Тип("ПолеФормы") Тогда
		
		// Отсекаем колонки, которые полученые через точку: пример Дерево.Колонка.Значение, исключение составляют таблицы находящиеся в Объекте
		ИмяКолонки = СтрЗаменить(ЭлементКолонка.ПутьКДанным, ТаблицаПутьКДанным + ".","");
		Если СтрЧислоВхождений(ИмяКолонки,".") = 0 Тогда
			
			СоответствиеКолонокНаФорме.Вставить(ИмяКолонки, ЭлементКолонка.Имя);
			//
			//ДоступностьОперации = ?(ИгнорироватьСвойстваДоступности, Истина, ЭлементКолонка.Доступность И НЕ ЭлементКолонка.ТолькоПросмотр); 
			//Если ЭлементКолонка.Видимость И ДоступностьОперации Тогда
			//	ЕстьДоступныеКолонки = Истина;
			//КонецЕсли;
			ЕстьДоступныеКолонки = Истина;			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ЭлементКолонка) = Тип("ГруппаФормы") Тогда  
		
		Для Каждого ПодчиненныйЭлемент Из ЭлементКолонка.ПодчиненныеЭлементы Цикл
			ПроверитьКолонкуТаблицы(Форма, ТаблицаПутьКДанным, ПодчиненныйЭлемент, СоответствиеКолонокНаФорме, ДоступныеКолонки, НедоступныеКолонки, ЕстьДоступныеКолонки, ИгнорироватьСвойстваДоступности);
		КонецЦикла;
	
	КонецЕсли;

КонецПроцедуры // ПроверитьКолонкуТаблицыНаСервере()

#КонецОбласти