
#Область УправлениеФормой

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьУсловноеОформлениеРеквизита(Форма, Обработано, ИмяРеквизита)

	Если НЕ Обработано.Найти(ИмяРеквизита) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Обработано.Добавить(ИмяРеквизита);

	Элементы	= Форма.Элементы;
	Объект		= Форма.Объект;

	#Область Наборы
	
	Если ИмяРеквизита = "РеквизитыРежимаСравнения" ИЛИ ПустаяСтрока(ИмяРеквизита) Тогда
		//УстановитьУсловноеОформлениеРеквизита(Форма, Обработано, "ГруппаПодсказкаАлгоритмаОбработки");
	КонецЕсли;

	#КонецОбласти
	
	#Область Элементы
	
	//Если ИмяРеквизита = "ГруппаПодсказкаАлгоритмаОбработки" Тогда
	//	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
	//		"ГруппаПодсказкаАлгоритмаОбработки", "Видимость", 
	//		НЕ Форма.РежимЗапроса);
	//КонецЕсли;

	#КонецОбласти 
	
	#Область Команды
	
	//Если ИмяРеквизита = "КомандаЗаписатьИЗакрыть" ИЛИ ПустаяСтрока(ИмяРеквизита) Тогда
	//	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
	//		"ЗаписатьИЗакрыть", "Видимость",
	//		НЕ Форма.ТолькоПросмотр);
	//КонецЕсли;

	#КонецОбласти 
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьУсловноеОформление(Форма, ИменаРеквизитов = "")

	Если ТипЗнч(ИменаРеквизитов) = Тип("Строка") Тогда
		Если ПустаяСтрока(ИменаРеквизитов) Тогда
			МассивИмен = Новый Массив;
			МассивИмен.Добавить("");
		Иначе
			МассивИмен = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИменаРеквизитов, ",");
		КонецЕсли;
	ИначеЕсли ТипЗнч(ИменаРеквизитов) = Тип("Массив") Тогда
		МассивИмен = ИменаРеквизитов;
	Иначе
		Возврат;
	КонецЕсли;

	Обработано = Новый Массив;
	Для Каждого ИмяРеквизита Из МассивИмен Цикл
		УстановитьУсловноеОформлениеРеквизита(Форма, Обработано, СокрЛП(ИмяРеквизита));
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура БСПТ_ПредставлениеИзменяемыхОбъектовПриИзмененииПосле(Элемент)
	
	ОбновитьПользовательскиеОбъекты();
	
КонецПроцедуры

&НаКлиенте
Процедура КонсольHTMLДокументСформирован(Элемент)
	
	БСПТ_КонсольКодаКлиент.КонсольДокументСформирован(ЭтотОбъект, "КонсольHTML", Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура КонсольHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	БСПТ_КонсольКодаКлиент.КонсольПриНажатии(ЭтотОбъект, "КонсольHTML", Элемент, ДанныеСобытия, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура БСПТ_ПриСозданииНаСервереПосле(Отказ, СтандартнаяОбработка)
	
	Если Элементы.Найти("КодАлгоритма") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СоздатьКонсольHTMLНаСервере(Отказ, СтандартнаяОбработка);
	КонсольПриСозданииНаСервере(Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура БСПТ_ПриОткрытииПосле(Отказ)
	
	КонсольПриОткрытии(Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
&После("Подключаемый_УстановитьНастройку")
Процедура БСПТ_Подключаемый_УстановитьНастройку(Команда)
	
	Если НЕ СтрНачинаетсяС(Команда.Имя, "Алгоритмы") Тогда
		Возврат;
	КонецЕсли;
	
	Консоль = БСПТ_КонсольКодаКлиент.ЭтаКонсоль(ЭтотОбъект, "КонсольHTML");
	
	БСПТ_КонсольКодаКлиент.УстановитьКонтент(Консоль, ЭтотОбъект.КодАлгоритма);
	БСПТ_КонсольКодаКлиент.УстановитьОригинальныйТекст(Консоль, ЭтотОбъект.КодАлгоритма);
		
КонецПроцедуры

&НаКлиенте
Процедура КомандаКонсолиКода(Команда)
	
	БСПТ_КонсольКодаКлиент.ВыполнитьКомандуКонсолиКода(ЭтотОбъект, Команда);
	
КонецПроцедуры

#КонецОбласти

#Область ЗавершениеНемодальныхВызовов

&НаКлиенте
&После("ВидИзменяемыхОбъектовВыборСделан")
Процедура БСПТ_ВидИзменяемыхОбъектовВыборСделан(Знач ВыбранныеОбъекты, ДополнительныеПараметры)
	
	ОбновитьПользовательскиеОбъекты();
	
КонецПроцедуры

&НаКлиенте 
Процедура ПослеИнициализациПоляКонсоли(знач ИмяРеквизита, знач ДопПараметры) Экспорт

	Если ИмяРеквизита <> "КонсольHTML" Тогда
		Возврат;
	КонецЕсли;
	
	Консоль = БСПТ_КонсольКодаКлиент.ЭтаКонсоль(ЭтотОбъект, ИмяРеквизита);
	
	БСПТ_КонсольКодаКлиент.УстановитьДирективуКомпиляции(Консоль, "НаСервере", Ложь); // ЭтотОбъект.ДирективаКомпиляции
	БСПТ_КонсольКодаКлиент.ОбнулитьМетаданные(Консоль); // выполняется в методе УстановитьДирективуКомпиляции
	БСПТ_КонсольКодаКлиент.РежимЗапроса(Консоль, Ложь); // ЭтотОбъект.РежимЗапроса
	БСПТ_КонсольКодаКлиент.УстановитьТекст(Консоль, ЭтотОбъект.КодАлгоритма);
	БСПТ_КонсольКодаКлиент.УстановитьОригинальныйТекст(Консоль, ЭтотОбъект.КодАлгоритма);
	БСПТ_КонсольКодаКлиент.ОповещатьПриИзменении(Консоль, Истина);
	
	//БСПТ_КонсольКодаКлиент.ПодсвечиватьЗапросы(Консоль, ЭтотОбъект.РежимЗапроса);
	
	//БСПТ_КонсольКодаКлиент.ЗагрузитьПользовательскиеОбъекты(Консоль, ЭтотОбъект.Параметры.ПользовательскиеОбъекты);
		
	//БСПТ_КонсольКодаКлиент.ДоступностьСравнения(Консоль, Ложь);
	//БСПТ_КонсольКодаКлиент.БыстрыеПодсказки(Консоль, Ложь);
	//БСПТ_КонсольКодаКлиент.КартаКода(Консоль, Ложь);
	
	ОбновитьПользовательскиеОбъекты();
	
КонецПроцедуры

&НаКлиенте 
Процедура ПриИзмененииПоляКонсоли(знач Консоль) Экспорт
	
	ЭтотОбъект.КодАлгоритма = БСПТ_КонсольКодаКлиент.ПолучитьТекст(Консоль);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте 
Асинх Процедура КонсольПриОткрытии(Отказ)
	Результат = Ждать БСПТ_КонсольКодаКлиент.ПриОткрытииАсинх(ЭтотОбъект, Отказ);
	
	Если НЕ Результат.Выполнено Тогда
		Элементы.ПанельКодАлгоритма.ТекущаяСтраница = Элементы.СтраницаКодАлгоритма;
	Иначе 
		Элементы.ПанельКодАлгоритма.ТекущаяСтраница = Элементы.СтраницаКонсольКода;
		
		Ждать БСПТ_КонсольКодаКлиент.ИнициализацияПоляАсинх(ЭтотОбъект, "КонсольHTML");
	КонецЕсли;
	
	УстановитьУсловноеОформление(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте 
Процедура ОбновитьПользовательскиеОбъекты()
	
	Если ПустаяСтрока(ЭтотОбъект.ВидыИзменяемыхОбъектов) Тогда 
		Возврат;
	КонецЕсли;
	
	Консоль = БСПТ_КонсольКодаКлиент.ЭтаКонсоль(ЭтотОбъект, "КонсольHTML");
	
	Типы = ПолучитьТипПоляОбъектаКонсоли(ЭтотОбъект.ВидыИзменяемыхОбъектов);
	
	Объекты = Новый Структура;
	Объекты.Вставить("Объект", Новый Структура("ref", Типы));
	
	БСПТ_КонсольКодаКлиент.ЗагрузитьПользовательскиеОбъекты(Консоль, Объекты);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьТипПоляОбъектаКонсоли(знач ТипыДанных)
	МассивТипов = СтрРазделить(ТипыДанных, ",", Ложь);
	Если МассивТипов.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	Результат = Новый Массив;
	Для Каждого СтрокаТип Из МассивТипов Цикл
		Подстроки = СтрРазделить(СтрокаТип, ".");
		НРегСтрокаТип = НРег(СокрЛП(СтрокаТип));
		Если СтрНачинаетсяС(НРегСтрокаТип, "справочник") Тогда
			Результат.Добавить("catalogs." + СокрЛП(Подстроки[Подстроки.ВГраница()]));
		ИначеЕсли СтрНачинаетсяС(НРегСтрокаТип, "документ") Тогда
			Результат.Добавить("documents." + СокрЛП(Подстроки[Подстроки.ВГраница()]));
		ИначеЕсли СтрНачинаетсяС(НРегСтрокаТип, "плансчетов") ИЛИ СтрНачинаетсяС(НРегСтрокаТип, "планысчетов") Тогда
			Результат.Добавить("сhartsOfAccounts." + СокрЛП(Подстроки[Подстроки.ВГраница()]));
		ИначеЕсли СтрНачинаетсяС(НРегСтрокаТип, "планвидовхарактеристик") ИЛИ СтрНачинаетсяС(НРегСтрокаТип, "планывидовхарактеристик") Тогда
			Результат.Добавить("chartsOfCharacteristicTypes." + СокрЛП(Подстроки[Подстроки.ВГраница()]));
		ИначеЕсли СтрНачинаетсяС(НРегСтрокаТип, "планвидоврасчета") ИЛИ СтрНачинаетсяС(НРегСтрокаТип, "планывидоврасчета") Тогда
			Результат.Добавить("chartsOfCalculationTypes." + СокрЛП(Подстроки[Подстроки.ВГраница()]));
		ИначеЕсли СтрНачинаетсяС(НРегСтрокаТип, "бизнеспроцесс") ИЛИ СтрНачинаетсяС(НРегСтрокаТип, "бизнеспроцессы") Тогда
			Результат.Добавить("businessProcesses." + СокрЛП(Подстроки[Подстроки.ВГраница()]));
		ИначеЕсли СтрНачинаетсяС(НРегСтрокаТип, "задача") ИЛИ СтрНачинаетсяС(НРегСтрокаТип, "задачи") Тогда
			Результат.Добавить("tasks." + СокрЛП(Подстроки[Подстроки.ВГраница()]));
		КонецЕсли;
	КонецЦикла;
	
	Значение = ?(Результат.Количество() = 1, Результат[0], СтрСоединить(Результат, ", "));
	
	Возврат Значение;
КонецФункции

&НаСервере
Процедура СоздатьКонсольHTMLНаСервере(Отказ, СтандартнаяОбработка)
	
	#Область Реквизит_КонсольHTML
	ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(0));
	
	МассивДобавить = Новый Массив;
	МассивДобавить.Добавить(Новый РеквизитФормы("КонсольHTML", ОписаниеТиповСтрока));
	
	ЭтотОбъект.ИзменитьРеквизиты(МассивДобавить);
	#КонецОбласти

	#Область Элемент_КонсольHTML
	ЭлементПанель = Элементы.Добавить("ПанельКодАлгоритма", Тип("ГруппаФормы"), Элементы.ГруппаАлгоритм);
	ЭлементПанель.Вид = ВидГруппыФормы.Страницы;
	ЭлементПанель.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	
	ЭлементСтраница1 = Элементы.Добавить("СтраницаКодАлгоритма", Тип("ГруппаФормы"), ЭлементПанель);
	ЭлементСтраница1.Вид = ВидГруппыФормы.Страница;
	ЭлементСтраница1.Заголовок = НСтр("ru='Текст'");
	Элементы.Переместить(Элементы.КодАлгоритма, ЭлементСтраница1);
	
	ЭлементСтраница2 = Элементы.Добавить("СтраницаКонсольКода", Тип("ГруппаФормы"), ЭлементПанель);
	ЭлементСтраница2.Вид = ВидГруппыФормы.Страница;
	ЭлементСтраница2.Заголовок = НСтр("ru='Консоль'");
	
	ЭлементПанель = Элементы.Добавить("КоманднаяПанельКонсольHTML", Тип("ГруппаФормы"), ЭлементСтраница2);
	ЭлементПанель.Вид = ВидГруппыФормы.КоманднаяПанель;
	
	ЭлементКонсоль = Элементы.Добавить("КонсольHTML", Тип("ПолеФормы"), ЭлементСтраница2);
	ЭлементКонсоль.Вид = ВидПоляФормы.ПолеHTMLДокумента;
	ЭлементКонсоль.ПутьКДанным = "КонсольHTML";
	ЭлементКонсоль.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ЭлементКонсоль.УстановитьДействие("ДокументСформирован", "КонсольHTMLДокументСформирован");
	ЭлементКонсоль.УстановитьДействие("ПриНажатии", "КонсольHTMLПриНажатии");
	#КонецОбласти
	
КонецПроцедуры

&НаСервере 
Процедура КонсольПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	БСПТ_КонсольКода.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	ПараметрыПанели = БСПТ_КонсольКодаКлиентСервер.ПараметрыПанелиКонсоли();
	ПараметрыПанели.ИзменятьКомпиляцию = Ложь;
	
	БСПТ_КонсольКода.ИнициализацияКоманднойПанели(ЭтотОбъект,
		"КонсольHTML",
		Элементы.КоманднаяПанельКонсольHTML,
		ПараметрыПанели);
	
КонецПроцедуры

#КонецОбласти


